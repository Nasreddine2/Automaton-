{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Musha\\\\Desktop\\\\DAAR\\\\projet\\\\projet1\\\\src\\\\app\\\\automate.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n\n// Utilitaire pour construire les automates à partir de l'arbre syntaxique\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Automate {\n  constructor() {\n    this.states = [];\n    this.transitions = [];\n    this.startState = null;\n    this.endState = null;\n  }\n  addState() {\n    const newState = this.states.length;\n    this.states.push(newState);\n    return newState;\n  }\n  addTransition(from, to, symbol) {\n    this.transitions.push({\n      from,\n      to,\n      symbol\n    });\n  }\n  setStartState(state) {\n    this.startState = state;\n  }\n  setEndState(state) {\n    this.endState = state;\n  }\n  getAutomate() {\n    return {\n      states: this.states,\n      transitions: this.transitions,\n      startState: this.startState,\n      endState: this.endState\n    };\n  }\n}\n\n// Cas de base pour un symbole\nconst createBaseAutomate = symbol => {\n  const automate = new Automate();\n  const start = automate.addState();\n  const end = automate.addState();\n  automate.addTransition(start, end, symbol);\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour gérer la concaténation de deux automates\nconst concatenateAutomates = (automate1, automate2) => {\n  const automate = new Automate();\n  const start = automate1.startState;\n  const end = automate2.endState;\n\n  // Copier les états et transitions des deux automates\n  automate.states = [...automate1.states, ...automate2.states];\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\n\n  // Ajouter une transition epsilon entre la fin du premier et le début du second\n  automate.addTransition(automate1.endState, automate2.startState, \"ε\");\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour gérer l'union de deux automates\nconst unionAutomates = (automate1, automate2) => {\n  const automate = new Automate();\n  const start = automate.addState(); // Nouveau état de départ\n  const end = automate.addState(); // Nouveau état de fin\n\n  // Copier les états et transitions des deux automates\n  automate.states = [...automate1.states, ...automate2.states, start, end];\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\n\n  // Ajouter des transitions epsilon du nouvel état initial vers les deux automates\n  automate.addTransition(start, automate1.startState, \"ε\");\n  automate.addTransition(start, automate2.startState, \"ε\");\n\n  // Ajouter des transitions epsilon des états finaux des deux automates vers le nouvel état final\n  automate.addTransition(automate1.endState, end, \"ε\");\n  automate.addTransition(automate2.endState, end, \"ε\");\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour gérer l'étoile de Kleene\nconst kleeneAutomate = automate1 => {\n  const automate = new Automate();\n  const start = automate.addState(); // Nouveau état de départ\n  const end = automate.addState(); // Nouveau état de fin\n\n  // Copier les états et transitions du premier automate\n  automate.states = [...automate1.states, start, end];\n  automate.transitions = [...automate1.transitions];\n\n  // Ajouter des transitions epsilon pour l'étoile de Kleene\n  automate.addTransition(start, automate1.startState, \"ε\");\n  automate.addTransition(automate1.endState, end, \"ε\");\n  automate.addTransition(automate1.endState, automate1.startState, \"ε\"); // Boucle\n  automate.addTransition(start, end, \"ε\"); // Transition directe si l'automate n'est pas utilisé\n\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour parcourir l'arbre syntaxique et créer l'automate\nconst parseArbre = arbre => {\n  if (typeof arbre === \"string\") {\n    return createBaseAutomate(arbre); // Si c'est un symbole\n  }\n  const [op, ...args] = arbre;\n  switch (op) {\n    case \".\":\n      {\n        // Concaténation\n        let result = parseArbre(args[0]);\n        for (let i = 1; i < args.length; i++) {\n          result = concatenateAutomates(result, parseArbre(args[i]));\n        }\n        return result;\n      }\n    case \"|\":\n      {\n        // Union\n        let result = parseArbre(args[0]);\n        for (let i = 1; i < args.length; i++) {\n          result = unionAutomates(result, parseArbre(args[i]));\n        }\n        return result;\n      }\n    case \"+\":\n      {\n        // Étoile de Kleene\n        return kleeneAutomate(parseArbre(args[0]));\n      }\n    default:\n      throw new Error(`Opérateur non supporté: ${op}`);\n  }\n};\n\n// Fonction pour générer l'automate à partir de l'arbre syntaxique\nconst construireAutomate = arbre => {\n  return parseArbre(arbre);\n};\n\n// Composant React pour afficher l'automate\nconst AutomateVisualizer = ({\n  automate\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\xC9tats\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: automate.states.map(state => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"\\xC9tat \", state]\n      }, state, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Transitions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: automate.transitions.map((trans, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [trans.from, \" --(\", trans.symbol, \")--> \", trans.to]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n\n// Composant principal de l'application\n_c = AutomateVisualizer;\nconst Automata = () => {\n  _s();\n  const [automate, setAutomate] = useState(null);\n  const handleGenerateAutomate = arbre => {\n    const automate = construireAutomate(arbre);\n    setAutomate(automate);\n  };\n\n  // Exemple d'arbre pour 'S(a|g|r)+on'\n  const arbreExemple1 = [\".\", [\"S\"], [\"+\", [\"|\", [\"a\"], [\"g\"], [\"r\"]]], [\"o\"], [\"n\"]];\n  // Exemple d'arbre pour 'a|(b.c)'\n  const arbreExemple2 = [\"|\", [\"a\"], [\".\", [\"b\"], [\"c\"]]];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Automate avec transitions epsilon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleGenerateAutomate(arbreExemple1),\n      children: \"G\\xE9n\\xE9rer l'automate pour \\\"S(a|g|r)+on\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleGenerateAutomate(arbreExemple2),\n      children: \"G\\xE9n\\xE9rer l'automate pour \\\"a|(b.c)\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), automate && /*#__PURE__*/_jsxDEV(AutomateVisualizer, {\n      automate: automate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n};\n_s(Automata, \"ERhXFV3aUn5F6JwVd0afoubpN58=\");\n_c2 = Automata;\nexport default Automata;\nvar _c, _c2;\n$RefreshReg$(_c, \"AutomateVisualizer\");\n$RefreshReg$(_c2, \"Automata\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Automate","constructor","states","transitions","startState","endState","addState","newState","length","push","addTransition","from","to","symbol","setStartState","state","setEndState","getAutomate","createBaseAutomate","automate","start","end","concatenateAutomates","automate1","automate2","unionAutomates","kleeneAutomate","parseArbre","arbre","op","args","result","i","Error","construireAutomate","AutomateVisualizer","children","fileName","_jsxFileName","lineNumber","columnNumber","map","trans","idx","_c","Automata","_s","setAutomate","handleGenerateAutomate","arbreExemple1","arbreExemple2","onClick","_c2","$RefreshReg$"],"sources":["C:/Users/Musha/Desktop/DAAR/projet/projet1/src/app/automate.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// Utilitaire pour construire les automates à partir de l'arbre syntaxique\r\nclass Automate {\r\n  constructor() {\r\n    this.states = [];\r\n    this.transitions = [];\r\n    this.startState = null;\r\n    this.endState = null;\r\n  }\r\n\r\n  addState() {\r\n    const newState = this.states.length;\r\n    this.states.push(newState);\r\n    return newState;\r\n  }\r\n\r\n  addTransition(from, to, symbol) {\r\n    this.transitions.push({ from, to, symbol });\r\n  }\r\n\r\n  setStartState(state) {\r\n    this.startState = state;\r\n  }\r\n\r\n  setEndState(state) {\r\n    this.endState = state;\r\n  }\r\n\r\n  getAutomate() {\r\n    return {\r\n      states: this.states,\r\n      transitions: this.transitions,\r\n      startState: this.startState,\r\n      endState: this.endState,\r\n    };\r\n  }\r\n}\r\n\r\n// Cas de base pour un symbole\r\nconst createBaseAutomate = (symbol) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState();\r\n  const end = automate.addState();\r\n  automate.addTransition(start, end, symbol);\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n  return automate;\r\n};\r\n\r\n// Fonction pour gérer la concaténation de deux automates\r\nconst concatenateAutomates = (automate1, automate2) => {\r\n  const automate = new Automate();\r\n  const start = automate1.startState;\r\n  const end = automate2.endState;\r\n\r\n  // Copier les états et transitions des deux automates\r\n  automate.states = [...automate1.states, ...automate2.states];\r\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\r\n\r\n  // Ajouter une transition epsilon entre la fin du premier et le début du second\r\n  automate.addTransition(automate1.endState, automate2.startState, \"ε\");\r\n\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n  return automate;\r\n};\r\n\r\n// Fonction pour gérer l'union de deux automates\r\nconst unionAutomates = (automate1, automate2) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState(); // Nouveau état de départ\r\n  const end = automate.addState(); // Nouveau état de fin\r\n\r\n  // Copier les états et transitions des deux automates\r\n  automate.states = [...automate1.states, ...automate2.states, start, end];\r\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\r\n\r\n  // Ajouter des transitions epsilon du nouvel état initial vers les deux automates\r\n  automate.addTransition(start, automate1.startState, \"ε\");\r\n  automate.addTransition(start, automate2.startState, \"ε\");\r\n\r\n  // Ajouter des transitions epsilon des états finaux des deux automates vers le nouvel état final\r\n  automate.addTransition(automate1.endState, end, \"ε\");\r\n  automate.addTransition(automate2.endState, end, \"ε\");\r\n\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n  return automate;\r\n};\r\n\r\n// Fonction pour gérer l'étoile de Kleene\r\nconst kleeneAutomate = (automate1) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState(); // Nouveau état de départ\r\n  const end = automate.addState(); // Nouveau état de fin\r\n\r\n  // Copier les états et transitions du premier automate\r\n  automate.states = [...automate1.states, start, end];\r\n  automate.transitions = [...automate1.transitions];\r\n\r\n  // Ajouter des transitions epsilon pour l'étoile de Kleene\r\n  automate.addTransition(start, automate1.startState, \"ε\");\r\n  automate.addTransition(automate1.endState, end, \"ε\");\r\n  automate.addTransition(automate1.endState, automate1.startState, \"ε\"); // Boucle\r\n  automate.addTransition(start, end, \"ε\"); // Transition directe si l'automate n'est pas utilisé\r\n\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n  return automate;\r\n};\r\n\r\n// Fonction pour parcourir l'arbre syntaxique et créer l'automate\r\nconst parseArbre = (arbre) => {\r\n  if (typeof arbre === \"string\") {\r\n    return createBaseAutomate(arbre); // Si c'est un symbole\r\n  }\r\n\r\n  const [op, ...args] = arbre;\r\n\r\n  switch (op) {\r\n    case \".\": {\r\n      // Concaténation\r\n      let result = parseArbre(args[0]);\r\n      for (let i = 1; i < args.length; i++) {\r\n        result = concatenateAutomates(result, parseArbre(args[i]));\r\n      }\r\n      return result;\r\n    }\r\n\r\n    case \"|\": {\r\n      // Union\r\n      let result = parseArbre(args[0]);\r\n      for (let i = 1; i < args.length; i++) {\r\n        result = unionAutomates(result, parseArbre(args[i]));\r\n      }\r\n      return result;\r\n    }\r\n\r\n    case \"+\": {\r\n      // Étoile de Kleene\r\n      return kleeneAutomate(parseArbre(args[0]));\r\n    }\r\n\r\n    default:\r\n      throw new Error(`Opérateur non supporté: ${op}`);\r\n  }\r\n};\r\n\r\n// Fonction pour générer l'automate à partir de l'arbre syntaxique\r\nconst construireAutomate = (arbre) => {\r\n  return parseArbre(arbre);\r\n};\r\n\r\n// Composant React pour afficher l'automate\r\nconst AutomateVisualizer = ({ automate }) => {\r\n  return (\r\n    <div>\r\n      <h3>États</h3>\r\n      <ul>\r\n        {automate.states.map((state) => (\r\n          <li key={state}>État {state}</li>\r\n        ))}\r\n      </ul>\r\n      <h3>Transitions</h3>\r\n      <ul>\r\n        {automate.transitions.map((trans, idx) => (\r\n          <li key={idx}>\r\n            {trans.from} --({trans.symbol})--> {trans.to}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Composant principal de l'application\r\nconst Automata = () => {\r\n  const [automate, setAutomate] = useState(null);\r\n\r\n  const handleGenerateAutomate = (arbre) => {\r\n    const automate = construireAutomate(arbre);\r\n    setAutomate(automate);\r\n  };\r\n\r\n  // Exemple d'arbre pour 'S(a|g|r)+on'\r\n  const arbreExemple1 = [\r\n    \".\",\r\n    [\"S\"],\r\n    [\"+\", [\"|\", [\"a\"], [\"g\"], [\"r\"]]],\r\n    [\"o\"],\r\n    [\"n\"],\r\n  ];\r\n  // Exemple d'arbre pour 'a|(b.c)'\r\n  const arbreExemple2 = [\"|\", [\"a\"], [\".\", [\"b\"], [\"c\"]]];\r\n\r\n  return (\r\n    <div>\r\n      <h1>Automate avec transitions epsilon</h1>\r\n      <button onClick={() => handleGenerateAutomate(arbreExemple1)}>\r\n        Générer l'automate pour \"S(a|g|r)+on\"\r\n      </button>\r\n      <button onClick={() => handleGenerateAutomate(arbreExemple2)}>\r\n        Générer l'automate pour \"a|(b.c)\"\r\n      </button>\r\n      {automate && <AutomateVisualizer automate={automate} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Automata;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;;AAEvC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,QAAQ,CAAC;EACbC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,UAAU,GAAG,IAAI;IACtB,IAAI,CAACC,QAAQ,GAAG,IAAI;EACtB;EAEAC,QAAQA,CAAA,EAAG;IACT,MAAMC,QAAQ,GAAG,IAAI,CAACL,MAAM,CAACM,MAAM;IACnC,IAAI,CAACN,MAAM,CAACO,IAAI,CAACF,QAAQ,CAAC;IAC1B,OAAOA,QAAQ;EACjB;EAEAG,aAAaA,CAACC,IAAI,EAAEC,EAAE,EAAEC,MAAM,EAAE;IAC9B,IAAI,CAACV,WAAW,CAACM,IAAI,CAAC;MAAEE,IAAI;MAAEC,EAAE;MAAEC;IAAO,CAAC,CAAC;EAC7C;EAEAC,aAAaA,CAACC,KAAK,EAAE;IACnB,IAAI,CAACX,UAAU,GAAGW,KAAK;EACzB;EAEAC,WAAWA,CAACD,KAAK,EAAE;IACjB,IAAI,CAACV,QAAQ,GAAGU,KAAK;EACvB;EAEAE,WAAWA,CAAA,EAAG;IACZ,OAAO;MACLf,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BC,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BC,QAAQ,EAAE,IAAI,CAACA;IACjB,CAAC;EACH;AACF;;AAEA;AACA,MAAMa,kBAAkB,GAAIL,MAAM,IAAK;EACrC,MAAMM,QAAQ,GAAG,IAAInB,QAAQ,CAAC,CAAC;EAC/B,MAAMoB,KAAK,GAAGD,QAAQ,CAACb,QAAQ,CAAC,CAAC;EACjC,MAAMe,GAAG,GAAGF,QAAQ,CAACb,QAAQ,CAAC,CAAC;EAC/Ba,QAAQ,CAACT,aAAa,CAACU,KAAK,EAAEC,GAAG,EAAER,MAAM,CAAC;EAC1CM,QAAQ,CAACL,aAAa,CAACM,KAAK,CAAC;EAC7BD,QAAQ,CAACH,WAAW,CAACK,GAAG,CAAC;EACzB,OAAOF,QAAQ;AACjB,CAAC;;AAED;AACA,MAAMG,oBAAoB,GAAGA,CAACC,SAAS,EAAEC,SAAS,KAAK;EACrD,MAAML,QAAQ,GAAG,IAAInB,QAAQ,CAAC,CAAC;EAC/B,MAAMoB,KAAK,GAAGG,SAAS,CAACnB,UAAU;EAClC,MAAMiB,GAAG,GAAGG,SAAS,CAACnB,QAAQ;;EAE9B;EACAc,QAAQ,CAACjB,MAAM,GAAG,CAAC,GAAGqB,SAAS,CAACrB,MAAM,EAAE,GAAGsB,SAAS,CAACtB,MAAM,CAAC;EAC5DiB,QAAQ,CAAChB,WAAW,GAAG,CAAC,GAAGoB,SAAS,CAACpB,WAAW,EAAE,GAAGqB,SAAS,CAACrB,WAAW,CAAC;;EAE3E;EACAgB,QAAQ,CAACT,aAAa,CAACa,SAAS,CAAClB,QAAQ,EAAEmB,SAAS,CAACpB,UAAU,EAAE,GAAG,CAAC;EAErEe,QAAQ,CAACL,aAAa,CAACM,KAAK,CAAC;EAC7BD,QAAQ,CAACH,WAAW,CAACK,GAAG,CAAC;EACzB,OAAOF,QAAQ;AACjB,CAAC;;AAED;AACA,MAAMM,cAAc,GAAGA,CAACF,SAAS,EAAEC,SAAS,KAAK;EAC/C,MAAML,QAAQ,GAAG,IAAInB,QAAQ,CAAC,CAAC;EAC/B,MAAMoB,KAAK,GAAGD,QAAQ,CAACb,QAAQ,CAAC,CAAC,CAAC,CAAC;EACnC,MAAMe,GAAG,GAAGF,QAAQ,CAACb,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEjC;EACAa,QAAQ,CAACjB,MAAM,GAAG,CAAC,GAAGqB,SAAS,CAACrB,MAAM,EAAE,GAAGsB,SAAS,CAACtB,MAAM,EAAEkB,KAAK,EAAEC,GAAG,CAAC;EACxEF,QAAQ,CAAChB,WAAW,GAAG,CAAC,GAAGoB,SAAS,CAACpB,WAAW,EAAE,GAAGqB,SAAS,CAACrB,WAAW,CAAC;;EAE3E;EACAgB,QAAQ,CAACT,aAAa,CAACU,KAAK,EAAEG,SAAS,CAACnB,UAAU,EAAE,GAAG,CAAC;EACxDe,QAAQ,CAACT,aAAa,CAACU,KAAK,EAAEI,SAAS,CAACpB,UAAU,EAAE,GAAG,CAAC;;EAExD;EACAe,QAAQ,CAACT,aAAa,CAACa,SAAS,CAAClB,QAAQ,EAAEgB,GAAG,EAAE,GAAG,CAAC;EACpDF,QAAQ,CAACT,aAAa,CAACc,SAAS,CAACnB,QAAQ,EAAEgB,GAAG,EAAE,GAAG,CAAC;EAEpDF,QAAQ,CAACL,aAAa,CAACM,KAAK,CAAC;EAC7BD,QAAQ,CAACH,WAAW,CAACK,GAAG,CAAC;EACzB,OAAOF,QAAQ;AACjB,CAAC;;AAED;AACA,MAAMO,cAAc,GAAIH,SAAS,IAAK;EACpC,MAAMJ,QAAQ,GAAG,IAAInB,QAAQ,CAAC,CAAC;EAC/B,MAAMoB,KAAK,GAAGD,QAAQ,CAACb,QAAQ,CAAC,CAAC,CAAC,CAAC;EACnC,MAAMe,GAAG,GAAGF,QAAQ,CAACb,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEjC;EACAa,QAAQ,CAACjB,MAAM,GAAG,CAAC,GAAGqB,SAAS,CAACrB,MAAM,EAAEkB,KAAK,EAAEC,GAAG,CAAC;EACnDF,QAAQ,CAAChB,WAAW,GAAG,CAAC,GAAGoB,SAAS,CAACpB,WAAW,CAAC;;EAEjD;EACAgB,QAAQ,CAACT,aAAa,CAACU,KAAK,EAAEG,SAAS,CAACnB,UAAU,EAAE,GAAG,CAAC;EACxDe,QAAQ,CAACT,aAAa,CAACa,SAAS,CAAClB,QAAQ,EAAEgB,GAAG,EAAE,GAAG,CAAC;EACpDF,QAAQ,CAACT,aAAa,CAACa,SAAS,CAAClB,QAAQ,EAAEkB,SAAS,CAACnB,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC;EACvEe,QAAQ,CAACT,aAAa,CAACU,KAAK,EAAEC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;;EAEzCF,QAAQ,CAACL,aAAa,CAACM,KAAK,CAAC;EAC7BD,QAAQ,CAACH,WAAW,CAACK,GAAG,CAAC;EACzB,OAAOF,QAAQ;AACjB,CAAC;;AAED;AACA,MAAMQ,UAAU,GAAIC,KAAK,IAAK;EAC5B,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAOV,kBAAkB,CAACU,KAAK,CAAC,CAAC,CAAC;EACpC;EAEA,MAAM,CAACC,EAAE,EAAE,GAAGC,IAAI,CAAC,GAAGF,KAAK;EAE3B,QAAQC,EAAE;IACR,KAAK,GAAG;MAAE;QACR;QACA,IAAIE,MAAM,GAAGJ,UAAU,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;QAChC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACtB,MAAM,EAAEwB,CAAC,EAAE,EAAE;UACpCD,MAAM,GAAGT,oBAAoB,CAACS,MAAM,EAAEJ,UAAU,CAACG,IAAI,CAACE,CAAC,CAAC,CAAC,CAAC;QAC5D;QACA,OAAOD,MAAM;MACf;IAEA,KAAK,GAAG;MAAE;QACR;QACA,IAAIA,MAAM,GAAGJ,UAAU,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;QAChC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACtB,MAAM,EAAEwB,CAAC,EAAE,EAAE;UACpCD,MAAM,GAAGN,cAAc,CAACM,MAAM,EAAEJ,UAAU,CAACG,IAAI,CAACE,CAAC,CAAC,CAAC,CAAC;QACtD;QACA,OAAOD,MAAM;MACf;IAEA,KAAK,GAAG;MAAE;QACR;QACA,OAAOL,cAAc,CAACC,UAAU,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;MAC5C;IAEA;MACE,MAAM,IAAIG,KAAK,CAAC,2BAA2BJ,EAAE,EAAE,CAAC;EACpD;AACF,CAAC;;AAED;AACA,MAAMK,kBAAkB,GAAIN,KAAK,IAAK;EACpC,OAAOD,UAAU,CAACC,KAAK,CAAC;AAC1B,CAAC;;AAED;AACA,MAAMO,kBAAkB,GAAGA,CAAC;EAAEhB;AAAS,CAAC,KAAK;EAC3C,oBACEpB,OAAA;IAAAqC,QAAA,gBACErC,OAAA;MAAAqC,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACdzC,OAAA;MAAAqC,QAAA,EACGjB,QAAQ,CAACjB,MAAM,CAACuC,GAAG,CAAE1B,KAAK,iBACzBhB,OAAA;QAAAqC,QAAA,GAAgB,UAAK,EAACrB,KAAK;MAAA,GAAlBA,KAAK;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAkB,CACjC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACLzC,OAAA;MAAAqC,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBzC,OAAA;MAAAqC,QAAA,EACGjB,QAAQ,CAAChB,WAAW,CAACsC,GAAG,CAAC,CAACC,KAAK,EAAEC,GAAG,kBACnC5C,OAAA;QAAAqC,QAAA,GACGM,KAAK,CAAC/B,IAAI,EAAC,MAAI,EAAC+B,KAAK,CAAC7B,MAAM,EAAC,OAAK,EAAC6B,KAAK,CAAC9B,EAAE;MAAA,GADrC+B,GAAG;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAER,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;;AAED;AAAAI,EAAA,GArBMT,kBAAkB;AAsBxB,MAAMU,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAAC3B,QAAQ,EAAE4B,WAAW,CAAC,GAAGlD,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAMmD,sBAAsB,GAAIpB,KAAK,IAAK;IACxC,MAAMT,QAAQ,GAAGe,kBAAkB,CAACN,KAAK,CAAC;IAC1CmB,WAAW,CAAC5B,QAAQ,CAAC;EACvB,CAAC;;EAED;EACA,MAAM8B,aAAa,GAAG,CACpB,GAAG,EACH,CAAC,GAAG,CAAC,EACL,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EACjC,CAAC,GAAG,CAAC,EACL,CAAC,GAAG,CAAC,CACN;EACD;EACA,MAAMC,aAAa,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;EAEvD,oBACEnD,OAAA;IAAAqC,QAAA,gBACErC,OAAA;MAAAqC,QAAA,EAAI;IAAiC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1CzC,OAAA;MAAQoD,OAAO,EAAEA,CAAA,KAAMH,sBAAsB,CAACC,aAAa,CAAE;MAAAb,QAAA,EAAC;IAE9D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTzC,OAAA;MAAQoD,OAAO,EAAEA,CAAA,KAAMH,sBAAsB,CAACE,aAAa,CAAE;MAAAd,QAAA,EAAC;IAE9D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACRrB,QAAQ,iBAAIpB,OAAA,CAACoC,kBAAkB;MAAChB,QAAQ,EAAEA;IAAS;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;AAEV,CAAC;AAACM,EAAA,CA/BID,QAAQ;AAAAO,GAAA,GAARP,QAAQ;AAiCd,eAAeA,QAAQ;AAAC,IAAAD,EAAA,EAAAQ,GAAA;AAAAC,YAAA,CAAAT,EAAA;AAAAS,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}