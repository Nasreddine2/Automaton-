{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Musha\\\\Desktop\\\\DAAR\\\\projet\\\\Projet 1\\\\Automaton-\\\\Client\\\\src\\\\app\\\\automate.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// Compteur d'état global pour assurer des identifiants uniques\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet stateCounter = 0;\n\n// Classe Automate pour stocker les états et transitions\nclass Automate {\n  constructor() {\n    this.states = [];\n    this.transitions = [];\n    this.startState = null;\n    this.endStates = new Set(); // Utilisation d'un ensemble pour gérer plusieurs états finaux\n  }\n\n  // Fonction pour ajouter un état avec un identifiant unique\n  addState() {\n    const newState = stateCounter++;\n    this.states.push(newState);\n    return newState;\n  }\n  addTransition(from, to, symbol) {\n    this.transitions.push({\n      from,\n      to,\n      symbol\n    });\n  }\n  setStartState(state) {\n    this.startState = state;\n  }\n  setEndState(state) {\n    this.endStates.add(state); // Ajouter à l'ensemble des états finaux\n  }\n  getAutomate() {\n    return {\n      states: this.states,\n      transitions: this.transitions,\n      startState: this.startState,\n      endStates: this.endStates // Retourner les états finaux sous forme d'ensemble\n    };\n  }\n}\n\n// Fonction pour créer un automate pour un symbole\nconst createBaseAutomate = symbol => {\n  const automate = new Automate();\n  const start = automate.addState();\n  const end = automate.addState();\n  automate.addTransition(start, end, symbol);\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour concaténer deux automates\nconst concatenateAutomates = (automate1, automate2) => {\n  const automate = new Automate();\n\n  // Copier les états et transitions des deux automates\n  automate.states = [...automate1.states, ...automate2.states];\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\n\n  // Ajouter une transition epsilon entre la fin du premier automate et le début du second\n  automate.addTransition(automate1.endStates.values().next().value, automate2.startState, \"ε\");\n\n  // Définir les nouveaux états de départ et de fin\n  automate.setStartState(automate1.startState);\n  automate.setEndState(automate2.endStates.values().next().value);\n  return automate;\n};\n\n// Fonction pour gérer l'union de deux automates (opérateur |)\nconst unionAutomates = (automate1, automate2) => {\n  const automate = new Automate();\n  const start = automate.addState(); // Nouvel état de départ\n  const end = automate.addState(); // Nouvel état de fin\n\n  // Copier les états et transitions des deux automates\n  automate.states = [...automate1.states, ...automate2.states, start, end];\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\n\n  // Ajouter des transitions epsilon du nouvel état initial vers les deux sous-automates\n  automate.addTransition(start, automate1.startState, \"ε\");\n  automate.addTransition(start, automate2.startState, \"ε\");\n\n  // Ajouter des transitions epsilon des états finaux des sous-automates vers le nouvel état final\n  automate1.endStates.forEach(state => {\n    automate.addTransition(state, end, \"ε\");\n  });\n  automate2.endStates.forEach(state => {\n    automate.addTransition(state, end, \"ε\");\n  });\n\n  // Définir les nouveaux états de départ et de fin\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour gérer la fermeture de Kleene (opérateur *)\nconst kleeneAutomate = automate1 => {\n  const automate = new Automate();\n  const start = automate.addState(); // Nouvel état de départ\n  const end = automate.addState(); // Nouvel état de fin\n\n  // Copier les états et transitions du premier automate\n  automate.states = [...automate1.states, start, end];\n  automate.transitions = [...automate1.transitions];\n\n  // Ajouter des transitions epsilon pour la fermeture de Kleene\n  automate.addTransition(start, automate1.startState, \"ε\");\n  automate.addTransition(automate1.endStates.values().next().value, end, \"ε\");\n  automate.addTransition(automate1.endStates.values().next().value, automate1.startState, \"ε\"); // Boucle\n  automate.addTransition(start, end, \"ε\"); // Transition directe\n\n  // Définir les nouveaux états de départ et de fin\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour gérer l'opérateur +\nconst plusAutomate = automate1 => {\n  const automate = new Automate();\n  const start = automate.addState(); // Nouvel état de départ\n  const end = automate.addState(); // Nouvel état de fin\n\n  // Copier les états et transitions du premier automate\n  automate.states = [...automate1.states, start, end];\n  automate.transitions = [...automate1.transitions];\n\n  // Ajouter des transitions epsilon pour l'opérateur +\n  automate.addTransition(start, automate1.startState, \"ε\");\n  automate.addTransition(automate1.endStates.values().next().value, end, \"ε\");\n  automate.addTransition(automate1.endStates.values().next().value, automate1.startState, \"ε\"); // Boucle\n\n  // Définir les nouveaux états de départ et de fin\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour parser une expression régulière en respectant les priorités et les parenthèses\nconst parseRegex = regex => {\n  const precedence = {\n    \"|\": 1,\n    \".\": 2,\n    \"*\": 3,\n    \"+\": 3\n  };\n  const operators = [];\n  const output = [];\n  const isOperator = char => [\"|\", \".\", \"*\", \"+\"].includes(char);\n  const applyOperator = () => {\n    const operator = operators.pop();\n    if (operator === \".\") {\n      const b = output.pop();\n      const a = output.pop();\n      output.push([\".\", a, b]);\n    } else if (operator === \"|\") {\n      const b = output.pop();\n      const a = output.pop();\n      output.push([\"|\", a, b]);\n    } else if (operator === \"*\") {\n      const a = output.pop();\n      output.push([\"*\", a]);\n    } else if (operator === \"+\") {\n      const a = output.pop();\n      output.push([\"+\", a]);\n    }\n  };\n  let i = 0;\n  while (i < regex.length) {\n    const char = regex[i];\n    if (char === \"(\") {\n      // Trouver la sous-expression entre parenthèses\n      let j = i;\n      let openParentheses = 1;\n      while (openParentheses > 0 && ++j < regex.length) {\n        if (regex[j] === \"(\") openParentheses++;\n        if (regex[j] === \")\") openParentheses--;\n      }\n\n      // Appeler récursivement `parseRegex` sur la sous-expression\n      const subexpression = regex.slice(i + 1, j);\n      output.push(parseRegex(subexpression));\n      i = j; // Avancer jusqu'à la parenthèse fermante\n    } else if (!isOperator(char)) {\n      output.push(char); // Ajouter les symboles au output\n    } else {\n      while (operators.length > 0 && operators[operators.length - 1] !== \"(\" && precedence[operators[operators.length - 1]] >= precedence[char]) {\n        applyOperator();\n      }\n      operators.push(char);\n    }\n    i++;\n  }\n\n  // Appliquer les opérateurs restants\n  while (operators.length > 0) {\n    applyOperator();\n  }\n  return output[0];\n};\n\n// Fonction pour parcourir l'arbre syntaxique et créer l'automate\nconst parseArbre = arbre => {\n  if (typeof arbre === \"string\") {\n    return createBaseAutomate(arbre); // Si c'est un symbole\n  }\n  const [op, ...args] = arbre;\n  switch (op) {\n    case \".\":\n      {\n        // Concaténation\n        let result = parseArbre(args[0]);\n        for (let i = 1; i < args.length; i++) {\n          result = concatenateAutomates(result, parseArbre(args[i]));\n        }\n        return result;\n      }\n    case \"|\":\n      {\n        // Union\n        let result = parseArbre(args[0]);\n        for (let i = 1; i < args.length; i++) {\n          result = unionAutomates(result, parseArbre(args[i]));\n        }\n        return result;\n      }\n    case \"*\":\n      {\n        // Fermeture de Kleene\n        return kleeneAutomate(parseArbre(args[0]));\n      }\n    case \"+\":\n      {\n        // L'opérateur +\n        return plusAutomate(parseArbre(args[0]));\n      }\n    default:\n      throw new Error(`Opérateur non supporté: ${op}`);\n  }\n};\n\n// Fonction pour générer l'automate à partir d'une expression régulière\nconst construireAutomate = regex => {\n  const arbre = parseRegex(regex); // Construire l'arbre syntaxique à partir du regex\n  return parseArbre(arbre); // Construire l'automate à partir de l'arbre syntaxique\n};\n\n// Fonction pour tester si une sous-chaîne est acceptée par l'automate\nconst estAccepte = (automate, chaine, index = 0, etatCourant = automate.startState) => {\n  if (index === chaine.length) {\n    return automate.endStates.has(etatCourant); // Vérifier si l'état courant est un état final\n  }\n  const symbol = chaine[index];\n  let transitions = automate.transitions.filter(t => t.from === etatCourant);\n\n  // Parcourir les transitions epsilon\n  for (let trans of transitions) {\n    if (trans.symbol === \"ε\") {\n      if (estAccepte(automate, chaine, index, trans.to)) {\n        return true;\n      }\n    }\n  }\n\n  // Parcourir les transitions pour le symbole courant\n  for (let trans of transitions) {\n    if (trans.symbol === symbol) {\n      if (estAccepte(automate, chaine, index + 1, trans.to)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// Fonction pour tester si une sous-chaîne (motif) est présente dans un mot\nconst testMotifDansMot = (automate, mot) => {\n  // Essayer toutes les sous-chaînes du mot pour trouver le motif\n  for (let i = 0; i < mot.length; i++) {\n    for (let j = i; j <= mot.length; j++) {\n      const sousChaine = mot.slice(i, j);\n      if (estAccepte(automate, sousChaine)) {\n        return true; // Si une sous-chaîne correspond au motif, retourner vrai\n      }\n    }\n  }\n  return false;\n};\n\n// Fonction pour tester toutes les sous-chaînes acceptées dans une ligne de texte\nconst TestTxt = (automate, line) => {\n  const mots = line.split(\" \"); // Diviser la ligne en mots\n  for (let mot of mots) {\n    if (testMotifDansMot(automate, mot)) {\n      return true; // Si un mot contient le motif, retourner vrai\n    }\n  }\n  return false; // Si aucun mot ne contient le motif, retourner faux\n};\n\n// Fonction pour calculer la fermeture epsilon d'un état donné\n_c = TestTxt;\nconst epsilonClosure = (automate, state) => {\n  const closure = new Set([state]);\n  const stack = [state];\n  while (stack.length > 0) {\n    const currentState = stack.pop();\n    const epsilonTransitions = automate.transitions.filter(t => t.from === currentState && t.symbol === \"ε\");\n    for (const transition of epsilonTransitions) {\n      if (!closure.has(transition.to)) {\n        closure.add(transition.to);\n        stack.push(transition.to);\n      }\n    }\n  }\n  return closure;\n};\n\n// Fonction pour calculer la fermeture epsilon d'un ensemble d'états\nconst epsilonClosureSet = (automate, states) => {\n  let closure = new Set();\n  for (const state of states) {\n    closure = new Set([...closure, ...epsilonClosure(automate, state)]);\n  }\n  return closure;\n};\n\n// Fonction pour calculer la transition d'un ensemble d'états sur un symbole donné\nconst move = (automate, states, symbol) => {\n  const nextStates = new Set();\n  for (const state of states) {\n    const transitions = automate.transitions.filter(t => t.from === state && t.symbol === symbol);\n    for (const transition of transitions) {\n      nextStates.add(transition.to);\n    }\n  }\n  return nextStates;\n};\n\n// Fonction pour déterminiser un automate non déterministe avec epsilon transitions\nconst determinizeAutomate = nfa => {\n  const dfa = new Automate();\n  const alphabet = Array.from(new Set(nfa.transitions.map(t => t.symbol).filter(s => s !== \"ε\")));\n  const initialClosure = epsilonClosure(nfa, nfa.startState);\n  const dfaStatesMap = new Map();\n  dfaStatesMap.set(JSON.stringify([...initialClosure]), dfa.addState());\n  dfa.setStartState(dfaStatesMap.get(JSON.stringify([...initialClosure])));\n  const unprocessedStates = [initialClosure];\n  while (unprocessedStates.length > 0) {\n    const currentSet = unprocessedStates.pop();\n    const currentStateId = dfaStatesMap.get(JSON.stringify([...currentSet]));\n\n    // Vérifier si l'un des états de l'ensemble est un état final du NFA\n    if ([...currentSet].some(state => nfa.endStates.has(state))) {\n      dfa.setEndState(currentStateId); // Marquer cet état comme final dans le DFA\n    }\n    for (const symbol of alphabet) {\n      const nextSet = epsilonClosureSet(nfa, move(nfa, currentSet, symbol));\n      if (nextSet.size === 0) continue; // Ignorer les ensembles vides\n\n      const nextSetKey = JSON.stringify([...nextSet]);\n      if (!dfaStatesMap.has(nextSetKey)) {\n        const newState = dfa.addState();\n        dfaStatesMap.set(nextSetKey, newState);\n        unprocessedStates.push(nextSet);\n      }\n      dfa.addTransition(currentStateId, dfaStatesMap.get(nextSetKey), symbol);\n    }\n  }\n  return dfa;\n};\nconst removeInaccessibleStates = automate => {\n  const reachableStates = new Set([automate.startState]);\n  const stack = [automate.startState];\n  while (stack.length > 0) {\n    const currentState = stack.pop();\n    const transitions = automate.transitions.filter(t => t.from === currentState);\n    for (const transition of transitions) {\n      if (!reachableStates.has(transition.to)) {\n        reachableStates.add(transition.to);\n        stack.push(transition.to);\n      }\n    }\n  }\n\n  // Filtrer les états et les transitions pour ne conserver que les états accessibles\n  automate.states = automate.states.filter(state => reachableStates.has(state));\n  automate.transitions = automate.transitions.filter(t => reachableStates.has(t.from) && reachableStates.has(t.to));\n  return automate;\n};\n\n// Fonction pour effectuer la minimisation avec l'algorithme de Moore\nconst minimizeAutomate = dfa => {\n  // Étape 1: Supprimer les états inaccessibles\n  removeInaccessibleStates(dfa);\n\n  // Étape 2: Partitionner les états en deux ensembles: états finaux et non finaux\n  let partitions = [new Set(), new Set()];\n  dfa.states.forEach(state => {\n    if (dfa.endStates.has(state)) {\n      partitions[0].add(state); // États finaux\n    } else {\n      partitions[1].add(state); // États non finaux\n    }\n  });\n  let stable = false;\n  const alphabet = Array.from(new Set(dfa.transitions.map(t => t.symbol)));\n\n  // Étape 3: Raffiner les partitions\n  while (!stable) {\n    stable = true;\n    const newPartitions = [];\n    for (const partition of partitions) {\n      const partitionMap = new Map();\n      for (const state of partition) {\n        const signature = alphabet.map(symbol => {\n          const transition = dfa.transitions.find(t => t.from === state && t.symbol === symbol);\n          const targetState = transition ? transition.to : null;\n\n          // Trouver la partition contenant l'état cible\n          const partitionIndex = partitions.findIndex(p => p.has(targetState));\n          return partitionIndex;\n        }).join(\"-\");\n        if (!partitionMap.has(signature)) {\n          partitionMap.set(signature, new Set());\n        }\n        partitionMap.get(signature).add(state);\n      }\n\n      // Ajouter les nouvelles partitions\n      newPartitions.push(...partitionMap.values());\n    }\n\n    // Si les partitions ont changé, on continue la boucle\n    if (newPartitions.length !== partitions.length) {\n      stable = false;\n    }\n    partitions = newPartitions;\n  }\n\n  // Étape 4: Construire le nouvel automate minimisé\n  const minimizedAutomate = new Automate();\n  const stateMap = new Map(); // Map pour relier les anciens états aux nouveaux états\n\n  partitions.forEach((partition, index) => {\n    const newState = minimizedAutomate.addState();\n    partition.forEach(state => stateMap.set(state, newState));\n\n    // Marquer l'état comme final s'il contient un ancien état final\n    if ([...partition].some(state => dfa.endStates.has(state))) {\n      minimizedAutomate.setEndState(newState);\n    }\n  });\n\n  // Recréer les transitions dans l'automate minimisé sans duplicata\n  dfa.transitions.forEach(t => {\n    const fromState = stateMap.get(t.from);\n    const toState = stateMap.get(t.to);\n\n    // Vérifier si la transition existe déjà\n    if (!minimizedAutomate.transitions.some(trans => trans.from === fromState && trans.to === toState && trans.symbol === t.symbol)) {\n      minimizedAutomate.addTransition(fromState, toState, t.symbol);\n    }\n  });\n\n  // Définir l'état initial\n  minimizedAutomate.setStartState(stateMap.get(dfa.startState));\n  return minimizedAutomate;\n};\n\n// Composant React pour afficher l'automate avec les états initiaux et finaux\nconst AutomateVisualizer = ({\n  automate\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\xC9tats\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: automate.states.map(state => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [state, automate.endStates.has(state) && \" (Final)\", \" \", state === automate.startState && \" (Initial)\"]\n      }, state, true, {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 555,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Transitions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: automate.transitions.map((trans, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [trans.from, \" --(\", trans.symbol, \")--> \", trans.to]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 553,\n    columnNumber: 5\n  }, this);\n};\n\n// Composant principal de l'application\n_c2 = AutomateVisualizer;\nconst Automaton = () => {\n  _s();\n  const [automate, setAutomate] = useState(null); // Automate (NFA ou DFA)\n  const [detAutomate, setDetAutomate] = useState(null); // Automate déterminisé (DFA)\n  const [MinAutomate, setMinAutomate] = useState(null); // Automate Min (Min)\n  const [regex, setRegex] = useState(\"\");\n  const [fileContent, setFileContent] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [show, setshow] = useState(false);\n\n  // Fonction pour générer l'automate (NFA)\n  const handleGenerateAutomate = async () => {\n    return new Promise(resolve => {\n      stateCounter = 0; // Réinitialiser le compteur d'état pour chaque nouveau calcul\n      const automate = construireAutomate(regex); // Générer l'automate à partir de l'expression régulière\n      setAutomate(automate); // Stocker l'automate NFA\n      setDetAutomate(null); // Réinitialiser l'automate déterminisé (DFA)\n      setMinAutomate(null); // Réinitialiser l'automate minimisé\n      resolve(); // Marquer la fonction comme terminée\n    });\n  };\n\n  // Fonction pour déterminiser l'automate (NFA -> DFA)\n  const handleDeterminizeAutomate = async () => {\n    return new Promise(resolve => {\n      if (automate) {\n        const dfa = determinizeAutomate(automate); // Déterminiser l'automate NFA\n        setDetAutomate(dfa); // Stocker l'automate déterminisé (DFA)\n        setMinAutomate(null); // Réinitialiser l'automate minimisé\n      }\n      resolve(); // Marquer la fonction comme terminée\n    });\n  };\n\n  // Fonction pour minimiser l'automate déterminisé (DFA)\n  const handleMinimizeAutomate = async () => {\n    return new Promise(resolve => {\n      if (detAutomate) {\n        const minDfa = minimizeAutomate(detAutomate); // Minimiser l'automate DFA\n        setMinAutomate(minDfa); // Stocker l'automate minimisé\n      }\n      resolve(); // Marquer la fonction comme terminée\n    });\n  };\n\n  // Lecture du fichier et stockage du contenu dans le state\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.onload = () => {\n      setFileContent(reader.result);\n    };\n    reader.readAsText(file);\n  };\n\n  // Fonction de recherche utilisant l'automate\n  const handleSearch = () => {\n    if (!MinAutomate) return;\n    const lines = fileContent.split(\"\\n\"); // Diviser le contenu du fichier par ligne\n    const results = lines.filter(line => TestTxt(MinAutomate, line)); // Rechercher les lignes qui correspondent\n    setSearchResults(results);\n  };\n  const handleAll = async () => {\n    await handleGenerateAutomate(); // Attendre que l'automate soit généré\n    await handleDeterminizeAutomate(); // Attendre que l'automate soit déterminisé\n    await handleMinimizeAutomate(); // Attendre que l'automate soit minimisé\n    handleSearch(); // Ensuite, rechercher dans le fichier\n  };\n\n  // Utiliser useEffect pour déclencher les étapes successives\n  useEffect(() => {\n    if (automate) {\n      handleDeterminizeAutomate(); // Déclencher la déterminisation après la génération de l'automate\n    }\n  }, [automate]);\n  useEffect(() => {\n    if (detAutomate) {\n      handleMinimizeAutomate(); // Déclencher la minimisation après la déterminisation de l'automate\n    }\n  }, [detAutomate]);\n  useEffect(() => {\n    if (MinAutomate) {\n      handleSearch(); // Déclencher la recherche après la minimisation de l'automate\n    }\n  }, [MinAutomate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      children: \"HomePage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 669,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Automate avec transitions epsilon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 670,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex gap-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Regex:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: regex,\n          onChange: e => setRegex(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 674,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileUpload,\n        accept: \".txt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAll,\n        children: \"Rechercher\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 671,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"R\\xE9sultats de la recherche :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 683,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: searchResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: result\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 684,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn shadow-sm\",\n      onClick: () => {\n        if (searchResults) setshow(!show);\n      },\n      children: \"Show Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 689,\n      columnNumber: 7\n    }, this), show && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [automate && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Automate (NFA)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(AutomateVisualizer, {\n          automate: automate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 702,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), detAutomate && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Automate D\\xE9terminis\\xE9 (DFA)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 707,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(AutomateVisualizer, {\n          automate: detAutomate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 708,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), MinAutomate && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Automate Minimiser (Min)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 713,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(AutomateVisualizer, {\n          automate: MinAutomate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 668,\n    columnNumber: 5\n  }, this);\n};\n_s(Automaton, \"GDPew1OTyt24v60SPlQ5JWO0fXs=\");\n_c3 = Automaton;\nexport default Automaton;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"TestTxt\");\n$RefreshReg$(_c2, \"AutomateVisualizer\");\n$RefreshReg$(_c3, \"Automaton\");","map":{"version":3,"names":["React","useState","useEffect","Link","jsxDEV","_jsxDEV","Fragment","_Fragment","stateCounter","Automate","constructor","states","transitions","startState","endStates","Set","addState","newState","push","addTransition","from","to","symbol","setStartState","state","setEndState","add","getAutomate","createBaseAutomate","automate","start","end","concatenateAutomates","automate1","automate2","values","next","value","unionAutomates","forEach","kleeneAutomate","plusAutomate","parseRegex","regex","precedence","operators","output","isOperator","char","includes","applyOperator","operator","pop","b","a","i","length","j","openParentheses","subexpression","slice","parseArbre","arbre","op","args","result","Error","construireAutomate","estAccepte","chaine","index","etatCourant","has","filter","t","trans","testMotifDansMot","mot","sousChaine","TestTxt","line","mots","split","_c","epsilonClosure","closure","stack","currentState","epsilonTransitions","transition","epsilonClosureSet","move","nextStates","determinizeAutomate","nfa","dfa","alphabet","Array","map","s","initialClosure","dfaStatesMap","Map","set","JSON","stringify","get","unprocessedStates","currentSet","currentStateId","some","nextSet","size","nextSetKey","removeInaccessibleStates","reachableStates","minimizeAutomate","partitions","stable","newPartitions","partition","partitionMap","signature","find","targetState","partitionIndex","findIndex","p","join","minimizedAutomate","stateMap","fromState","toState","AutomateVisualizer","children","fileName","_jsxFileName","lineNumber","columnNumber","idx","_c2","Automaton","_s","setAutomate","detAutomate","setDetAutomate","MinAutomate","setMinAutomate","setRegex","fileContent","setFileContent","searchResults","setSearchResults","show","setshow","handleGenerateAutomate","Promise","resolve","handleDeterminizeAutomate","handleMinimizeAutomate","minDfa","handleFileUpload","event","file","target","files","reader","FileReader","onload","readAsText","handleSearch","lines","results","handleAll","className","onChange","e","type","accept","onClick","_c3","$RefreshReg$"],"sources":["C:/Users/Musha/Desktop/DAAR/projet/Projet 1/Automaton-/Client/src/app/automate.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Compteur d'état global pour assurer des identifiants uniques\r\nlet stateCounter = 0;\r\n\r\n// Classe Automate pour stocker les états et transitions\r\nclass Automate {\r\n  constructor() {\r\n    this.states = [];\r\n    this.transitions = [];\r\n    this.startState = null;\r\n    this.endStates = new Set(); // Utilisation d'un ensemble pour gérer plusieurs états finaux\r\n  }\r\n\r\n  // Fonction pour ajouter un état avec un identifiant unique\r\n  addState() {\r\n    const newState = stateCounter++;\r\n    this.states.push(newState);\r\n    return newState;\r\n  }\r\n\r\n  addTransition(from, to, symbol) {\r\n    this.transitions.push({ from, to, symbol });\r\n  }\r\n\r\n  setStartState(state) {\r\n    this.startState = state;\r\n  }\r\n\r\n  setEndState(state) {\r\n    this.endStates.add(state); // Ajouter à l'ensemble des états finaux\r\n  }\r\n\r\n  getAutomate() {\r\n    return {\r\n      states: this.states,\r\n      transitions: this.transitions,\r\n      startState: this.startState,\r\n      endStates: this.endStates, // Retourner les états finaux sous forme d'ensemble\r\n    };\r\n  }\r\n}\r\n\r\n// Fonction pour créer un automate pour un symbole\r\nconst createBaseAutomate = (symbol) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState();\r\n  const end = automate.addState();\r\n  automate.addTransition(start, end, symbol);\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n  return automate;\r\n};\r\n\r\n// Fonction pour concaténer deux automates\r\nconst concatenateAutomates = (automate1, automate2) => {\r\n  const automate = new Automate();\r\n\r\n  // Copier les états et transitions des deux automates\r\n  automate.states = [...automate1.states, ...automate2.states];\r\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\r\n\r\n  // Ajouter une transition epsilon entre la fin du premier automate et le début du second\r\n  automate.addTransition(\r\n    automate1.endStates.values().next().value,\r\n    automate2.startState,\r\n    \"ε\"\r\n  );\r\n\r\n  // Définir les nouveaux états de départ et de fin\r\n  automate.setStartState(automate1.startState);\r\n  automate.setEndState(automate2.endStates.values().next().value);\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour gérer l'union de deux automates (opérateur |)\r\nconst unionAutomates = (automate1, automate2) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState(); // Nouvel état de départ\r\n  const end = automate.addState(); // Nouvel état de fin\r\n\r\n  // Copier les états et transitions des deux automates\r\n  automate.states = [...automate1.states, ...automate2.states, start, end];\r\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\r\n\r\n  // Ajouter des transitions epsilon du nouvel état initial vers les deux sous-automates\r\n  automate.addTransition(start, automate1.startState, \"ε\");\r\n  automate.addTransition(start, automate2.startState, \"ε\");\r\n\r\n  // Ajouter des transitions epsilon des états finaux des sous-automates vers le nouvel état final\r\n  automate1.endStates.forEach((state) => {\r\n    automate.addTransition(state, end, \"ε\");\r\n  });\r\n  automate2.endStates.forEach((state) => {\r\n    automate.addTransition(state, end, \"ε\");\r\n  });\r\n\r\n  // Définir les nouveaux états de départ et de fin\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour gérer la fermeture de Kleene (opérateur *)\r\nconst kleeneAutomate = (automate1) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState(); // Nouvel état de départ\r\n  const end = automate.addState(); // Nouvel état de fin\r\n\r\n  // Copier les états et transitions du premier automate\r\n  automate.states = [...automate1.states, start, end];\r\n  automate.transitions = [...automate1.transitions];\r\n\r\n  // Ajouter des transitions epsilon pour la fermeture de Kleene\r\n  automate.addTransition(start, automate1.startState, \"ε\");\r\n  automate.addTransition(automate1.endStates.values().next().value, end, \"ε\");\r\n  automate.addTransition(\r\n    automate1.endStates.values().next().value,\r\n    automate1.startState,\r\n    \"ε\"\r\n  ); // Boucle\r\n  automate.addTransition(start, end, \"ε\"); // Transition directe\r\n\r\n  // Définir les nouveaux états de départ et de fin\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour gérer l'opérateur +\r\nconst plusAutomate = (automate1) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState(); // Nouvel état de départ\r\n  const end = automate.addState(); // Nouvel état de fin\r\n\r\n  // Copier les états et transitions du premier automate\r\n  automate.states = [...automate1.states, start, end];\r\n  automate.transitions = [...automate1.transitions];\r\n\r\n  // Ajouter des transitions epsilon pour l'opérateur +\r\n  automate.addTransition(start, automate1.startState, \"ε\");\r\n  automate.addTransition(automate1.endStates.values().next().value, end, \"ε\");\r\n  automate.addTransition(\r\n    automate1.endStates.values().next().value,\r\n    automate1.startState,\r\n    \"ε\"\r\n  ); // Boucle\r\n\r\n  // Définir les nouveaux états de départ et de fin\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour parser une expression régulière en respectant les priorités et les parenthèses\r\nconst parseRegex = (regex) => {\r\n  const precedence = { \"|\": 1, \".\": 2, \"*\": 3, \"+\": 3 };\r\n  const operators = [];\r\n  const output = [];\r\n\r\n  const isOperator = (char) => [\"|\", \".\", \"*\", \"+\"].includes(char);\r\n\r\n  const applyOperator = () => {\r\n    const operator = operators.pop();\r\n    if (operator === \".\") {\r\n      const b = output.pop();\r\n      const a = output.pop();\r\n      output.push([\".\", a, b]);\r\n    } else if (operator === \"|\") {\r\n      const b = output.pop();\r\n      const a = output.pop();\r\n      output.push([\"|\", a, b]);\r\n    } else if (operator === \"*\") {\r\n      const a = output.pop();\r\n      output.push([\"*\", a]);\r\n    } else if (operator === \"+\") {\r\n      const a = output.pop();\r\n      output.push([\"+\", a]);\r\n    }\r\n  };\r\n\r\n  let i = 0;\r\n  while (i < regex.length) {\r\n    const char = regex[i];\r\n\r\n    if (char === \"(\") {\r\n      // Trouver la sous-expression entre parenthèses\r\n      let j = i;\r\n      let openParentheses = 1;\r\n      while (openParentheses > 0 && ++j < regex.length) {\r\n        if (regex[j] === \"(\") openParentheses++;\r\n        if (regex[j] === \")\") openParentheses--;\r\n      }\r\n\r\n      // Appeler récursivement `parseRegex` sur la sous-expression\r\n      const subexpression = regex.slice(i + 1, j);\r\n      output.push(parseRegex(subexpression));\r\n      i = j; // Avancer jusqu'à la parenthèse fermante\r\n    } else if (!isOperator(char)) {\r\n      output.push(char); // Ajouter les symboles au output\r\n    } else {\r\n      while (\r\n        operators.length > 0 &&\r\n        operators[operators.length - 1] !== \"(\" &&\r\n        precedence[operators[operators.length - 1]] >= precedence[char]\r\n      ) {\r\n        applyOperator();\r\n      }\r\n      operators.push(char);\r\n    }\r\n    i++;\r\n  }\r\n\r\n  // Appliquer les opérateurs restants\r\n  while (operators.length > 0) {\r\n    applyOperator();\r\n  }\r\n\r\n  return output[0];\r\n};\r\n\r\n// Fonction pour parcourir l'arbre syntaxique et créer l'automate\r\nconst parseArbre = (arbre) => {\r\n  if (typeof arbre === \"string\") {\r\n    return createBaseAutomate(arbre); // Si c'est un symbole\r\n  }\r\n\r\n  const [op, ...args] = arbre;\r\n\r\n  switch (op) {\r\n    case \".\": {\r\n      // Concaténation\r\n      let result = parseArbre(args[0]);\r\n      for (let i = 1; i < args.length; i++) {\r\n        result = concatenateAutomates(result, parseArbre(args[i]));\r\n      }\r\n      return result;\r\n    }\r\n\r\n    case \"|\": {\r\n      // Union\r\n      let result = parseArbre(args[0]);\r\n      for (let i = 1; i < args.length; i++) {\r\n        result = unionAutomates(result, parseArbre(args[i]));\r\n      }\r\n      return result;\r\n    }\r\n\r\n    case \"*\": {\r\n      // Fermeture de Kleene\r\n      return kleeneAutomate(parseArbre(args[0]));\r\n    }\r\n\r\n    case \"+\": {\r\n      // L'opérateur +\r\n      return plusAutomate(parseArbre(args[0]));\r\n    }\r\n\r\n    default:\r\n      throw new Error(`Opérateur non supporté: ${op}`);\r\n  }\r\n};\r\n\r\n// Fonction pour générer l'automate à partir d'une expression régulière\r\nconst construireAutomate = (regex) => {\r\n  const arbre = parseRegex(regex); // Construire l'arbre syntaxique à partir du regex\r\n  return parseArbre(arbre); // Construire l'automate à partir de l'arbre syntaxique\r\n};\r\n\r\n// Fonction pour tester si une sous-chaîne est acceptée par l'automate\r\nconst estAccepte = (\r\n  automate,\r\n  chaine,\r\n  index = 0,\r\n  etatCourant = automate.startState\r\n) => {\r\n  if (index === chaine.length) {\r\n    return automate.endStates.has(etatCourant); // Vérifier si l'état courant est un état final\r\n  }\r\n\r\n  const symbol = chaine[index];\r\n  let transitions = automate.transitions.filter((t) => t.from === etatCourant);\r\n\r\n  // Parcourir les transitions epsilon\r\n  for (let trans of transitions) {\r\n    if (trans.symbol === \"ε\") {\r\n      if (estAccepte(automate, chaine, index, trans.to)) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Parcourir les transitions pour le symbole courant\r\n  for (let trans of transitions) {\r\n    if (trans.symbol === symbol) {\r\n      if (estAccepte(automate, chaine, index + 1, trans.to)) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n// Fonction pour tester si une sous-chaîne (motif) est présente dans un mot\r\nconst testMotifDansMot = (automate, mot) => {\r\n  // Essayer toutes les sous-chaînes du mot pour trouver le motif\r\n  for (let i = 0; i < mot.length; i++) {\r\n    for (let j = i; j <= mot.length; j++) {\r\n      const sousChaine = mot.slice(i, j);\r\n      if (estAccepte(automate, sousChaine)) {\r\n        return true; // Si une sous-chaîne correspond au motif, retourner vrai\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n// Fonction pour tester toutes les sous-chaînes acceptées dans une ligne de texte\r\nconst TestTxt = (automate, line) => {\r\n  const mots = line.split(\" \"); // Diviser la ligne en mots\r\n  for (let mot of mots) {\r\n    if (testMotifDansMot(automate, mot)) {\r\n      return true; // Si un mot contient le motif, retourner vrai\r\n    }\r\n  }\r\n  return false; // Si aucun mot ne contient le motif, retourner faux\r\n};\r\n\r\n// Fonction pour calculer la fermeture epsilon d'un état donné\r\nconst epsilonClosure = (automate, state) => {\r\n  const closure = new Set([state]);\r\n  const stack = [state];\r\n\r\n  while (stack.length > 0) {\r\n    const currentState = stack.pop();\r\n    const epsilonTransitions = automate.transitions.filter(\r\n      (t) => t.from === currentState && t.symbol === \"ε\"\r\n    );\r\n\r\n    for (const transition of epsilonTransitions) {\r\n      if (!closure.has(transition.to)) {\r\n        closure.add(transition.to);\r\n        stack.push(transition.to);\r\n      }\r\n    }\r\n  }\r\n\r\n  return closure;\r\n};\r\n\r\n// Fonction pour calculer la fermeture epsilon d'un ensemble d'états\r\nconst epsilonClosureSet = (automate, states) => {\r\n  let closure = new Set();\r\n  for (const state of states) {\r\n    closure = new Set([...closure, ...epsilonClosure(automate, state)]);\r\n  }\r\n  return closure;\r\n};\r\n\r\n// Fonction pour calculer la transition d'un ensemble d'états sur un symbole donné\r\nconst move = (automate, states, symbol) => {\r\n  const nextStates = new Set();\r\n  for (const state of states) {\r\n    const transitions = automate.transitions.filter(\r\n      (t) => t.from === state && t.symbol === symbol\r\n    );\r\n    for (const transition of transitions) {\r\n      nextStates.add(transition.to);\r\n    }\r\n  }\r\n  return nextStates;\r\n};\r\n\r\n// Fonction pour déterminiser un automate non déterministe avec epsilon transitions\r\nconst determinizeAutomate = (nfa) => {\r\n  const dfa = new Automate();\r\n  const alphabet = Array.from(\r\n    new Set(nfa.transitions.map((t) => t.symbol).filter((s) => s !== \"ε\"))\r\n  );\r\n\r\n  const initialClosure = epsilonClosure(nfa, nfa.startState);\r\n  const dfaStatesMap = new Map();\r\n  dfaStatesMap.set(JSON.stringify([...initialClosure]), dfa.addState());\r\n  dfa.setStartState(dfaStatesMap.get(JSON.stringify([...initialClosure])));\r\n\r\n  const unprocessedStates = [initialClosure];\r\n\r\n  while (unprocessedStates.length > 0) {\r\n    const currentSet = unprocessedStates.pop();\r\n    const currentStateId = dfaStatesMap.get(JSON.stringify([...currentSet]));\r\n\r\n    // Vérifier si l'un des états de l'ensemble est un état final du NFA\r\n    if ([...currentSet].some((state) => nfa.endStates.has(state))) {\r\n      dfa.setEndState(currentStateId); // Marquer cet état comme final dans le DFA\r\n    }\r\n\r\n    for (const symbol of alphabet) {\r\n      const nextSet = epsilonClosureSet(nfa, move(nfa, currentSet, symbol));\r\n\r\n      if (nextSet.size === 0) continue; // Ignorer les ensembles vides\r\n\r\n      const nextSetKey = JSON.stringify([...nextSet]);\r\n\r\n      if (!dfaStatesMap.has(nextSetKey)) {\r\n        const newState = dfa.addState();\r\n        dfaStatesMap.set(nextSetKey, newState);\r\n        unprocessedStates.push(nextSet);\r\n      }\r\n\r\n      dfa.addTransition(currentStateId, dfaStatesMap.get(nextSetKey), symbol);\r\n    }\r\n  }\r\n\r\n  return dfa;\r\n};\r\n\r\nconst removeInaccessibleStates = (automate) => {\r\n  const reachableStates = new Set([automate.startState]);\r\n  const stack = [automate.startState];\r\n\r\n  while (stack.length > 0) {\r\n    const currentState = stack.pop();\r\n    const transitions = automate.transitions.filter(\r\n      (t) => t.from === currentState\r\n    );\r\n\r\n    for (const transition of transitions) {\r\n      if (!reachableStates.has(transition.to)) {\r\n        reachableStates.add(transition.to);\r\n        stack.push(transition.to);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Filtrer les états et les transitions pour ne conserver que les états accessibles\r\n  automate.states = automate.states.filter((state) =>\r\n    reachableStates.has(state)\r\n  );\r\n  automate.transitions = automate.transitions.filter(\r\n    (t) => reachableStates.has(t.from) && reachableStates.has(t.to)\r\n  );\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour effectuer la minimisation avec l'algorithme de Moore\r\nconst minimizeAutomate = (dfa) => {\r\n  // Étape 1: Supprimer les états inaccessibles\r\n  removeInaccessibleStates(dfa);\r\n\r\n  // Étape 2: Partitionner les états en deux ensembles: états finaux et non finaux\r\n  let partitions = [new Set(), new Set()];\r\n  dfa.states.forEach((state) => {\r\n    if (dfa.endStates.has(state)) {\r\n      partitions[0].add(state); // États finaux\r\n    } else {\r\n      partitions[1].add(state); // États non finaux\r\n    }\r\n  });\r\n\r\n  let stable = false;\r\n  const alphabet = Array.from(new Set(dfa.transitions.map((t) => t.symbol)));\r\n\r\n  // Étape 3: Raffiner les partitions\r\n  while (!stable) {\r\n    stable = true;\r\n    const newPartitions = [];\r\n\r\n    for (const partition of partitions) {\r\n      const partitionMap = new Map();\r\n\r\n      for (const state of partition) {\r\n        const signature = alphabet\r\n          .map((symbol) => {\r\n            const transition = dfa.transitions.find(\r\n              (t) => t.from === state && t.symbol === symbol\r\n            );\r\n            const targetState = transition ? transition.to : null;\r\n\r\n            // Trouver la partition contenant l'état cible\r\n            const partitionIndex = partitions.findIndex((p) =>\r\n              p.has(targetState)\r\n            );\r\n            return partitionIndex;\r\n          })\r\n          .join(\"-\");\r\n\r\n        if (!partitionMap.has(signature)) {\r\n          partitionMap.set(signature, new Set());\r\n        }\r\n        partitionMap.get(signature).add(state);\r\n      }\r\n\r\n      // Ajouter les nouvelles partitions\r\n      newPartitions.push(...partitionMap.values());\r\n    }\r\n\r\n    // Si les partitions ont changé, on continue la boucle\r\n    if (newPartitions.length !== partitions.length) {\r\n      stable = false;\r\n    }\r\n\r\n    partitions = newPartitions;\r\n  }\r\n\r\n  // Étape 4: Construire le nouvel automate minimisé\r\n  const minimizedAutomate = new Automate();\r\n  const stateMap = new Map(); // Map pour relier les anciens états aux nouveaux états\r\n\r\n  partitions.forEach((partition, index) => {\r\n    const newState = minimizedAutomate.addState();\r\n    partition.forEach((state) => stateMap.set(state, newState));\r\n\r\n    // Marquer l'état comme final s'il contient un ancien état final\r\n    if ([...partition].some((state) => dfa.endStates.has(state))) {\r\n      minimizedAutomate.setEndState(newState);\r\n    }\r\n  });\r\n\r\n  // Recréer les transitions dans l'automate minimisé sans duplicata\r\n  dfa.transitions.forEach((t) => {\r\n    const fromState = stateMap.get(t.from);\r\n    const toState = stateMap.get(t.to);\r\n\r\n    // Vérifier si la transition existe déjà\r\n    if (\r\n      !minimizedAutomate.transitions.some(\r\n        (trans) =>\r\n          trans.from === fromState &&\r\n          trans.to === toState &&\r\n          trans.symbol === t.symbol\r\n      )\r\n    ) {\r\n      minimizedAutomate.addTransition(fromState, toState, t.symbol);\r\n    }\r\n  });\r\n\r\n  // Définir l'état initial\r\n  minimizedAutomate.setStartState(stateMap.get(dfa.startState));\r\n\r\n  return minimizedAutomate;\r\n};\r\n\r\n// Composant React pour afficher l'automate avec les états initiaux et finaux\r\nconst AutomateVisualizer = ({ automate }) => {\r\n  return (\r\n    <div>\r\n      <h3>États</h3>\r\n      <ul>\r\n        {automate.states.map((state) => (\r\n          <li key={state}>\r\n            {state}\r\n            {automate.endStates.has(state) && \" (Final)\"}{\" \"}\r\n            {/* Vérifie si l'état est final */}\r\n            {state === automate.startState && \" (Initial)\"}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <h3>Transitions</h3>\r\n      <ul>\r\n        {automate.transitions.map((trans, idx) => (\r\n          <li key={idx}>\r\n            {trans.from} --({trans.symbol})--&gt; {trans.to}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Composant principal de l'application\r\nconst Automaton = () => {\r\n  const [automate, setAutomate] = useState(null); // Automate (NFA ou DFA)\r\n  const [detAutomate, setDetAutomate] = useState(null); // Automate déterminisé (DFA)\r\n  const [MinAutomate, setMinAutomate] = useState(null); // Automate Min (Min)\r\n  const [regex, setRegex] = useState(\"\");\r\n  const [fileContent, setFileContent] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [show, setshow] = useState(false);\r\n\r\n  // Fonction pour générer l'automate (NFA)\r\n  const handleGenerateAutomate = async () => {\r\n    return new Promise((resolve) => {\r\n      stateCounter = 0; // Réinitialiser le compteur d'état pour chaque nouveau calcul\r\n      const automate = construireAutomate(regex); // Générer l'automate à partir de l'expression régulière\r\n      setAutomate(automate); // Stocker l'automate NFA\r\n      setDetAutomate(null); // Réinitialiser l'automate déterminisé (DFA)\r\n      setMinAutomate(null); // Réinitialiser l'automate minimisé\r\n      resolve(); // Marquer la fonction comme terminée\r\n    });\r\n  };\r\n\r\n  // Fonction pour déterminiser l'automate (NFA -> DFA)\r\n  const handleDeterminizeAutomate = async () => {\r\n    return new Promise((resolve) => {\r\n      if (automate) {\r\n        const dfa = determinizeAutomate(automate); // Déterminiser l'automate NFA\r\n        setDetAutomate(dfa); // Stocker l'automate déterminisé (DFA)\r\n        setMinAutomate(null); // Réinitialiser l'automate minimisé\r\n      }\r\n      resolve(); // Marquer la fonction comme terminée\r\n    });\r\n  };\r\n\r\n  // Fonction pour minimiser l'automate déterminisé (DFA)\r\n  const handleMinimizeAutomate = async () => {\r\n    return new Promise((resolve) => {\r\n      if (detAutomate) {\r\n        const minDfa = minimizeAutomate(detAutomate); // Minimiser l'automate DFA\r\n        setMinAutomate(minDfa); // Stocker l'automate minimisé\r\n      }\r\n      resolve(); // Marquer la fonction comme terminée\r\n    });\r\n  };\r\n\r\n  // Lecture du fichier et stockage du contenu dans le state\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      setFileContent(reader.result);\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  // Fonction de recherche utilisant l'automate\r\n  const handleSearch = () => {\r\n    if (!MinAutomate) return;\r\n\r\n    const lines = fileContent.split(\"\\n\"); // Diviser le contenu du fichier par ligne\r\n    const results = lines.filter((line) => TestTxt(MinAutomate, line)); // Rechercher les lignes qui correspondent\r\n    setSearchResults(results);\r\n  };\r\n\r\n  const handleAll = async () => {\r\n    await handleGenerateAutomate(); // Attendre que l'automate soit généré\r\n    await handleDeterminizeAutomate(); // Attendre que l'automate soit déterminisé\r\n    await handleMinimizeAutomate(); // Attendre que l'automate soit minimisé\r\n    handleSearch(); // Ensuite, rechercher dans le fichier\r\n  };\r\n\r\n  // Utiliser useEffect pour déclencher les étapes successives\r\n  useEffect(() => {\r\n    if (automate) {\r\n      handleDeterminizeAutomate(); // Déclencher la déterminisation après la génération de l'automate\r\n    }\r\n  }, [automate]);\r\n\r\n  useEffect(() => {\r\n    if (detAutomate) {\r\n      handleMinimizeAutomate(); // Déclencher la minimisation après la déterminisation de l'automate\r\n    }\r\n  }, [detAutomate]);\r\n\r\n  useEffect(() => {\r\n    if (MinAutomate) {\r\n      handleSearch(); // Déclencher la recherche après la minimisation de l'automate\r\n    }\r\n  }, [MinAutomate]);\r\n\r\n  return (\r\n    <div>\r\n      <Link to=\"/\">HomePage</Link>\r\n      <h1>Automate avec transitions epsilon</h1>\r\n      <div className=\"d-flex gap-3\">\r\n        <label>\r\n          Regex:\r\n          <input value={regex} onChange={(e) => setRegex(e.target.value)} />\r\n        </label>\r\n\r\n        {/* Téléchargement du fichier */}\r\n        <input type=\"file\" onChange={handleFileUpload} accept=\".txt\" />\r\n\r\n        {/* Bouton pour déclencher la recherche */}\r\n        <button onClick={handleAll}>Rechercher</button>\r\n      </div>{\" \"}\r\n      <h3>Résultats de la recherche :</h3>\r\n      <ul>\r\n        {searchResults.map((result, index) => (\r\n          <li key={index}>{result}</li>\r\n        ))}\r\n      </ul>\r\n      <button\r\n        className=\"btn shadow-sm\"\r\n        onClick={() => {\r\n          if (searchResults) setshow(!show);\r\n        }}\r\n      >\r\n        Show Details\r\n      </button>\r\n      {show && (\r\n        <>\r\n          {automate && (\r\n            <>\r\n              <h2>Automate (NFA)</h2>\r\n              <AutomateVisualizer automate={automate} />\r\n            </>\r\n          )}\r\n          {detAutomate && (\r\n            <>\r\n              <h2>Automate Déterminisé (DFA)</h2>\r\n              <AutomateVisualizer automate={detAutomate} />\r\n            </>\r\n          )}\r\n          {MinAutomate && (\r\n            <>\r\n              <h2>Automate Minimiser (Min)</h2>\r\n              <AutomateVisualizer automate={MinAutomate} />\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Automaton;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}