{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Musha\\\\Desktop\\\\DAAR\\\\projet\\\\Projet 1\\\\Automaton-\\\\Client\\\\src\\\\app\\\\automate.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Modal } from \"react-bootstrap\";\n\n// Compteur d'état global pour assurer des identifiants uniques\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet stateCounter = 0;\n\n// Classe Automate pour stocker les états et transitions\nclass Automate {\n  constructor() {\n    this.states = [];\n    this.transitions = [];\n    this.startState = null;\n    this.endStates = new Set(); // Utilisation d'un ensemble pour gérer plusieurs états finaux\n  }\n\n  // Fonction pour ajouter un état avec un identifiant unique\n  addState() {\n    const newState = stateCounter++;\n    this.states.push(newState);\n    return newState;\n  }\n  addTransition(from, to, symbol) {\n    this.transitions.push({\n      from,\n      to,\n      symbol\n    });\n  }\n  setStartState(state) {\n    this.startState = state;\n  }\n  setEndState(state) {\n    this.endStates.add(state); // Ajouter à l'ensemble des états finaux\n  }\n  getAutomate() {\n    return {\n      states: this.states,\n      transitions: this.transitions,\n      startState: this.startState,\n      endStates: this.endStates // Retourner les états finaux sous forme d'ensemble\n    };\n  }\n}\n\n// Fonction pour créer un automate pour un symbole\nconst createBaseAutomate = symbol => {\n  const automate = new Automate();\n  const start = automate.addState();\n  const end = automate.addState();\n  automate.addTransition(start, end, symbol);\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour concaténer deux automates\nconst concatenateAutomates = (automate1, automate2) => {\n  const automate = new Automate();\n\n  // Copier les états et transitions des deux automates\n  automate.states = [...automate1.states, ...automate2.states];\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\n\n  // Ajouter une transition epsilon entre la fin du premier automate et le début du second\n  automate.addTransition(automate1.endStates.values().next().value, automate2.startState, \"ε\");\n\n  // Définir les nouveaux états de départ et de fin\n  automate.setStartState(automate1.startState);\n  automate.setEndState(automate2.endStates.values().next().value);\n  return automate;\n};\n\n// Fonction pour gérer l'union de deux automates (opérateur |)\nconst unionAutomates = (automate1, automate2) => {\n  const automate = new Automate();\n  const start = automate.addState(); // Nouvel état de départ\n  const end = automate.addState(); // Nouvel état de fin\n\n  // Copier les états et transitions des deux automates\n  automate.states = [...automate1.states, ...automate2.states, start, end];\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\n\n  // Ajouter des transitions epsilon du nouvel état initial vers les deux sous-automates\n  automate.addTransition(start, automate1.startState, \"ε\");\n  automate.addTransition(start, automate2.startState, \"ε\");\n\n  // Ajouter des transitions epsilon des états finaux des sous-automates vers le nouvel état final\n  automate1.endStates.forEach(state => {\n    automate.addTransition(state, end, \"ε\");\n  });\n  automate2.endStates.forEach(state => {\n    automate.addTransition(state, end, \"ε\");\n  });\n\n  // Définir les nouveaux états de départ et de fin\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour gérer la fermeture de Kleene (opérateur *)\nconst kleeneAutomate = automate1 => {\n  const automate = new Automate();\n  const start = automate.addState(); // Nouvel état de départ\n  const end = automate.addState(); // Nouvel état de fin\n\n  // Copier les états et transitions du premier automate\n  automate.states = [...automate1.states, start, end];\n  automate.transitions = [...automate1.transitions];\n\n  // Ajouter des transitions epsilon pour la fermeture de Kleene\n  automate.addTransition(start, automate1.startState, \"ε\");\n  automate.addTransition(automate1.endStates.values().next().value, end, \"ε\");\n  automate.addTransition(automate1.endStates.values().next().value, automate1.startState, \"ε\"); // Boucle\n  automate.addTransition(start, end, \"ε\"); // Transition directe\n\n  // Définir les nouveaux états de départ et de fin\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour gérer l'opérateur +\nconst plusAutomate = automate1 => {\n  const automate = new Automate();\n  const start = automate.addState(); // Nouvel état de départ\n  const end = automate.addState(); // Nouvel état de fin\n\n  // Copier les états et transitions du premier automate\n  automate.states = [...automate1.states, start, end];\n  automate.transitions = [...automate1.transitions];\n\n  // Ajouter des transitions epsilon pour l'opérateur +\n  automate.addTransition(start, automate1.startState, \"ε\");\n  automate.addTransition(automate1.endStates.values().next().value, end, \"ε\");\n  automate.addTransition(automate1.endStates.values().next().value, automate1.startState, \"ε\"); // Boucle\n\n  // Définir les nouveaux états de départ et de fin\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour insérer les concaténations implicites dans une regex\nconst ajouterConcatImpl = regex => {\n  let resultat = \"\";\n  for (let i = 0; i < regex.length; i++) {\n    const char = regex[i];\n    resultat += char;\n\n    // Ajouter une concaténation implicite si nécessaire\n    if (i + 1 < regex.length) {\n      const nextChar = regex[i + 1];\n\n      // Condition pour ajouter une concaténation implicite\n      if (char !== \"(\" && char !== \"|\" && char !== \".\" &&\n      // Si le caractère actuel n'est pas un opérateur\n      nextChar !== \")\" && nextChar !== \"|\" && nextChar !== \"*\" && nextChar !== \"+\" && nextChar !== \".\" // Si le prochain caractère n'est pas un opérateur\n      ) {\n        resultat += \".\"; // Ajouter une concaténation explicite\n      }\n    }\n  }\n  return resultat;\n};\n\n// Fonction pour parser une expression régulière en respectant les priorités et les parenthèses\nconst parseRegex = regex => {\n  // Ajouter les concaténations implicites avant de parser\n  regex = ajouterConcatImpl(regex);\n  const precedence = {\n    \"|\": 1,\n    \".\": 2,\n    \"*\": 3,\n    \"+\": 3\n  };\n  const operators = [];\n  const output = [];\n  const isOperator = char => [\"|\", \".\", \"*\", \"+\"].includes(char);\n  const applyOperator = () => {\n    const operator = operators.pop();\n    if (operator === \".\") {\n      const b = output.pop();\n      const a = output.pop();\n      output.push([\".\", a, b]);\n    } else if (operator === \"|\") {\n      const b = output.pop();\n      const a = output.pop();\n      output.push([\"|\", a, b]);\n    } else if (operator === \"*\") {\n      const a = output.pop();\n      output.push([\"*\", a]);\n    } else if (operator === \"+\") {\n      const a = output.pop();\n      output.push([\"+\", a]);\n    }\n  };\n  let i = 0;\n  while (i < regex.length) {\n    const char = regex[i];\n    if (char === \"(\") {\n      // Trouver la sous-expression entre parenthèses\n      let j = i;\n      let openParentheses = 1;\n      while (openParentheses > 0 && ++j < regex.length) {\n        if (regex[j] === \"(\") openParentheses++;\n        if (regex[j] === \")\") openParentheses--;\n      }\n\n      // Appeler récursivement `parseRegex` sur la sous-expression\n      const subexpression = regex.slice(i + 1, j);\n      output.push(parseRegex(subexpression));\n      i = j; // Avancer jusqu'à la parenthèse fermante\n    } else if (!isOperator(char)) {\n      output.push(char); // Ajouter les symboles au output\n    } else {\n      while (operators.length > 0 && operators[operators.length - 1] !== \"(\" && precedence[operators[operators.length - 1]] >= precedence[char]) {\n        applyOperator();\n      }\n      operators.push(char);\n    }\n    i++;\n  }\n\n  // Appliquer les opérateurs restants\n  while (operators.length > 0) {\n    applyOperator();\n  }\n  return output[0];\n};\n\n// Fonction pour parcourir l'arbre syntaxique et créer l'automate\nconst parseArbre = arbre => {\n  if (typeof arbre === \"string\") {\n    return createBaseAutomate(arbre); // Si c'est un symbole\n  }\n  const [op, ...args] = arbre;\n  switch (op) {\n    case \".\":\n      {\n        // Concaténation\n        let result = parseArbre(args[0]);\n        for (let i = 1; i < args.length; i++) {\n          result = concatenateAutomates(result, parseArbre(args[i]));\n        }\n        return result;\n      }\n    case \"|\":\n      {\n        // Union\n        let result = parseArbre(args[0]);\n        for (let i = 1; i < args.length; i++) {\n          result = unionAutomates(result, parseArbre(args[i]));\n        }\n        return result;\n      }\n    case \"*\":\n      {\n        // Fermeture de Kleene\n        return kleeneAutomate(parseArbre(args[0]));\n      }\n    case \"+\":\n      {\n        // L'opérateur +\n        return plusAutomate(parseArbre(args[0]));\n      }\n    default:\n      throw new Error(`Opérateur non supporté: ${op}`);\n  }\n};\n\n// Fonction pour générer l'automate à partir d'une expression régulière\nconst construireAutomate = regex => {\n  const arbre = parseRegex(regex); // Construire l'arbre syntaxique à partir du regex\n  console.log(\"Arbre syntaxique:\", arbre);\n  return parseArbre(arbre); // Construire l'automate à partir de l'arbre syntaxique\n};\n\n// Fonction pour tester si une sous-chaîne est acceptée par l'automate\nconst estAccepte = (automate, chaine, index = 0, etatCourant = automate.startState) => {\n  if (index === chaine.length) {\n    return automate.endStates.has(etatCourant); // Vérifier si l'état courant est un état final\n  }\n  const symbol = chaine[index];\n  let transitions = automate.transitions.filter(t => t.from === etatCourant);\n\n  // Parcourir les transitions epsilon\n  for (let trans of transitions) {\n    if (trans.symbol === \"ε\") {\n      if (estAccepte(automate, chaine, index, trans.to)) {\n        return true;\n      }\n    }\n  }\n\n  // Parcourir les transitions pour le symbole courant\n  for (let trans of transitions) {\n    if (trans.symbol === symbol) {\n      if (estAccepte(automate, chaine, index + 1, trans.to)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// Fonction pour tester si une sous-chaîne (motif) est présente dans un mot\nconst testMotifDansMot = (automate, mot) => {\n  // Essayer toutes les sous-chaînes du mot pour trouver le motif\n  for (let i = 0; i < mot.length; i++) {\n    for (let j = i; j <= mot.length; j++) {\n      const sousChaine = mot.slice(i, j);\n      if (estAccepte(automate, sousChaine)) {\n        return true; // Si une sous-chaîne correspond au motif, retourner vrai\n      }\n    }\n  }\n  return false;\n};\n\n// Fonction pour tester toutes les sous-chaînes acceptées dans une ligne de texte\nconst TestTxt = (automate, line) => {\n  const mots = line.split(\" \"); // Diviser la ligne en mots\n  for (let mot of mots) {\n    if (testMotifDansMot(automate, mot)) {\n      return true; // Si un mot contient le motif, retourner vrai\n    }\n  }\n  return false; // Si aucun mot ne contient le motif, retourner faux\n};\n\n// Fonction pour calculer la fermeture epsilon d'un état donné\n_c = TestTxt;\nconst epsilonClosure = (automate, state) => {\n  const closure = new Set([state]);\n  const stack = [state];\n  while (stack.length > 0) {\n    const currentState = stack.pop();\n    const epsilonTransitions = automate.transitions.filter(t => t.from === currentState && t.symbol === \"ε\");\n    for (const transition of epsilonTransitions) {\n      if (!closure.has(transition.to)) {\n        closure.add(transition.to);\n        stack.push(transition.to);\n      }\n    }\n  }\n  return closure;\n};\n\n// Fonction pour calculer la fermeture epsilon d'un ensemble d'états\nconst epsilonClosureSet = (automate, states) => {\n  let closure = new Set();\n  for (const state of states) {\n    closure = new Set([...closure, ...epsilonClosure(automate, state)]);\n  }\n  return closure;\n};\n\n// Fonction pour calculer la transition d'un ensemble d'états sur un symbole donné\nconst move = (automate, states, symbol) => {\n  const nextStates = new Set();\n  for (const state of states) {\n    const transitions = automate.transitions.filter(t => t.from === state && t.symbol === symbol);\n    for (const transition of transitions) {\n      nextStates.add(transition.to);\n    }\n  }\n  return nextStates;\n};\n\n// Fonction pour déterminiser un automate non déterministe avec epsilon transitions\nconst determinizeAutomate = nfa => {\n  const dfa = new Automate();\n  const alphabet = Array.from(new Set(nfa.transitions.map(t => t.symbol).filter(s => s !== \"ε\")));\n  const initialClosure = epsilonClosure(nfa, nfa.startState);\n  const dfaStatesMap = new Map();\n  dfaStatesMap.set(JSON.stringify([...initialClosure]), dfa.addState());\n  dfa.setStartState(dfaStatesMap.get(JSON.stringify([...initialClosure])));\n  const unprocessedStates = [initialClosure];\n  while (unprocessedStates.length > 0) {\n    const currentSet = unprocessedStates.pop();\n    const currentStateId = dfaStatesMap.get(JSON.stringify([...currentSet]));\n\n    // Vérifier si l'un des états de l'ensemble est un état final du NFA\n    if ([...currentSet].some(state => nfa.endStates.has(state))) {\n      dfa.setEndState(currentStateId); // Marquer cet état comme final dans le DFA\n    }\n    for (const symbol of alphabet) {\n      const nextSet = epsilonClosureSet(nfa, move(nfa, currentSet, symbol));\n      if (nextSet.size === 0) continue; // Ignorer les ensembles vides\n\n      const nextSetKey = JSON.stringify([...nextSet]);\n      if (!dfaStatesMap.has(nextSetKey)) {\n        const newState = dfa.addState();\n        dfaStatesMap.set(nextSetKey, newState);\n        unprocessedStates.push(nextSet);\n      }\n      dfa.addTransition(currentStateId, dfaStatesMap.get(nextSetKey), symbol);\n    }\n  }\n  return dfa;\n};\nconst removeInaccessibleStates = automate => {\n  const reachableStates = new Set([automate.startState]);\n  const stack = [automate.startState];\n  while (stack.length > 0) {\n    const currentState = stack.pop();\n    const transitions = automate.transitions.filter(t => t.from === currentState);\n    for (const transition of transitions) {\n      if (!reachableStates.has(transition.to)) {\n        reachableStates.add(transition.to);\n        stack.push(transition.to);\n      }\n    }\n  }\n\n  // Filtrer les états et les transitions pour ne conserver que les états accessibles\n  automate.states = automate.states.filter(state => reachableStates.has(state));\n  automate.transitions = automate.transitions.filter(t => reachableStates.has(t.from) && reachableStates.has(t.to));\n  return automate;\n};\n\n// Fonction pour effectuer la minimisation avec l'algorithme de Moore\nconst minimizeAutomate = dfa => {\n  // Étape 1: Supprimer les états inaccessibles\n  removeInaccessibleStates(dfa);\n\n  // Étape 2: Partitionner les états en deux ensembles: états finaux et non finaux\n  let partitions = [new Set(), new Set()];\n  dfa.states.forEach(state => {\n    if (dfa.endStates.has(state)) {\n      partitions[0].add(state); // États finaux\n    } else {\n      partitions[1].add(state); // États non finaux\n    }\n  });\n  let stable = false;\n  const alphabet = Array.from(new Set(dfa.transitions.map(t => t.symbol)));\n\n  // Étape 3: Raffiner les partitions\n  while (!stable) {\n    stable = true;\n    const newPartitions = [];\n    const partitionsCopy = partitions.slice(); // Create a copy of partitions\n\n    for (const partition of partitionsCopy) {\n      const partitionMap = new Map();\n      for (const state of partition) {\n        const signature = alphabet.map(symbol => {\n          const transition = dfa.transitions.find(t => t.from === state && t.symbol === symbol);\n          const targetState = transition ? transition.to : null;\n\n          // Trouver la partition contenant l'état cible\n          const partitionIndex = partitionsCopy.findIndex(p => p.has(targetState));\n          return partitionIndex;\n        }).join(\"-\");\n        if (!partitionMap.has(signature)) {\n          partitionMap.set(signature, new Set());\n        }\n        partitionMap.get(signature).add(state);\n      }\n\n      // Ajouter les nouvelles partitions\n      newPartitions.push(...partitionMap.values());\n    }\n\n    // Si les partitions ont changé, on continue la boucle\n    if (newPartitions.length !== partitions.length) {\n      stable = false;\n    }\n    partitions = newPartitions;\n  }\n\n  // Étape 4: Construire le nouvel automate minimisé\n  const minimizedAutomate = new Automate();\n  const stateMap = new Map(); // Map pour relier les anciens états aux nouveaux états\n\n  partitions.forEach((partition, index) => {\n    const newState = minimizedAutomate.addState();\n    partition.forEach(state => stateMap.set(state, newState));\n\n    // Marquer l'état comme final s'il contient un ancien état final\n    if ([...partition].some(state => dfa.endStates.has(state))) {\n      minimizedAutomate.setEndState(newState);\n    }\n  });\n\n  // Recréer les transitions dans l'automate minimisé sans duplicata\n  dfa.transitions.forEach(t => {\n    const fromState = stateMap.get(t.from);\n    const toState = stateMap.get(t.to);\n\n    // Vérifier si la transition existe déjà\n    if (!minimizedAutomate.transitions.some(trans => trans.from === fromState && trans.to === toState && trans.symbol === t.symbol)) {\n      minimizedAutomate.addTransition(fromState, toState, t.symbol);\n    }\n  });\n\n  // Définir l'état initial\n  minimizedAutomate.setStartState(stateMap.get(dfa.startState));\n  return minimizedAutomate;\n};\n\n// Composant React pour afficher l'automate avec les états initiaux et finaux\nconst AutomateVisualizer = ({\n  automate\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\xC9tats\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: automate.states.map(state => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [state, automate.endStates.has(state) && \" (Final)\", \" \", state === automate.startState && \" (Initial)\"]\n      }, state, true, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Transitions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 603,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: automate.transitions.map((trans, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [trans.from, \" --(\", trans.symbol, \")--> \", trans.to]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 604,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 591,\n    columnNumber: 5\n  }, this);\n};\n_c2 = AutomateVisualizer;\nconst SyntaxTree = ({\n  node\n}) => {\n  // Si le node est une feuille (une string ou un élément simple), on l'affiche directement\n  if (typeof node === \"string\") {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: node\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 618,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Si le node est une liste, on affiche l'élément 0 (parent), et les enfants 1 et 2 (fils gauche et droit)\n  const [parent, leftChild, rightChild] = node;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      borderLeft: \"1px solid black\",\n      paddingLeft: \"10px\",\n      marginLeft: \"10px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: parent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      children: [leftChild && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginRight: \"20px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(SyntaxTree, {\n          node: leftChild\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 11\n      }, this), rightChild && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(SyntaxTree, {\n          node: rightChild\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 641,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 625,\n    columnNumber: 5\n  }, this);\n};\n\n// Composant principal de l'application\n_c3 = SyntaxTree;\nconst Automaton = () => {\n  _s();\n  const [arbre, setArbre] = useState(null); // Arbre syntaxique\n  const [automate, setAutomate] = useState(null); // Automate (NFA ou DFA)\n  const [detAutomate, setDetAutomate] = useState(null); // Automate déterminisé (DFA)\n  const [MinAutomate, setMinAutomate] = useState(null); // Automate Min (Min)\n  const [regex, setRegex] = useState(\"\");\n  const [fileContent, setFileContent] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [show, setshow] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n\n  // Fonction pour générer l'arbre syntaxique à partir de l'expression régulière\n  const handleGenerateArbre = async () => {\n    return new Promise(resolve => {\n      stateCounter = 0; // Réinitialiser le compteur d'état pour chaque nouveau calcul\n      const arbre = parseRegex(regex); // Générer l'automate à partir de l'expression régulière\n      setArbre(arbre); // Stocker l'arbre syntaxique\n      setAutomate(null); // Réinitialiser l'automate NFA\n      setDetAutomate(null); // Réinitialiser l'automate déterminisé (DFA)\n      setMinAutomate(null); // Réinitialiser l'automate minimisé\n      resolve(); // Marquer la fonction comme terminée\n    });\n  };\n  // Fonction pour générer l'automate (NFA)\n  const handleGenerateAutomate = async () => {\n    return new Promise(resolve => {\n      stateCounter = 0; // Réinitialiser le compteur d'état pour chaque nouveau calcul\n      const automate = construireAutomate(regex); // Générer l'automate à partir de l'expression régulière\n      setAutomate(automate); // Stocker l'automate NFA\n      setDetAutomate(null); // Réinitialiser l'automate déterminisé (DFA)\n      setMinAutomate(null); // Réinitialiser l'automate minimisé\n      resolve(); // Marquer la fonction comme terminée\n    });\n  };\n\n  // Fonction pour déterminiser l'automate (NFA -> DFA)\n  const handleDeterminizeAutomate = async () => {\n    return new Promise(resolve => {\n      if (automate) {\n        const dfa = determinizeAutomate(automate); // Déterminiser l'automate NFA\n        setDetAutomate(dfa); // Stocker l'automate déterminisé (DFA)\n        setMinAutomate(null); // Réinitialiser l'automate minimisé\n      }\n      resolve(); // Marquer la fonction comme terminée\n    });\n  };\n\n  // Fonction pour minimiser l'automate déterminisé (DFA)\n  const handleMinimizeAutomate = async () => {\n    return new Promise(resolve => {\n      if (detAutomate) {\n        const minDfa = minimizeAutomate(detAutomate); // Minimiser l'automate DFA\n        setMinAutomate(minDfa); // Stocker l'automate minimisé\n      }\n      resolve(); // Marquer la fonction comme terminée\n    });\n  };\n\n  // Lecture du fichier et stockage du contenu dans le state\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.onload = () => {\n      setFileContent(reader.result);\n    };\n    reader.readAsText(file);\n  };\n\n  // Fonction de recherche utilisant l'automate\n  const handleSearch = () => {\n    if (!MinAutomate) return;\n    const lines = fileContent.split(\"\\n\"); // Diviser le contenu du fichier par ligne\n    const results = lines.filter(line => TestTxt(MinAutomate, line)); // Rechercher les lignes qui correspondent\n    setSearchResults(results);\n  };\n  const handleAll = async () => {\n    await handleGenerateArbre(); // Attendre que l'arbre soit généré\n    await handleGenerateAutomate(); // Attendre que l'automate soit généré\n    await handleDeterminizeAutomate(); // Attendre que l'automate soit déterminisé\n    await handleMinimizeAutomate(); // Attendre que l'automate soit minimisé\n    handleSearch(); // Ensuite, rechercher dans le fichier\n  };\n\n  // Utiliser useEffect pour déclencher les étapes successives\n  useEffect(() => {\n    if (automate) {\n      handleDeterminizeAutomate(); // Déclencher la déterminisation après la génération de l'automate\n    }\n  }, [automate]);\n  useEffect(() => {\n    if (detAutomate) {\n      handleMinimizeAutomate(); // Déclencher la minimisation après la déterminisation de l'automate\n    }\n  }, [detAutomate]);\n  useEffect(() => {\n    if (MinAutomate) {\n      handleSearch(); // Déclencher la recherche après la minimisation de l'automate\n    }\n  }, [MinAutomate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container py-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        className: \"text-decoration-none text-primary\",\n        children: \"HomePage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 758,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 757,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"mb-4\",\n      children: \"Automate avec transitions epsilon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 763,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-4\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-label\",\n          children: [\"Regex:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            value: regex,\n            onChange: e => setRegex(e.target.value),\n            className: \"form-control\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 770,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 768,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 767,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-4\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: handleFileUpload,\n          accept: \".txt\",\n          className: \"form-control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 777,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-4 d-grid\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAll,\n          className: \"btn btn-primary\",\n          children: \"Rechercher\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 786,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 785,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 766,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"mb-3\",\n      children: \"R\\xE9sultats de la recherche :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 793,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group mb-4\",\n      children: searchResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item\",\n        children: result\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 796,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 794,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-secondary mb-4\",\n      onClick: () => setShowModal(true) // Open modal\n      ,\n      children: \"Show Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 803,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showModal,\n      onHide: () => setShowModal(false),\n      size: \"lg\",\n      centered: true,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: [/*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 818,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn-close\",\n          onClick: () => setShowModal(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 820,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 817,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: [arbre && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Arbre syntaxique\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 829,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(SyntaxTree, {\n            node: JSON.stringify(arbre, null, 2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 830,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: JSON.stringify(arbre, null, 2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 831,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 828,\n          columnNumber: 13\n        }, this), automate && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Automate (NFA)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 836,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(AutomateVisualizer, {\n            automate: automate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 837,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 835,\n          columnNumber: 13\n        }, this), detAutomate && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Automate D\\xE9terminis\\xE9 (DFA)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 842,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(AutomateVisualizer, {\n            automate: detAutomate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 843,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 841,\n          columnNumber: 13\n        }, this), MinAutomate && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Automate Minimis\\xE9 (Min)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 848,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(AutomateVisualizer, {\n            automate: MinAutomate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 849,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 847,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 826,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 811,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 755,\n    columnNumber: 5\n  }, this);\n};\n_s(Automaton, \"Ve4I0bsbINeGYVOATQqhPQJnJ7c=\");\n_c4 = Automaton;\nexport default Automaton;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"TestTxt\");\n$RefreshReg$(_c2, \"AutomateVisualizer\");\n$RefreshReg$(_c3, \"SyntaxTree\");\n$RefreshReg$(_c4, \"Automaton\");","map":{"version":3,"names":["React","useState","useEffect","Link","Modal","jsxDEV","_jsxDEV","stateCounter","Automate","constructor","states","transitions","startState","endStates","Set","addState","newState","push","addTransition","from","to","symbol","setStartState","state","setEndState","add","getAutomate","createBaseAutomate","automate","start","end","concatenateAutomates","automate1","automate2","values","next","value","unionAutomates","forEach","kleeneAutomate","plusAutomate","ajouterConcatImpl","regex","resultat","i","length","char","nextChar","parseRegex","precedence","operators","output","isOperator","includes","applyOperator","operator","pop","b","a","j","openParentheses","subexpression","slice","parseArbre","arbre","op","args","result","Error","construireAutomate","console","log","estAccepte","chaine","index","etatCourant","has","filter","t","trans","testMotifDansMot","mot","sousChaine","TestTxt","line","mots","split","_c","epsilonClosure","closure","stack","currentState","epsilonTransitions","transition","epsilonClosureSet","move","nextStates","determinizeAutomate","nfa","dfa","alphabet","Array","map","s","initialClosure","dfaStatesMap","Map","set","JSON","stringify","get","unprocessedStates","currentSet","currentStateId","some","nextSet","size","nextSetKey","removeInaccessibleStates","reachableStates","minimizeAutomate","partitions","stable","newPartitions","partitionsCopy","partition","partitionMap","signature","find","targetState","partitionIndex","findIndex","p","join","minimizedAutomate","stateMap","fromState","toState","AutomateVisualizer","children","fileName","_jsxFileName","lineNumber","columnNumber","idx","_c2","SyntaxTree","node","parent","leftChild","rightChild","style","borderLeft","paddingLeft","marginLeft","display","marginRight","_c3","Automaton","_s","setArbre","setAutomate","detAutomate","setDetAutomate","MinAutomate","setMinAutomate","setRegex","fileContent","setFileContent","searchResults","setSearchResults","show","setshow","showModal","setShowModal","handleGenerateArbre","Promise","resolve","handleGenerateAutomate","handleDeterminizeAutomate","handleMinimizeAutomate","minDfa","handleFileUpload","event","file","target","files","reader","FileReader","onload","readAsText","handleSearch","lines","results","handleAll","className","onChange","e","type","accept","onClick","onHide","centered","Header","Title","Body","_c4","$RefreshReg$"],"sources":["C:/Users/Musha/Desktop/DAAR/projet/Projet 1/Automaton-/Client/src/app/automate.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Modal } from \"react-bootstrap\";\r\n\r\n// Compteur d'état global pour assurer des identifiants uniques\r\nlet stateCounter = 0;\r\n\r\n// Classe Automate pour stocker les états et transitions\r\nclass Automate {\r\n  constructor() {\r\n    this.states = [];\r\n    this.transitions = [];\r\n    this.startState = null;\r\n    this.endStates = new Set(); // Utilisation d'un ensemble pour gérer plusieurs états finaux\r\n  }\r\n\r\n  // Fonction pour ajouter un état avec un identifiant unique\r\n  addState() {\r\n    const newState = stateCounter++;\r\n    this.states.push(newState);\r\n    return newState;\r\n  }\r\n\r\n  addTransition(from, to, symbol) {\r\n    this.transitions.push({ from, to, symbol });\r\n  }\r\n\r\n  setStartState(state) {\r\n    this.startState = state;\r\n  }\r\n\r\n  setEndState(state) {\r\n    this.endStates.add(state); // Ajouter à l'ensemble des états finaux\r\n  }\r\n\r\n  getAutomate() {\r\n    return {\r\n      states: this.states,\r\n      transitions: this.transitions,\r\n      startState: this.startState,\r\n      endStates: this.endStates, // Retourner les états finaux sous forme d'ensemble\r\n    };\r\n  }\r\n}\r\n\r\n// Fonction pour créer un automate pour un symbole\r\nconst createBaseAutomate = (symbol) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState();\r\n  const end = automate.addState();\r\n  automate.addTransition(start, end, symbol);\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n  return automate;\r\n};\r\n\r\n// Fonction pour concaténer deux automates\r\nconst concatenateAutomates = (automate1, automate2) => {\r\n  const automate = new Automate();\r\n\r\n  // Copier les états et transitions des deux automates\r\n  automate.states = [...automate1.states, ...automate2.states];\r\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\r\n\r\n  // Ajouter une transition epsilon entre la fin du premier automate et le début du second\r\n  automate.addTransition(\r\n    automate1.endStates.values().next().value,\r\n    automate2.startState,\r\n    \"ε\"\r\n  );\r\n\r\n  // Définir les nouveaux états de départ et de fin\r\n  automate.setStartState(automate1.startState);\r\n  automate.setEndState(automate2.endStates.values().next().value);\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour gérer l'union de deux automates (opérateur |)\r\nconst unionAutomates = (automate1, automate2) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState(); // Nouvel état de départ\r\n  const end = automate.addState(); // Nouvel état de fin\r\n\r\n  // Copier les états et transitions des deux automates\r\n  automate.states = [...automate1.states, ...automate2.states, start, end];\r\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\r\n\r\n  // Ajouter des transitions epsilon du nouvel état initial vers les deux sous-automates\r\n  automate.addTransition(start, automate1.startState, \"ε\");\r\n  automate.addTransition(start, automate2.startState, \"ε\");\r\n\r\n  // Ajouter des transitions epsilon des états finaux des sous-automates vers le nouvel état final\r\n  automate1.endStates.forEach((state) => {\r\n    automate.addTransition(state, end, \"ε\");\r\n  });\r\n  automate2.endStates.forEach((state) => {\r\n    automate.addTransition(state, end, \"ε\");\r\n  });\r\n\r\n  // Définir les nouveaux états de départ et de fin\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour gérer la fermeture de Kleene (opérateur *)\r\nconst kleeneAutomate = (automate1) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState(); // Nouvel état de départ\r\n  const end = automate.addState(); // Nouvel état de fin\r\n\r\n  // Copier les états et transitions du premier automate\r\n  automate.states = [...automate1.states, start, end];\r\n  automate.transitions = [...automate1.transitions];\r\n\r\n  // Ajouter des transitions epsilon pour la fermeture de Kleene\r\n  automate.addTransition(start, automate1.startState, \"ε\");\r\n  automate.addTransition(automate1.endStates.values().next().value, end, \"ε\");\r\n  automate.addTransition(\r\n    automate1.endStates.values().next().value,\r\n    automate1.startState,\r\n    \"ε\"\r\n  ); // Boucle\r\n  automate.addTransition(start, end, \"ε\"); // Transition directe\r\n\r\n  // Définir les nouveaux états de départ et de fin\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour gérer l'opérateur +\r\nconst plusAutomate = (automate1) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState(); // Nouvel état de départ\r\n  const end = automate.addState(); // Nouvel état de fin\r\n\r\n  // Copier les états et transitions du premier automate\r\n  automate.states = [...automate1.states, start, end];\r\n  automate.transitions = [...automate1.transitions];\r\n\r\n  // Ajouter des transitions epsilon pour l'opérateur +\r\n  automate.addTransition(start, automate1.startState, \"ε\");\r\n  automate.addTransition(automate1.endStates.values().next().value, end, \"ε\");\r\n  automate.addTransition(\r\n    automate1.endStates.values().next().value,\r\n    automate1.startState,\r\n    \"ε\"\r\n  ); // Boucle\r\n\r\n  // Définir les nouveaux états de départ et de fin\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour insérer les concaténations implicites dans une regex\r\nconst ajouterConcatImpl = (regex) => {\r\n  let resultat = \"\";\r\n\r\n  for (let i = 0; i < regex.length; i++) {\r\n    const char = regex[i];\r\n    resultat += char;\r\n\r\n    // Ajouter une concaténation implicite si nécessaire\r\n    if (i + 1 < regex.length) {\r\n      const nextChar = regex[i + 1];\r\n\r\n      // Condition pour ajouter une concaténation implicite\r\n      if (\r\n        char !== \"(\" &&\r\n        char !== \"|\" &&\r\n        char !== \".\" && // Si le caractère actuel n'est pas un opérateur\r\n        nextChar !== \")\" &&\r\n        nextChar !== \"|\" &&\r\n        nextChar !== \"*\" &&\r\n        nextChar !== \"+\" &&\r\n        nextChar !== \".\" // Si le prochain caractère n'est pas un opérateur\r\n      ) {\r\n        resultat += \".\"; // Ajouter une concaténation explicite\r\n      }\r\n    }\r\n  }\r\n\r\n  return resultat;\r\n};\r\n\r\n// Fonction pour parser une expression régulière en respectant les priorités et les parenthèses\r\nconst parseRegex = (regex) => {\r\n  // Ajouter les concaténations implicites avant de parser\r\n  regex = ajouterConcatImpl(regex);\r\n\r\n  const precedence = { \"|\": 1, \".\": 2, \"*\": 3, \"+\": 3 };\r\n  const operators = [];\r\n  const output = [];\r\n\r\n  const isOperator = (char) => [\"|\", \".\", \"*\", \"+\"].includes(char);\r\n\r\n  const applyOperator = () => {\r\n    const operator = operators.pop();\r\n    if (operator === \".\") {\r\n      const b = output.pop();\r\n      const a = output.pop();\r\n      output.push([\".\", a, b]);\r\n    } else if (operator === \"|\") {\r\n      const b = output.pop();\r\n      const a = output.pop();\r\n      output.push([\"|\", a, b]);\r\n    } else if (operator === \"*\") {\r\n      const a = output.pop();\r\n      output.push([\"*\", a]);\r\n    } else if (operator === \"+\") {\r\n      const a = output.pop();\r\n      output.push([\"+\", a]);\r\n    }\r\n  };\r\n\r\n  let i = 0;\r\n  while (i < regex.length) {\r\n    const char = regex[i];\r\n\r\n    if (char === \"(\") {\r\n      // Trouver la sous-expression entre parenthèses\r\n      let j = i;\r\n      let openParentheses = 1;\r\n      while (openParentheses > 0 && ++j < regex.length) {\r\n        if (regex[j] === \"(\") openParentheses++;\r\n        if (regex[j] === \")\") openParentheses--;\r\n      }\r\n\r\n      // Appeler récursivement `parseRegex` sur la sous-expression\r\n      const subexpression = regex.slice(i + 1, j);\r\n      output.push(parseRegex(subexpression));\r\n      i = j; // Avancer jusqu'à la parenthèse fermante\r\n    } else if (!isOperator(char)) {\r\n      output.push(char); // Ajouter les symboles au output\r\n    } else {\r\n      while (\r\n        operators.length > 0 &&\r\n        operators[operators.length - 1] !== \"(\" &&\r\n        precedence[operators[operators.length - 1]] >= precedence[char]\r\n      ) {\r\n        applyOperator();\r\n      }\r\n      operators.push(char);\r\n    }\r\n    i++;\r\n  }\r\n\r\n  // Appliquer les opérateurs restants\r\n  while (operators.length > 0) {\r\n    applyOperator();\r\n  }\r\n\r\n  return output[0];\r\n};\r\n\r\n// Fonction pour parcourir l'arbre syntaxique et créer l'automate\r\nconst parseArbre = (arbre) => {\r\n  if (typeof arbre === \"string\") {\r\n    return createBaseAutomate(arbre); // Si c'est un symbole\r\n  }\r\n\r\n  const [op, ...args] = arbre;\r\n\r\n  switch (op) {\r\n    case \".\": {\r\n      // Concaténation\r\n      let result = parseArbre(args[0]);\r\n      for (let i = 1; i < args.length; i++) {\r\n        result = concatenateAutomates(result, parseArbre(args[i]));\r\n      }\r\n      return result;\r\n    }\r\n\r\n    case \"|\": {\r\n      // Union\r\n      let result = parseArbre(args[0]);\r\n      for (let i = 1; i < args.length; i++) {\r\n        result = unionAutomates(result, parseArbre(args[i]));\r\n      }\r\n      return result;\r\n    }\r\n\r\n    case \"*\": {\r\n      // Fermeture de Kleene\r\n      return kleeneAutomate(parseArbre(args[0]));\r\n    }\r\n\r\n    case \"+\": {\r\n      // L'opérateur +\r\n      return plusAutomate(parseArbre(args[0]));\r\n    }\r\n\r\n    default:\r\n      throw new Error(`Opérateur non supporté: ${op}`);\r\n  }\r\n};\r\n\r\n// Fonction pour générer l'automate à partir d'une expression régulière\r\nconst construireAutomate = (regex) => {\r\n  const arbre = parseRegex(regex); // Construire l'arbre syntaxique à partir du regex\r\n  console.log(\"Arbre syntaxique:\", arbre);\r\n  return parseArbre(arbre); // Construire l'automate à partir de l'arbre syntaxique\r\n};\r\n\r\n// Fonction pour tester si une sous-chaîne est acceptée par l'automate\r\nconst estAccepte = (\r\n  automate,\r\n  chaine,\r\n  index = 0,\r\n  etatCourant = automate.startState\r\n) => {\r\n  if (index === chaine.length) {\r\n    return automate.endStates.has(etatCourant); // Vérifier si l'état courant est un état final\r\n  }\r\n\r\n  const symbol = chaine[index];\r\n  let transitions = automate.transitions.filter((t) => t.from === etatCourant);\r\n\r\n  // Parcourir les transitions epsilon\r\n  for (let trans of transitions) {\r\n    if (trans.symbol === \"ε\") {\r\n      if (estAccepte(automate, chaine, index, trans.to)) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Parcourir les transitions pour le symbole courant\r\n  for (let trans of transitions) {\r\n    if (trans.symbol === symbol) {\r\n      if (estAccepte(automate, chaine, index + 1, trans.to)) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n// Fonction pour tester si une sous-chaîne (motif) est présente dans un mot\r\nconst testMotifDansMot = (automate, mot) => {\r\n  // Essayer toutes les sous-chaînes du mot pour trouver le motif\r\n  for (let i = 0; i < mot.length; i++) {\r\n    for (let j = i; j <= mot.length; j++) {\r\n      const sousChaine = mot.slice(i, j);\r\n      if (estAccepte(automate, sousChaine)) {\r\n        return true; // Si une sous-chaîne correspond au motif, retourner vrai\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n// Fonction pour tester toutes les sous-chaînes acceptées dans une ligne de texte\r\nconst TestTxt = (automate, line) => {\r\n  const mots = line.split(\" \"); // Diviser la ligne en mots\r\n  for (let mot of mots) {\r\n    if (testMotifDansMot(automate, mot)) {\r\n      return true; // Si un mot contient le motif, retourner vrai\r\n    }\r\n  }\r\n  return false; // Si aucun mot ne contient le motif, retourner faux\r\n};\r\n\r\n// Fonction pour calculer la fermeture epsilon d'un état donné\r\nconst epsilonClosure = (automate, state) => {\r\n  const closure = new Set([state]);\r\n  const stack = [state];\r\n\r\n  while (stack.length > 0) {\r\n    const currentState = stack.pop();\r\n    const epsilonTransitions = automate.transitions.filter(\r\n      (t) => t.from === currentState && t.symbol === \"ε\"\r\n    );\r\n\r\n    for (const transition of epsilonTransitions) {\r\n      if (!closure.has(transition.to)) {\r\n        closure.add(transition.to);\r\n        stack.push(transition.to);\r\n      }\r\n    }\r\n  }\r\n\r\n  return closure;\r\n};\r\n\r\n// Fonction pour calculer la fermeture epsilon d'un ensemble d'états\r\nconst epsilonClosureSet = (automate, states) => {\r\n  let closure = new Set();\r\n  for (const state of states) {\r\n    closure = new Set([...closure, ...epsilonClosure(automate, state)]);\r\n  }\r\n  return closure;\r\n};\r\n\r\n// Fonction pour calculer la transition d'un ensemble d'états sur un symbole donné\r\nconst move = (automate, states, symbol) => {\r\n  const nextStates = new Set();\r\n  for (const state of states) {\r\n    const transitions = automate.transitions.filter(\r\n      (t) => t.from === state && t.symbol === symbol\r\n    );\r\n    for (const transition of transitions) {\r\n      nextStates.add(transition.to);\r\n    }\r\n  }\r\n  return nextStates;\r\n};\r\n\r\n// Fonction pour déterminiser un automate non déterministe avec epsilon transitions\r\nconst determinizeAutomate = (nfa) => {\r\n  const dfa = new Automate();\r\n  const alphabet = Array.from(\r\n    new Set(nfa.transitions.map((t) => t.symbol).filter((s) => s !== \"ε\"))\r\n  );\r\n\r\n  const initialClosure = epsilonClosure(nfa, nfa.startState);\r\n  const dfaStatesMap = new Map();\r\n  dfaStatesMap.set(JSON.stringify([...initialClosure]), dfa.addState());\r\n  dfa.setStartState(dfaStatesMap.get(JSON.stringify([...initialClosure])));\r\n\r\n  const unprocessedStates = [initialClosure];\r\n\r\n  while (unprocessedStates.length > 0) {\r\n    const currentSet = unprocessedStates.pop();\r\n    const currentStateId = dfaStatesMap.get(JSON.stringify([...currentSet]));\r\n\r\n    // Vérifier si l'un des états de l'ensemble est un état final du NFA\r\n    if ([...currentSet].some((state) => nfa.endStates.has(state))) {\r\n      dfa.setEndState(currentStateId); // Marquer cet état comme final dans le DFA\r\n    }\r\n\r\n    for (const symbol of alphabet) {\r\n      const nextSet = epsilonClosureSet(nfa, move(nfa, currentSet, symbol));\r\n\r\n      if (nextSet.size === 0) continue; // Ignorer les ensembles vides\r\n\r\n      const nextSetKey = JSON.stringify([...nextSet]);\r\n\r\n      if (!dfaStatesMap.has(nextSetKey)) {\r\n        const newState = dfa.addState();\r\n        dfaStatesMap.set(nextSetKey, newState);\r\n        unprocessedStates.push(nextSet);\r\n      }\r\n\r\n      dfa.addTransition(currentStateId, dfaStatesMap.get(nextSetKey), symbol);\r\n    }\r\n  }\r\n\r\n  return dfa;\r\n};\r\n\r\nconst removeInaccessibleStates = (automate) => {\r\n  const reachableStates = new Set([automate.startState]);\r\n  const stack = [automate.startState];\r\n\r\n  while (stack.length > 0) {\r\n    const currentState = stack.pop();\r\n    const transitions = automate.transitions.filter(\r\n      (t) => t.from === currentState\r\n    );\r\n\r\n    for (const transition of transitions) {\r\n      if (!reachableStates.has(transition.to)) {\r\n        reachableStates.add(transition.to);\r\n        stack.push(transition.to);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Filtrer les états et les transitions pour ne conserver que les états accessibles\r\n  automate.states = automate.states.filter((state) =>\r\n    reachableStates.has(state)\r\n  );\r\n  automate.transitions = automate.transitions.filter(\r\n    (t) => reachableStates.has(t.from) && reachableStates.has(t.to)\r\n  );\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour effectuer la minimisation avec l'algorithme de Moore\r\nconst minimizeAutomate = (dfa) => {\r\n  // Étape 1: Supprimer les états inaccessibles\r\n  removeInaccessibleStates(dfa);\r\n\r\n  // Étape 2: Partitionner les états en deux ensembles: états finaux et non finaux\r\n  let partitions = [new Set(), new Set()];\r\n  dfa.states.forEach((state) => {\r\n    if (dfa.endStates.has(state)) {\r\n      partitions[0].add(state); // États finaux\r\n    } else {\r\n      partitions[1].add(state); // États non finaux\r\n    }\r\n  });\r\n\r\n  let stable = false;\r\n  const alphabet = Array.from(new Set(dfa.transitions.map((t) => t.symbol)));\r\n\r\n  // Étape 3: Raffiner les partitions\r\n  while (!stable) {\r\n    stable = true;\r\n    const newPartitions = [];\r\n\r\n    const partitionsCopy = partitions.slice(); // Create a copy of partitions\r\n\r\n    for (const partition of partitionsCopy) {\r\n      const partitionMap = new Map();\r\n\r\n      for (const state of partition) {\r\n        const signature = alphabet\r\n          .map((symbol) => {\r\n            const transition = dfa.transitions.find(\r\n              (t) => t.from === state && t.symbol === symbol\r\n            );\r\n            const targetState = transition ? transition.to : null;\r\n\r\n            // Trouver la partition contenant l'état cible\r\n            const partitionIndex = partitionsCopy.findIndex((p) =>\r\n              p.has(targetState)\r\n            );\r\n            return partitionIndex;\r\n          })\r\n          .join(\"-\");\r\n\r\n        if (!partitionMap.has(signature)) {\r\n          partitionMap.set(signature, new Set());\r\n        }\r\n        partitionMap.get(signature).add(state);\r\n      }\r\n\r\n      // Ajouter les nouvelles partitions\r\n      newPartitions.push(...partitionMap.values());\r\n    }\r\n\r\n    // Si les partitions ont changé, on continue la boucle\r\n    if (newPartitions.length !== partitions.length) {\r\n      stable = false;\r\n    }\r\n\r\n    partitions = newPartitions;\r\n  }\r\n\r\n  // Étape 4: Construire le nouvel automate minimisé\r\n  const minimizedAutomate = new Automate();\r\n  const stateMap = new Map(); // Map pour relier les anciens états aux nouveaux états\r\n\r\n  partitions.forEach((partition, index) => {\r\n    const newState = minimizedAutomate.addState();\r\n    partition.forEach((state) => stateMap.set(state, newState));\r\n\r\n    // Marquer l'état comme final s'il contient un ancien état final\r\n    if ([...partition].some((state) => dfa.endStates.has(state))) {\r\n      minimizedAutomate.setEndState(newState);\r\n    }\r\n  });\r\n\r\n  // Recréer les transitions dans l'automate minimisé sans duplicata\r\n  dfa.transitions.forEach((t) => {\r\n    const fromState = stateMap.get(t.from);\r\n    const toState = stateMap.get(t.to);\r\n\r\n    // Vérifier si la transition existe déjà\r\n    if (\r\n      !minimizedAutomate.transitions.some(\r\n        (trans) =>\r\n          trans.from === fromState &&\r\n          trans.to === toState &&\r\n          trans.symbol === t.symbol\r\n      )\r\n    ) {\r\n      minimizedAutomate.addTransition(fromState, toState, t.symbol);\r\n    }\r\n  });\r\n\r\n  // Définir l'état initial\r\n  minimizedAutomate.setStartState(stateMap.get(dfa.startState));\r\n\r\n  return minimizedAutomate;\r\n};\r\n\r\n// Composant React pour afficher l'automate avec les états initiaux et finaux\r\nconst AutomateVisualizer = ({ automate }) => {\r\n  return (\r\n    <div>\r\n      <h3>États</h3>\r\n      <ul>\r\n        {automate.states.map((state) => (\r\n          <li key={state}>\r\n            {state}\r\n            {automate.endStates.has(state) && \" (Final)\"}{\" \"}\r\n            {/* Vérifie si l'état est final */}\r\n            {state === automate.startState && \" (Initial)\"}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <h3>Transitions</h3>\r\n      <ul>\r\n        {automate.transitions.map((trans, idx) => (\r\n          <li key={idx}>\r\n            {trans.from} --({trans.symbol})--&gt; {trans.to}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SyntaxTree = ({ node }) => {\r\n  // Si le node est une feuille (une string ou un élément simple), on l'affiche directement\r\n  if (typeof node === \"string\") {\r\n    return <span>{node}</span>;\r\n  }\r\n\r\n  // Si le node est une liste, on affiche l'élément 0 (parent), et les enfants 1 et 2 (fils gauche et droit)\r\n  const [parent, leftChild, rightChild] = node;\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        borderLeft: \"1px solid black\",\r\n        paddingLeft: \"10px\",\r\n        marginLeft: \"10px\",\r\n      }}\r\n    >\r\n      <div>{parent}</div>\r\n      <div style={{ display: \"flex\" }}>\r\n        {leftChild && (\r\n          <div style={{ marginRight: \"20px\" }}>\r\n            <SyntaxTree node={leftChild} />\r\n          </div>\r\n        )}\r\n        {rightChild && (\r\n          <div>\r\n            <SyntaxTree node={rightChild} />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Composant principal de l'application\r\nconst Automaton = () => {\r\n  const [arbre, setArbre] = useState(null); // Arbre syntaxique\r\n  const [automate, setAutomate] = useState(null); // Automate (NFA ou DFA)\r\n  const [detAutomate, setDetAutomate] = useState(null); // Automate déterminisé (DFA)\r\n  const [MinAutomate, setMinAutomate] = useState(null); // Automate Min (Min)\r\n  const [regex, setRegex] = useState(\"\");\r\n  const [fileContent, setFileContent] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [show, setshow] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  // Fonction pour générer l'arbre syntaxique à partir de l'expression régulière\r\n  const handleGenerateArbre = async () => {\r\n    return new Promise((resolve) => {\r\n      stateCounter = 0; // Réinitialiser le compteur d'état pour chaque nouveau calcul\r\n      const arbre = parseRegex(regex); // Générer l'automate à partir de l'expression régulière\r\n      setArbre(arbre); // Stocker l'arbre syntaxique\r\n      setAutomate(null); // Réinitialiser l'automate NFA\r\n      setDetAutomate(null); // Réinitialiser l'automate déterminisé (DFA)\r\n      setMinAutomate(null); // Réinitialiser l'automate minimisé\r\n      resolve(); // Marquer la fonction comme terminée\r\n    });\r\n  };\r\n  // Fonction pour générer l'automate (NFA)\r\n  const handleGenerateAutomate = async () => {\r\n    return new Promise((resolve) => {\r\n      stateCounter = 0; // Réinitialiser le compteur d'état pour chaque nouveau calcul\r\n      const automate = construireAutomate(regex); // Générer l'automate à partir de l'expression régulière\r\n      setAutomate(automate); // Stocker l'automate NFA\r\n      setDetAutomate(null); // Réinitialiser l'automate déterminisé (DFA)\r\n      setMinAutomate(null); // Réinitialiser l'automate minimisé\r\n      resolve(); // Marquer la fonction comme terminée\r\n    });\r\n  };\r\n\r\n  // Fonction pour déterminiser l'automate (NFA -> DFA)\r\n  const handleDeterminizeAutomate = async () => {\r\n    return new Promise((resolve) => {\r\n      if (automate) {\r\n        const dfa = determinizeAutomate(automate); // Déterminiser l'automate NFA\r\n        setDetAutomate(dfa); // Stocker l'automate déterminisé (DFA)\r\n        setMinAutomate(null); // Réinitialiser l'automate minimisé\r\n      }\r\n      resolve(); // Marquer la fonction comme terminée\r\n    });\r\n  };\r\n\r\n  // Fonction pour minimiser l'automate déterminisé (DFA)\r\n  const handleMinimizeAutomate = async () => {\r\n    return new Promise((resolve) => {\r\n      if (detAutomate) {\r\n        const minDfa = minimizeAutomate(detAutomate); // Minimiser l'automate DFA\r\n        setMinAutomate(minDfa); // Stocker l'automate minimisé\r\n      }\r\n      resolve(); // Marquer la fonction comme terminée\r\n    });\r\n  };\r\n\r\n  // Lecture du fichier et stockage du contenu dans le state\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      setFileContent(reader.result);\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  // Fonction de recherche utilisant l'automate\r\n  const handleSearch = () => {\r\n    if (!MinAutomate) return;\r\n\r\n    const lines = fileContent.split(\"\\n\"); // Diviser le contenu du fichier par ligne\r\n    const results = lines.filter((line) => TestTxt(MinAutomate, line)); // Rechercher les lignes qui correspondent\r\n    setSearchResults(results);\r\n  };\r\n\r\n  const handleAll = async () => {\r\n    await handleGenerateArbre(); // Attendre que l'arbre soit généré\r\n    await handleGenerateAutomate(); // Attendre que l'automate soit généré\r\n    await handleDeterminizeAutomate(); // Attendre que l'automate soit déterminisé\r\n    await handleMinimizeAutomate(); // Attendre que l'automate soit minimisé\r\n    handleSearch(); // Ensuite, rechercher dans le fichier\r\n  };\r\n\r\n  // Utiliser useEffect pour déclencher les étapes successives\r\n  useEffect(() => {\r\n    if (automate) {\r\n      handleDeterminizeAutomate(); // Déclencher la déterminisation après la génération de l'automate\r\n    }\r\n  }, [automate]);\r\n\r\n  useEffect(() => {\r\n    if (detAutomate) {\r\n      handleMinimizeAutomate(); // Déclencher la minimisation après la déterminisation de l'automate\r\n    }\r\n  }, [detAutomate]);\r\n\r\n  useEffect(() => {\r\n    if (MinAutomate) {\r\n      handleSearch(); // Déclencher la recherche après la minimisation de l'automate\r\n    }\r\n  }, [MinAutomate]);\r\n\r\n  return (\r\n    <div className=\"container py-5\">\r\n      {/* Header */}\r\n      <div className=\"mb-4\">\r\n        <Link to=\"/\" className=\"text-decoration-none text-primary\">\r\n          HomePage\r\n        </Link>\r\n      </div>\r\n\r\n      <h1 className=\"mb-4\">Automate avec transitions epsilon</h1>\r\n\r\n      {/* Input section */}\r\n      <div className=\"row mb-4\">\r\n        <div className=\"col-md-4\">\r\n          <label className=\"form-label\">\r\n            Regex:\r\n            <input\r\n              value={regex}\r\n              onChange={(e) => setRegex(e.target.value)}\r\n              className=\"form-control\"\r\n            />\r\n          </label>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <input\r\n            type=\"file\"\r\n            onChange={handleFileUpload}\r\n            accept=\".txt\"\r\n            className=\"form-control\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-4 d-grid\">\r\n          <button onClick={handleAll} className=\"btn btn-primary\">\r\n            Rechercher\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Search results */}\r\n      <h3 className=\"mb-3\">Résultats de la recherche :</h3>\r\n      <ul className=\"list-group mb-4\">\r\n        {searchResults.map((result, index) => (\r\n          <li key={index} className=\"list-group-item\">\r\n            {result}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      {/* Button to trigger modal */}\r\n      <button\r\n        className=\"btn btn-secondary mb-4\"\r\n        onClick={() => setShowModal(true)} // Open modal\r\n      >\r\n        Show Details\r\n      </button>\r\n\r\n      {/* Modal for showing details */}\r\n      <Modal\r\n        show={showModal}\r\n        onHide={() => setShowModal(false)}\r\n        size=\"lg\"\r\n        centered\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title>Details</Modal.Title>\r\n          {/* Close button in the top right */}\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn-close\"\r\n            onClick={() => setShowModal(false)}\r\n          ></button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {arbre && (\r\n            <div className=\"mb-4\">\r\n              <h2>Arbre syntaxique</h2>\r\n              <SyntaxTree node={JSON.stringify(arbre, null, 2)} />\r\n              <pre>{JSON.stringify(arbre, null, 2)}</pre>\r\n            </div>\r\n          )}\r\n          {automate && (\r\n            <div className=\"mb-4\">\r\n              <h2>Automate (NFA)</h2>\r\n              <AutomateVisualizer automate={automate} />\r\n            </div>\r\n          )}\r\n          {detAutomate && (\r\n            <div className=\"mb-4\">\r\n              <h2>Automate Déterminisé (DFA)</h2>\r\n              <AutomateVisualizer automate={detAutomate} />\r\n            </div>\r\n          )}\r\n          {MinAutomate && (\r\n            <div className=\"mb-4\">\r\n              <h2>Automate Minimisé (Min)</h2>\r\n              <AutomateVisualizer automate={MinAutomate} />\r\n            </div>\r\n          )}\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Automaton;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}