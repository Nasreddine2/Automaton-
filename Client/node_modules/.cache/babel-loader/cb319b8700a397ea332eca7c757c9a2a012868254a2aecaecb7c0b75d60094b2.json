{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Musha\\\\Desktop\\\\DAAR\\\\projet\\\\projet1\\\\src\\\\app\\\\automate.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n\n// Compteur d'état global pour assurer des identifiants uniques\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet stateCounter = 0;\n\n// Classe Automate pour stocker les états et transitions\nclass Automate {\n  constructor() {\n    this.states = [];\n    this.transitions = [];\n    this.startState = null;\n    this.endStates = new Set(); // Utilisation d'un ensemble pour gérer plusieurs états finaux\n  }\n\n  // Fonction pour ajouter un état avec un identifiant unique\n  addState() {\n    const newState = stateCounter++;\n    this.states.push(newState);\n    return newState;\n  }\n  addTransition(from, to, symbol) {\n    this.transitions.push({\n      from,\n      to,\n      symbol\n    });\n  }\n  setStartState(state) {\n    this.startState = state;\n  }\n  setEndState(state) {\n    this.endStates.add(state); // Ajouter à l'ensemble des états finaux\n  }\n  getAutomate() {\n    return {\n      states: this.states,\n      transitions: this.transitions,\n      startState: this.startState,\n      endStates: this.endStates // Retourner les états finaux sous forme d'ensemble\n    };\n  }\n}\n\n// Fonction pour créer un automate pour un symbole\nconst createBaseAutomate = symbol => {\n  const automate = new Automate();\n  const start = automate.addState();\n  const end = automate.addState();\n  automate.addTransition(start, end, symbol);\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour concaténer deux automates\nconst concatenateAutomates = (automate1, automate2) => {\n  const automate = new Automate();\n\n  // Copier les états et transitions des deux automates\n  automate.states = [...automate1.states, ...automate2.states];\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\n\n  // Ajouter une transition epsilon entre la fin du premier automate et le début du second\n  automate.addTransition(automate1.endStates.values().next().value, automate2.startState, \"ε\");\n\n  // Définir les nouveaux états de départ et de fin\n  automate.setStartState(automate1.startState);\n  automate.setEndState(automate2.endStates.values().next().value);\n  return automate;\n};\n\n// Fonction pour gérer l'union de deux automates (opérateur |)\nconst unionAutomates = (automate1, automate2) => {\n  const automate = new Automate();\n  const start = automate.addState(); // Nouvel état de départ\n  const end = automate.addState(); // Nouvel état de fin\n\n  // Copier les états et transitions des deux automates\n  automate.states = [...automate1.states, ...automate2.states, start, end];\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\n\n  // Ajouter des transitions epsilon du nouvel état initial vers les deux sous-automates\n  automate.addTransition(start, automate1.startState, \"ε\");\n  automate.addTransition(start, automate2.startState, \"ε\");\n\n  // Ajouter des transitions epsilon des états finaux des sous-automates vers le nouvel état final\n  automate1.endStates.forEach(state => {\n    automate.addTransition(state, end, \"ε\");\n  });\n  automate2.endStates.forEach(state => {\n    automate.addTransition(state, end, \"ε\");\n  });\n\n  // Définir les nouveaux états de départ et de fin\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour gérer la fermeture de Kleene (opérateur *)\nconst kleeneAutomate = automate1 => {\n  const automate = new Automate();\n  const start = automate.addState(); // Nouvel état de départ\n  const end = automate.addState(); // Nouvel état de fin\n\n  // Copier les états et transitions du premier automate\n  automate.states = [...automate1.states, start, end];\n  automate.transitions = [...automate1.transitions];\n\n  // Ajouter des transitions epsilon pour la fermeture de Kleene\n  automate.addTransition(start, automate1.startState, \"ε\");\n  automate.addTransition(automate1.endStates.values().next().value, end, \"ε\");\n  automate.addTransition(automate1.endStates.values().next().value, automate1.startState, \"ε\"); // Boucle\n  automate.addTransition(start, end, \"ε\"); // Transition directe\n\n  // Définir les nouveaux états de départ et de fin\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour gérer l'opérateur +\nconst plusAutomate = automate1 => {\n  const automate = new Automate();\n  const start = automate.addState(); // Nouvel état de départ\n  const end = automate.addState(); // Nouvel état de fin\n\n  // Copier les états et transitions du premier automate\n  automate.states = [...automate1.states, start, end];\n  automate.transitions = [...automate1.transitions];\n\n  // Ajouter des transitions epsilon pour l'opérateur +\n  automate.addTransition(start, automate1.startState, \"ε\");\n  automate.addTransition(automate1.endStates.values().next().value, end, \"ε\");\n  automate.addTransition(automate1.endStates.values().next().value, automate1.startState, \"ε\"); // Boucle\n\n  // Définir les nouveaux états de départ et de fin\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour parser une expression régulière en respectant les priorités et les parenthèses\nconst parseRegex = regex => {\n  const precedence = {\n    \"|\": 1,\n    \".\": 2,\n    \"*\": 3,\n    \"+\": 3\n  };\n  const operators = [];\n  const output = [];\n  const isOperator = char => [\"|\", \".\", \"*\", \"+\"].includes(char);\n  const applyOperator = () => {\n    const operator = operators.pop();\n    if (operator === \".\") {\n      const b = output.pop();\n      const a = output.pop();\n      output.push([\".\", a, b]);\n    } else if (operator === \"|\") {\n      const b = output.pop();\n      const a = output.pop();\n      output.push([\"|\", a, b]);\n    } else if (operator === \"*\") {\n      const a = output.pop();\n      output.push([\"*\", a]);\n    } else if (operator === \"+\") {\n      const a = output.pop();\n      output.push([\"+\", a]);\n    }\n  };\n  let i = 0;\n  while (i < regex.length) {\n    const char = regex[i];\n    if (char === \"(\") {\n      // Trouver la sous-expression entre parenthèses\n      let j = i;\n      let openParentheses = 1;\n      while (openParentheses > 0 && ++j < regex.length) {\n        if (regex[j] === \"(\") openParentheses++;\n        if (regex[j] === \")\") openParentheses--;\n      }\n\n      // Appeler récursivement `parseRegex` sur la sous-expression\n      const subexpression = regex.slice(i + 1, j);\n      output.push(parseRegex(subexpression));\n      i = j; // Avancer jusqu'à la parenthèse fermante\n    } else if (!isOperator(char)) {\n      output.push(char); // Ajouter les symboles au output\n    } else {\n      while (operators.length > 0 && operators[operators.length - 1] !== \"(\" && precedence[operators[operators.length - 1]] >= precedence[char]) {\n        applyOperator();\n      }\n      operators.push(char);\n    }\n    i++;\n  }\n\n  // Appliquer les opérateurs restants\n  while (operators.length > 0) {\n    applyOperator();\n  }\n  return output[0];\n};\n\n// Fonction pour parcourir l'arbre syntaxique et créer l'automate\nconst parseArbre = arbre => {\n  if (typeof arbre === \"string\") {\n    return createBaseAutomate(arbre); // Si c'est un symbole\n  }\n  const [op, ...args] = arbre;\n  switch (op) {\n    case \".\":\n      {\n        // Concaténation\n        let result = parseArbre(args[0]);\n        for (let i = 1; i < args.length; i++) {\n          result = concatenateAutomates(result, parseArbre(args[i]));\n        }\n        return result;\n      }\n    case \"|\":\n      {\n        // Union\n        let result = parseArbre(args[0]);\n        for (let i = 1; i < args.length; i++) {\n          result = unionAutomates(result, parseArbre(args[i]));\n        }\n        return result;\n      }\n    case \"*\":\n      {\n        // Fermeture de Kleene\n        return kleeneAutomate(parseArbre(args[0]));\n      }\n    case \"+\":\n      {\n        // L'opérateur +\n        return plusAutomate(parseArbre(args[0]));\n      }\n    default:\n      throw new Error(`Opérateur non supporté: ${op}`);\n  }\n};\n\n// Fonction pour générer l'automate à partir d'une expression régulière\nconst construireAutomate = regex => {\n  const arbre = parseRegex(regex); // Construire l'arbre syntaxique à partir du regex\n  return parseArbre(arbre); // Construire l'automate à partir de l'arbre syntaxique\n};\n\n// Fonction pour tester si une sous-chaîne est acceptée par l'automate\nconst estAccepte = (automate, chaine, index = 0, etatCourant = automate.startState) => {\n  if (index === chaine.length) {\n    return automate.endStates.has(etatCourant); // Vérifier si l'état courant est un état final\n  }\n  const symbol = chaine[index];\n  let transitions = automate.transitions.filter(t => t.from === etatCourant);\n\n  // Parcourir les transitions epsilon\n  for (let trans of transitions) {\n    if (trans.symbol === \"ε\") {\n      if (estAccepte(automate, chaine, index, trans.to)) {\n        return true;\n      }\n    }\n  }\n\n  // Parcourir les transitions pour le symbole courant\n  for (let trans of transitions) {\n    if (trans.symbol === symbol) {\n      if (estAccepte(automate, chaine, index + 1, trans.to)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// Fonction pour compter les occurrences de sous-chaînes acceptées\nconst compterOccurences = (automate, texte) => {\n  const mots = texte.split(\" \");\n  let compte = 0;\n  for (let mot of mots) {\n    if (estAccepte(automate, mot)) {\n      compte++;\n    }\n  }\n  return compte;\n};\n\n// Fonction pour calculer la fermeture epsilon d'un état donné\nconst epsilonClosure = (automate, state) => {\n  const closure = new Set([state]);\n  const stack = [state];\n  while (stack.length > 0) {\n    const currentState = stack.pop();\n    const epsilonTransitions = automate.transitions.filter(t => t.from === currentState && t.symbol === \"ε\");\n    for (const transition of epsilonTransitions) {\n      if (!closure.has(transition.to)) {\n        closure.add(transition.to);\n        stack.push(transition.to);\n      }\n    }\n  }\n  return closure;\n};\n\n// Fonction pour calculer la fermeture epsilon d'un ensemble d'états\nconst epsilonClosureSet = (automate, states) => {\n  let closure = new Set();\n  for (const state of states) {\n    closure = new Set([...closure, ...epsilonClosure(automate, state)]);\n  }\n  return closure;\n};\n\n// Fonction pour calculer la transition d'un ensemble d'états sur un symbole donné\nconst move = (automate, states, symbol) => {\n  const nextStates = new Set();\n  for (const state of states) {\n    const transitions = automate.transitions.filter(t => t.from === state && t.symbol === symbol);\n    for (const transition of transitions) {\n      nextStates.add(transition.to);\n    }\n  }\n  return nextStates;\n};\n\n// Fonction pour déterminiser un automate non déterministe avec epsilon transitions\nconst determinizeAutomate = nfa => {\n  const dfa = new Automate();\n  const alphabet = Array.from(new Set(nfa.transitions.map(t => t.symbol).filter(s => s !== \"ε\")));\n  const initialClosure = epsilonClosure(nfa, nfa.startState);\n  const dfaStatesMap = new Map();\n  dfaStatesMap.set(JSON.stringify([...initialClosure]), dfa.addState());\n  dfa.setStartState(dfaStatesMap.get(JSON.stringify([...initialClosure])));\n  const unprocessedStates = [initialClosure];\n  while (unprocessedStates.length > 0) {\n    const currentSet = unprocessedStates.pop();\n    const currentStateId = dfaStatesMap.get(JSON.stringify([...currentSet]));\n\n    // Vérifier si l'un des états de l'ensemble est un état final du NFA\n    if ([...currentSet].some(state => nfa.endStates.has(state))) {\n      dfa.setEndState(currentStateId); // Marquer cet état comme final dans le DFA\n    }\n    for (const symbol of alphabet) {\n      const nextSet = epsilonClosureSet(nfa, move(nfa, currentSet, symbol));\n      if (nextSet.size === 0) continue; // Ignorer les ensembles vides\n\n      const nextSetKey = JSON.stringify([...nextSet]);\n      if (!dfaStatesMap.has(nextSetKey)) {\n        const newState = dfa.addState();\n        dfaStatesMap.set(nextSetKey, newState);\n        unprocessedStates.push(nextSet);\n      }\n      dfa.addTransition(currentStateId, dfaStatesMap.get(nextSetKey), symbol);\n    }\n  }\n  return dfa;\n};\nconst removeInaccessibleStates = automate => {\n  const reachableStates = new Set([automate.startState]);\n  const stack = [automate.startState];\n  while (stack.length > 0) {\n    const currentState = stack.pop();\n    const transitions = automate.transitions.filter(t => t.from === currentState);\n    for (const transition of transitions) {\n      if (!reachableStates.has(transition.to)) {\n        reachableStates.add(transition.to);\n        stack.push(transition.to);\n      }\n    }\n  }\n\n  // Filtrer les états et les transitions pour ne conserver que les états accessibles\n  automate.states = automate.states.filter(state => reachableStates.has(state));\n  automate.transitions = automate.transitions.filter(t => reachableStates.has(t.from) && reachableStates.has(t.to));\n  return automate;\n};\n\n// Fonction pour effectuer la minimisation avec l'algorithme de Moore\nconst minimizeAutomate = dfa => {\n  // Étape 1: Supprimer les états inaccessibles\n  removeInaccessibleStates(dfa);\n\n  // Étape 2: Partitionner les états en deux ensembles: états finaux et non finaux\n  let partitions = [new Set(), new Set()];\n  dfa.states.forEach(state => {\n    if (dfa.endStates.has(state)) {\n      partitions[0].add(state); // États finaux\n    } else {\n      partitions[1].add(state); // États non finaux\n    }\n  });\n  let stable = false;\n  const alphabet = Array.from(new Set(dfa.transitions.map(t => t.symbol)));\n\n  // Étape 3: Raffiner les partitions\n  while (!stable) {\n    stable = true;\n    const newPartitions = [];\n    for (const partition of partitions) {\n      const partitionMap = new Map();\n      for (const state of partition) {\n        const signature = alphabet.map(symbol => {\n          const transition = dfa.transitions.find(t => t.from === state && t.symbol === symbol);\n          const targetState = transition ? transition.to : null;\n\n          // Trouver la partition contenant l'état cible\n          const partitionIndex = partitions.findIndex(p => p.has(targetState));\n          return partitionIndex;\n        }).join(\"-\");\n        if (!partitionMap.has(signature)) {\n          partitionMap.set(signature, new Set());\n        }\n        partitionMap.get(signature).add(state);\n      }\n\n      // Ajouter les nouvelles partitions\n      newPartitions.push(...partitionMap.values());\n    }\n\n    // Si les partitions ont changé, on continue la boucle\n    if (newPartitions.length !== partitions.length) {\n      stable = false;\n    }\n    partitions = newPartitions;\n  }\n\n  // Étape 4: Construire le nouvel automate minimisé\n  const minimizedAutomate = new Automate();\n  const stateMap = new Map(); // Map pour relier les anciens états aux nouveaux états\n\n  partitions.forEach((partition, index) => {\n    const newState = minimizedAutomate.addState();\n    partition.forEach(state => stateMap.set(state, newState));\n\n    // Marquer l'état comme final s'il contient un ancien état final\n    if ([...partition].some(state => dfa.endStates.has(state))) {\n      minimizedAutomate.setEndState(newState);\n    }\n  });\n\n  // Recréer les transitions dans l'automate minimisé sans duplicata\n  dfa.transitions.forEach(t => {\n    const fromState = stateMap.get(t.from);\n    const toState = stateMap.get(t.to);\n\n    // Vérifier si la transition existe déjà\n    if (!minimizedAutomate.transitions.some(trans => trans.from === fromState && trans.to === toState && trans.symbol === t.symbol)) {\n      minimizedAutomate.addTransition(fromState, toState, t.symbol);\n    }\n  });\n\n  // Définir l'état initial\n  minimizedAutomate.setStartState(stateMap.get(dfa.startState));\n  return minimizedAutomate;\n};\n\n// Composant React pour afficher l'automate avec les états initiaux et finaux\nconst AutomateVisualizer = ({\n  automate\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\xC9tats\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: automate.states.map(state => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [state, automate.endStates.has(state) && \" (Final)\", \" \", state === automate.startState && \" (Initial)\"]\n      }, state, true, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Transitions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: automate.transitions.map((trans, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [trans.from, \" --(\", trans.symbol, \")--> \", trans.to]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 539,\n    columnNumber: 5\n  }, this);\n};\n\n// Composant principal de l'application\n_c = AutomateVisualizer;\nconst Automata = () => {\n  _s();\n  const [automate, setAutomate] = useState(null); // Automate (NFA ou DFA)\n  const [detAutomate, setDetAutomate] = useState(null); // Automate déterminisé (DFA)\n  const [MinAutomate, setMinAutomate] = useState(null); // Automate Min (Min)\n  const [text, setText] = useState(\"\");\n  const [regex, setRegex] = useState(\"\");\n  const [occurrences, setOccurrences] = useState(0);\n\n  // Fonction pour générer l'automate (NFA)\n  const handleGenerateAutomate = () => {\n    stateCounter = 0; // Réinitialiser le compteur d'état pour chaque nouveau calcul\n    const automate = construireAutomate(regex); // Générer l'automate à partir de l'expression régulière\n    setAutomate(automate); // Stocker l'automate NFA\n    setDetAutomate(null); // Réinitialiser l'automate déterminisé (DFA)\n  };\n\n  // Fonction pour déterminiser l'automate (NFA -> DFA)\n  const handleDeterminizeAutomate = () => {\n    if (automate) {\n      const dfa = determinizeAutomate(automate); // Déterminiser l'automate NFA\n      setDetAutomate(dfa); // Stocker l'automate déterminisé (DFA)\n    }\n  };\n\n  // Exemple de fonction pour appeler la minimisation après la déterminisation\n  const handleMinimizeAutomate = () => {\n    if (detAutomate) {\n      const minimizedDFA = minimizeAutomate(detAutomate);\n      setMinAutomate(minimizedDFA); // Mettre à jour l'automate déterminisé avec la version minimisée\n    }\n  };\n\n  // Fonction pour compter les occurrences dans le texte (NFA ou DFA)\n  const handleCountOccurrences = () => {\n    if (detAutomate) {\n      // Si l'automate déterminisé existe, on l'utilise\n      const count = compterOccurences(detAutomate, text);\n      setOccurrences(count);\n    } else if (automate) {\n      // Sinon, on utilise l'automate NFA\n      const count = compterOccurences(automate, text);\n      setOccurrences(count);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Automate avec transitions epsilon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 611,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Regex:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: regex,\n          onChange: e => setRegex(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 615,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGenerateAutomate,\n        children: \"G\\xE9n\\xE9rer l'automate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeterminizeAutomate,\n        children: \"D\\xE9terminiser l'automate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 618,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMinimizeAutomate,\n        children: \"Minimiser l'automate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 612,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Texte:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: text,\n          onChange: e => setText(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCountOccurrences,\n        children: \"Compter les occurrences\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 7\n    }, this), automate && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Automate (NFA)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AutomateVisualizer, {\n        automate: automate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), detAutomate && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Automate D\\xE9terminis\\xE9 (DFA)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AutomateVisualizer, {\n        automate: detAutomate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), MinAutomate && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Automate Minimiser (Min)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AutomateVisualizer, {\n        automate: MinAutomate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 647,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Nombre d'occurrences: \", occurrences]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 650,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 610,\n    columnNumber: 5\n  }, this);\n};\n_s(Automata, \"g9x0D29cAmeCRvJcV/e1ZMnNu60=\");\n_c2 = Automata;\nexport default Automata;\nvar _c, _c2;\n$RefreshReg$(_c, \"AutomateVisualizer\");\n$RefreshReg$(_c2, \"Automata\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","stateCounter","Automate","constructor","states","transitions","startState","endStates","Set","addState","newState","push","addTransition","from","to","symbol","setStartState","state","setEndState","add","getAutomate","createBaseAutomate","automate","start","end","concatenateAutomates","automate1","automate2","values","next","value","unionAutomates","forEach","kleeneAutomate","plusAutomate","parseRegex","regex","precedence","operators","output","isOperator","char","includes","applyOperator","operator","pop","b","a","i","length","j","openParentheses","subexpression","slice","parseArbre","arbre","op","args","result","Error","construireAutomate","estAccepte","chaine","index","etatCourant","has","filter","t","trans","compterOccurences","texte","mots","split","compte","mot","epsilonClosure","closure","stack","currentState","epsilonTransitions","transition","epsilonClosureSet","move","nextStates","determinizeAutomate","nfa","dfa","alphabet","Array","map","s","initialClosure","dfaStatesMap","Map","set","JSON","stringify","get","unprocessedStates","currentSet","currentStateId","some","nextSet","size","nextSetKey","removeInaccessibleStates","reachableStates","minimizeAutomate","partitions","stable","newPartitions","partition","partitionMap","signature","find","targetState","partitionIndex","findIndex","p","join","minimizedAutomate","stateMap","fromState","toState","AutomateVisualizer","children","fileName","_jsxFileName","lineNumber","columnNumber","idx","_c","Automata","_s","setAutomate","detAutomate","setDetAutomate","MinAutomate","setMinAutomate","text","setText","setRegex","occurrences","setOccurrences","handleGenerateAutomate","handleDeterminizeAutomate","handleMinimizeAutomate","minimizedDFA","handleCountOccurrences","count","onChange","e","target","onClick","_c2","$RefreshReg$"],"sources":["C:/Users/Musha/Desktop/DAAR/projet/projet1/src/app/automate.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// Compteur d'état global pour assurer des identifiants uniques\r\nlet stateCounter = 0;\r\n\r\n// Classe Automate pour stocker les états et transitions\r\nclass Automate {\r\n  constructor() {\r\n    this.states = [];\r\n    this.transitions = [];\r\n    this.startState = null;\r\n    this.endStates = new Set(); // Utilisation d'un ensemble pour gérer plusieurs états finaux\r\n  }\r\n\r\n  // Fonction pour ajouter un état avec un identifiant unique\r\n  addState() {\r\n    const newState = stateCounter++;\r\n    this.states.push(newState);\r\n    return newState;\r\n  }\r\n\r\n  addTransition(from, to, symbol) {\r\n    this.transitions.push({ from, to, symbol });\r\n  }\r\n\r\n  setStartState(state) {\r\n    this.startState = state;\r\n  }\r\n\r\n  setEndState(state) {\r\n    this.endStates.add(state); // Ajouter à l'ensemble des états finaux\r\n  }\r\n\r\n  getAutomate() {\r\n    return {\r\n      states: this.states,\r\n      transitions: this.transitions,\r\n      startState: this.startState,\r\n      endStates: this.endStates, // Retourner les états finaux sous forme d'ensemble\r\n    };\r\n  }\r\n}\r\n\r\n// Fonction pour créer un automate pour un symbole\r\nconst createBaseAutomate = (symbol) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState();\r\n  const end = automate.addState();\r\n  automate.addTransition(start, end, symbol);\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n  return automate;\r\n};\r\n\r\n// Fonction pour concaténer deux automates\r\nconst concatenateAutomates = (automate1, automate2) => {\r\n  const automate = new Automate();\r\n\r\n  // Copier les états et transitions des deux automates\r\n  automate.states = [...automate1.states, ...automate2.states];\r\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\r\n\r\n  // Ajouter une transition epsilon entre la fin du premier automate et le début du second\r\n  automate.addTransition(\r\n    automate1.endStates.values().next().value,\r\n    automate2.startState,\r\n    \"ε\"\r\n  );\r\n\r\n  // Définir les nouveaux états de départ et de fin\r\n  automate.setStartState(automate1.startState);\r\n  automate.setEndState(automate2.endStates.values().next().value);\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour gérer l'union de deux automates (opérateur |)\r\nconst unionAutomates = (automate1, automate2) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState(); // Nouvel état de départ\r\n  const end = automate.addState(); // Nouvel état de fin\r\n\r\n  // Copier les états et transitions des deux automates\r\n  automate.states = [...automate1.states, ...automate2.states, start, end];\r\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\r\n\r\n  // Ajouter des transitions epsilon du nouvel état initial vers les deux sous-automates\r\n  automate.addTransition(start, automate1.startState, \"ε\");\r\n  automate.addTransition(start, automate2.startState, \"ε\");\r\n\r\n  // Ajouter des transitions epsilon des états finaux des sous-automates vers le nouvel état final\r\n  automate1.endStates.forEach((state) => {\r\n    automate.addTransition(state, end, \"ε\");\r\n  });\r\n  automate2.endStates.forEach((state) => {\r\n    automate.addTransition(state, end, \"ε\");\r\n  });\r\n\r\n  // Définir les nouveaux états de départ et de fin\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour gérer la fermeture de Kleene (opérateur *)\r\nconst kleeneAutomate = (automate1) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState(); // Nouvel état de départ\r\n  const end = automate.addState(); // Nouvel état de fin\r\n\r\n  // Copier les états et transitions du premier automate\r\n  automate.states = [...automate1.states, start, end];\r\n  automate.transitions = [...automate1.transitions];\r\n\r\n  // Ajouter des transitions epsilon pour la fermeture de Kleene\r\n  automate.addTransition(start, automate1.startState, \"ε\");\r\n  automate.addTransition(automate1.endStates.values().next().value, end, \"ε\");\r\n  automate.addTransition(\r\n    automate1.endStates.values().next().value,\r\n    automate1.startState,\r\n    \"ε\"\r\n  ); // Boucle\r\n  automate.addTransition(start, end, \"ε\"); // Transition directe\r\n\r\n  // Définir les nouveaux états de départ et de fin\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour gérer l'opérateur +\r\nconst plusAutomate = (automate1) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState(); // Nouvel état de départ\r\n  const end = automate.addState(); // Nouvel état de fin\r\n\r\n  // Copier les états et transitions du premier automate\r\n  automate.states = [...automate1.states, start, end];\r\n  automate.transitions = [...automate1.transitions];\r\n\r\n  // Ajouter des transitions epsilon pour l'opérateur +\r\n  automate.addTransition(start, automate1.startState, \"ε\");\r\n  automate.addTransition(automate1.endStates.values().next().value, end, \"ε\");\r\n  automate.addTransition(\r\n    automate1.endStates.values().next().value,\r\n    automate1.startState,\r\n    \"ε\"\r\n  ); // Boucle\r\n\r\n  // Définir les nouveaux états de départ et de fin\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour parser une expression régulière en respectant les priorités et les parenthèses\r\nconst parseRegex = (regex) => {\r\n  const precedence = { \"|\": 1, \".\": 2, \"*\": 3, \"+\": 3 };\r\n  const operators = [];\r\n  const output = [];\r\n\r\n  const isOperator = (char) => [\"|\", \".\", \"*\", \"+\"].includes(char);\r\n\r\n  const applyOperator = () => {\r\n    const operator = operators.pop();\r\n    if (operator === \".\") {\r\n      const b = output.pop();\r\n      const a = output.pop();\r\n      output.push([\".\", a, b]);\r\n    } else if (operator === \"|\") {\r\n      const b = output.pop();\r\n      const a = output.pop();\r\n      output.push([\"|\", a, b]);\r\n    } else if (operator === \"*\") {\r\n      const a = output.pop();\r\n      output.push([\"*\", a]);\r\n    } else if (operator === \"+\") {\r\n      const a = output.pop();\r\n      output.push([\"+\", a]);\r\n    }\r\n  };\r\n\r\n  let i = 0;\r\n  while (i < regex.length) {\r\n    const char = regex[i];\r\n\r\n    if (char === \"(\") {\r\n      // Trouver la sous-expression entre parenthèses\r\n      let j = i;\r\n      let openParentheses = 1;\r\n      while (openParentheses > 0 && ++j < regex.length) {\r\n        if (regex[j] === \"(\") openParentheses++;\r\n        if (regex[j] === \")\") openParentheses--;\r\n      }\r\n\r\n      // Appeler récursivement `parseRegex` sur la sous-expression\r\n      const subexpression = regex.slice(i + 1, j);\r\n      output.push(parseRegex(subexpression));\r\n      i = j; // Avancer jusqu'à la parenthèse fermante\r\n    } else if (!isOperator(char)) {\r\n      output.push(char); // Ajouter les symboles au output\r\n    } else {\r\n      while (\r\n        operators.length > 0 &&\r\n        operators[operators.length - 1] !== \"(\" &&\r\n        precedence[operators[operators.length - 1]] >= precedence[char]\r\n      ) {\r\n        applyOperator();\r\n      }\r\n      operators.push(char);\r\n    }\r\n    i++;\r\n  }\r\n\r\n  // Appliquer les opérateurs restants\r\n  while (operators.length > 0) {\r\n    applyOperator();\r\n  }\r\n\r\n  return output[0];\r\n};\r\n\r\n// Fonction pour parcourir l'arbre syntaxique et créer l'automate\r\nconst parseArbre = (arbre) => {\r\n  if (typeof arbre === \"string\") {\r\n    return createBaseAutomate(arbre); // Si c'est un symbole\r\n  }\r\n\r\n  const [op, ...args] = arbre;\r\n\r\n  switch (op) {\r\n    case \".\": {\r\n      // Concaténation\r\n      let result = parseArbre(args[0]);\r\n      for (let i = 1; i < args.length; i++) {\r\n        result = concatenateAutomates(result, parseArbre(args[i]));\r\n      }\r\n      return result;\r\n    }\r\n\r\n    case \"|\": {\r\n      // Union\r\n      let result = parseArbre(args[0]);\r\n      for (let i = 1; i < args.length; i++) {\r\n        result = unionAutomates(result, parseArbre(args[i]));\r\n      }\r\n      return result;\r\n    }\r\n\r\n    case \"*\": {\r\n      // Fermeture de Kleene\r\n      return kleeneAutomate(parseArbre(args[0]));\r\n    }\r\n\r\n    case \"+\": {\r\n      // L'opérateur +\r\n      return plusAutomate(parseArbre(args[0]));\r\n    }\r\n\r\n    default:\r\n      throw new Error(`Opérateur non supporté: ${op}`);\r\n  }\r\n};\r\n\r\n// Fonction pour générer l'automate à partir d'une expression régulière\r\nconst construireAutomate = (regex) => {\r\n  const arbre = parseRegex(regex); // Construire l'arbre syntaxique à partir du regex\r\n  return parseArbre(arbre); // Construire l'automate à partir de l'arbre syntaxique\r\n};\r\n\r\n// Fonction pour tester si une sous-chaîne est acceptée par l'automate\r\nconst estAccepte = (\r\n  automate,\r\n  chaine,\r\n  index = 0,\r\n  etatCourant = automate.startState\r\n) => {\r\n  if (index === chaine.length) {\r\n    return automate.endStates.has(etatCourant); // Vérifier si l'état courant est un état final\r\n  }\r\n\r\n  const symbol = chaine[index];\r\n  let transitions = automate.transitions.filter((t) => t.from === etatCourant);\r\n\r\n  // Parcourir les transitions epsilon\r\n  for (let trans of transitions) {\r\n    if (trans.symbol === \"ε\") {\r\n      if (estAccepte(automate, chaine, index, trans.to)) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Parcourir les transitions pour le symbole courant\r\n  for (let trans of transitions) {\r\n    if (trans.symbol === symbol) {\r\n      if (estAccepte(automate, chaine, index + 1, trans.to)) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n// Fonction pour compter les occurrences de sous-chaînes acceptées\r\nconst compterOccurences = (automate, texte) => {\r\n  const mots = texte.split(\" \");\r\n  let compte = 0;\r\n  for (let mot of mots) {\r\n    if (estAccepte(automate, mot)) {\r\n      compte++;\r\n    }\r\n  }\r\n  return compte;\r\n};\r\n\r\n// Fonction pour calculer la fermeture epsilon d'un état donné\r\nconst epsilonClosure = (automate, state) => {\r\n  const closure = new Set([state]);\r\n  const stack = [state];\r\n\r\n  while (stack.length > 0) {\r\n    const currentState = stack.pop();\r\n    const epsilonTransitions = automate.transitions.filter(\r\n      (t) => t.from === currentState && t.symbol === \"ε\"\r\n    );\r\n\r\n    for (const transition of epsilonTransitions) {\r\n      if (!closure.has(transition.to)) {\r\n        closure.add(transition.to);\r\n        stack.push(transition.to);\r\n      }\r\n    }\r\n  }\r\n\r\n  return closure;\r\n};\r\n\r\n// Fonction pour calculer la fermeture epsilon d'un ensemble d'états\r\nconst epsilonClosureSet = (automate, states) => {\r\n  let closure = new Set();\r\n  for (const state of states) {\r\n    closure = new Set([...closure, ...epsilonClosure(automate, state)]);\r\n  }\r\n  return closure;\r\n};\r\n\r\n// Fonction pour calculer la transition d'un ensemble d'états sur un symbole donné\r\nconst move = (automate, states, symbol) => {\r\n  const nextStates = new Set();\r\n  for (const state of states) {\r\n    const transitions = automate.transitions.filter(\r\n      (t) => t.from === state && t.symbol === symbol\r\n    );\r\n    for (const transition of transitions) {\r\n      nextStates.add(transition.to);\r\n    }\r\n  }\r\n  return nextStates;\r\n};\r\n\r\n// Fonction pour déterminiser un automate non déterministe avec epsilon transitions\r\nconst determinizeAutomate = (nfa) => {\r\n  const dfa = new Automate();\r\n  const alphabet = Array.from(\r\n    new Set(nfa.transitions.map((t) => t.symbol).filter((s) => s !== \"ε\"))\r\n  );\r\n\r\n  const initialClosure = epsilonClosure(nfa, nfa.startState);\r\n  const dfaStatesMap = new Map();\r\n  dfaStatesMap.set(JSON.stringify([...initialClosure]), dfa.addState());\r\n  dfa.setStartState(dfaStatesMap.get(JSON.stringify([...initialClosure])));\r\n\r\n  const unprocessedStates = [initialClosure];\r\n\r\n  while (unprocessedStates.length > 0) {\r\n    const currentSet = unprocessedStates.pop();\r\n    const currentStateId = dfaStatesMap.get(JSON.stringify([...currentSet]));\r\n\r\n    // Vérifier si l'un des états de l'ensemble est un état final du NFA\r\n    if ([...currentSet].some((state) => nfa.endStates.has(state))) {\r\n      dfa.setEndState(currentStateId); // Marquer cet état comme final dans le DFA\r\n    }\r\n\r\n    for (const symbol of alphabet) {\r\n      const nextSet = epsilonClosureSet(nfa, move(nfa, currentSet, symbol));\r\n\r\n      if (nextSet.size === 0) continue; // Ignorer les ensembles vides\r\n\r\n      const nextSetKey = JSON.stringify([...nextSet]);\r\n\r\n      if (!dfaStatesMap.has(nextSetKey)) {\r\n        const newState = dfa.addState();\r\n        dfaStatesMap.set(nextSetKey, newState);\r\n        unprocessedStates.push(nextSet);\r\n      }\r\n\r\n      dfa.addTransition(currentStateId, dfaStatesMap.get(nextSetKey), symbol);\r\n    }\r\n  }\r\n\r\n  return dfa;\r\n};\r\n\r\nconst removeInaccessibleStates = (automate) => {\r\n  const reachableStates = new Set([automate.startState]);\r\n  const stack = [automate.startState];\r\n\r\n  while (stack.length > 0) {\r\n    const currentState = stack.pop();\r\n    const transitions = automate.transitions.filter(\r\n      (t) => t.from === currentState\r\n    );\r\n\r\n    for (const transition of transitions) {\r\n      if (!reachableStates.has(transition.to)) {\r\n        reachableStates.add(transition.to);\r\n        stack.push(transition.to);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Filtrer les états et les transitions pour ne conserver que les états accessibles\r\n  automate.states = automate.states.filter((state) =>\r\n    reachableStates.has(state)\r\n  );\r\n  automate.transitions = automate.transitions.filter(\r\n    (t) => reachableStates.has(t.from) && reachableStates.has(t.to)\r\n  );\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour effectuer la minimisation avec l'algorithme de Moore\r\nconst minimizeAutomate = (dfa) => {\r\n  // Étape 1: Supprimer les états inaccessibles\r\n  removeInaccessibleStates(dfa);\r\n\r\n  // Étape 2: Partitionner les états en deux ensembles: états finaux et non finaux\r\n  let partitions = [new Set(), new Set()];\r\n  dfa.states.forEach((state) => {\r\n    if (dfa.endStates.has(state)) {\r\n      partitions[0].add(state); // États finaux\r\n    } else {\r\n      partitions[1].add(state); // États non finaux\r\n    }\r\n  });\r\n\r\n  let stable = false;\r\n  const alphabet = Array.from(new Set(dfa.transitions.map((t) => t.symbol)));\r\n\r\n  // Étape 3: Raffiner les partitions\r\n  while (!stable) {\r\n    stable = true;\r\n    const newPartitions = [];\r\n\r\n    for (const partition of partitions) {\r\n      const partitionMap = new Map();\r\n\r\n      for (const state of partition) {\r\n        const signature = alphabet\r\n          .map((symbol) => {\r\n            const transition = dfa.transitions.find(\r\n              (t) => t.from === state && t.symbol === symbol\r\n            );\r\n            const targetState = transition ? transition.to : null;\r\n\r\n            // Trouver la partition contenant l'état cible\r\n            const partitionIndex = partitions.findIndex((p) =>\r\n              p.has(targetState)\r\n            );\r\n            return partitionIndex;\r\n          })\r\n          .join(\"-\");\r\n\r\n        if (!partitionMap.has(signature)) {\r\n          partitionMap.set(signature, new Set());\r\n        }\r\n        partitionMap.get(signature).add(state);\r\n      }\r\n\r\n      // Ajouter les nouvelles partitions\r\n      newPartitions.push(...partitionMap.values());\r\n    }\r\n\r\n    // Si les partitions ont changé, on continue la boucle\r\n    if (newPartitions.length !== partitions.length) {\r\n      stable = false;\r\n    }\r\n\r\n    partitions = newPartitions;\r\n  }\r\n\r\n  // Étape 4: Construire le nouvel automate minimisé\r\n  const minimizedAutomate = new Automate();\r\n  const stateMap = new Map(); // Map pour relier les anciens états aux nouveaux états\r\n\r\n  partitions.forEach((partition, index) => {\r\n    const newState = minimizedAutomate.addState();\r\n    partition.forEach((state) => stateMap.set(state, newState));\r\n\r\n    // Marquer l'état comme final s'il contient un ancien état final\r\n    if ([...partition].some((state) => dfa.endStates.has(state))) {\r\n      minimizedAutomate.setEndState(newState);\r\n    }\r\n  });\r\n\r\n  // Recréer les transitions dans l'automate minimisé sans duplicata\r\n  dfa.transitions.forEach((t) => {\r\n    const fromState = stateMap.get(t.from);\r\n    const toState = stateMap.get(t.to);\r\n\r\n    // Vérifier si la transition existe déjà\r\n    if (\r\n      !minimizedAutomate.transitions.some(\r\n        (trans) =>\r\n          trans.from === fromState &&\r\n          trans.to === toState &&\r\n          trans.symbol === t.symbol\r\n      )\r\n    ) {\r\n      minimizedAutomate.addTransition(fromState, toState, t.symbol);\r\n    }\r\n  });\r\n\r\n  // Définir l'état initial\r\n  minimizedAutomate.setStartState(stateMap.get(dfa.startState));\r\n\r\n  return minimizedAutomate;\r\n};\r\n\r\n// Composant React pour afficher l'automate avec les états initiaux et finaux\r\nconst AutomateVisualizer = ({ automate }) => {\r\n  return (\r\n    <div>\r\n      <h3>États</h3>\r\n      <ul>\r\n        {automate.states.map((state) => (\r\n          <li key={state}>\r\n            {state}\r\n            {automate.endStates.has(state) && \" (Final)\"}{\" \"}\r\n            {/* Vérifie si l'état est final */}\r\n            {state === automate.startState && \" (Initial)\"}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <h3>Transitions</h3>\r\n      <ul>\r\n        {automate.transitions.map((trans, idx) => (\r\n          <li key={idx}>\r\n            {trans.from} --({trans.symbol})--&gt; {trans.to}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Composant principal de l'application\r\nconst Automata = () => {\r\n  const [automate, setAutomate] = useState(null); // Automate (NFA ou DFA)\r\n  const [detAutomate, setDetAutomate] = useState(null); // Automate déterminisé (DFA)\r\n  const [MinAutomate, setMinAutomate] = useState(null); // Automate Min (Min)\r\n  const [text, setText] = useState(\"\");\r\n  const [regex, setRegex] = useState(\"\");\r\n  const [occurrences, setOccurrences] = useState(0);\r\n\r\n  // Fonction pour générer l'automate (NFA)\r\n  const handleGenerateAutomate = () => {\r\n    stateCounter = 0; // Réinitialiser le compteur d'état pour chaque nouveau calcul\r\n    const automate = construireAutomate(regex); // Générer l'automate à partir de l'expression régulière\r\n    setAutomate(automate); // Stocker l'automate NFA\r\n    setDetAutomate(null); // Réinitialiser l'automate déterminisé (DFA)\r\n  };\r\n\r\n  // Fonction pour déterminiser l'automate (NFA -> DFA)\r\n  const handleDeterminizeAutomate = () => {\r\n    if (automate) {\r\n      const dfa = determinizeAutomate(automate); // Déterminiser l'automate NFA\r\n      setDetAutomate(dfa); // Stocker l'automate déterminisé (DFA)\r\n    }\r\n  };\r\n\r\n  // Exemple de fonction pour appeler la minimisation après la déterminisation\r\n  const handleMinimizeAutomate = () => {\r\n    if (detAutomate) {\r\n      const minimizedDFA = minimizeAutomate(detAutomate);\r\n      setMinAutomate(minimizedDFA); // Mettre à jour l'automate déterminisé avec la version minimisée\r\n    }\r\n  };\r\n\r\n  // Fonction pour compter les occurrences dans le texte (NFA ou DFA)\r\n  const handleCountOccurrences = () => {\r\n    if (detAutomate) {\r\n      // Si l'automate déterminisé existe, on l'utilise\r\n      const count = compterOccurences(detAutomate, text);\r\n      setOccurrences(count);\r\n    } else if (automate) {\r\n      // Sinon, on utilise l'automate NFA\r\n      const count = compterOccurences(automate, text);\r\n      setOccurrences(count);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Automate avec transitions epsilon</h1>\r\n      <div>\r\n        <label>\r\n          Regex:\r\n          <input value={regex} onChange={(e) => setRegex(e.target.value)} />\r\n        </label>\r\n        <button onClick={handleGenerateAutomate}>Générer l'automate</button>\r\n        <button onClick={handleDeterminizeAutomate}>\r\n          Déterminiser l'automate\r\n        </button>\r\n        <button onClick={handleMinimizeAutomate}>Minimiser l'automate</button>\r\n      </div>\r\n      <div>\r\n        <label>\r\n          Texte:\r\n          <input value={text} onChange={(e) => setText(e.target.value)} />\r\n        </label>\r\n        <button onClick={handleCountOccurrences}>\r\n          Compter les occurrences\r\n        </button>\r\n      </div>\r\n      {automate && (\r\n        <>\r\n          <h2>Automate (NFA)</h2>\r\n          <AutomateVisualizer automate={automate} />\r\n        </>\r\n      )}\r\n      {detAutomate && (\r\n        <>\r\n          <h2>Automate Déterminisé (DFA)</h2>\r\n          <AutomateVisualizer automate={detAutomate} />\r\n        </>\r\n      )}\r\n      {MinAutomate && (\r\n        <>\r\n          <h2>Automate Minimiser (Min)</h2>\r\n          <AutomateVisualizer automate={MinAutomate} />\r\n        </>\r\n      )}\r\n      <h3>Nombre d'occurrences: {occurrences}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Automata;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}