{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Musha\\\\Desktop\\\\DAAR\\\\projet\\\\Projet 1\\\\Automaton-\\\\Client\\\\src\\\\app\\\\automate.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Modal } from \"react-bootstrap\";\n\n// Compteur d'état global pour assurer des identifiants uniques\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet stateCounter = 0;\n\n// Classe Automate pour stocker les états et transitions\nclass Automate {\n  constructor() {\n    this.states = [];\n    this.transitions = [];\n    this.startState = null;\n    this.endStates = new Set(); // Utilisation d'un ensemble pour gérer plusieurs états finaux\n  }\n\n  // Fonction pour ajouter un état avec un identifiant unique\n  addState() {\n    const newState = stateCounter++;\n    this.states.push(newState);\n    return newState;\n  }\n  addTransition(from, to, symbol) {\n    this.transitions.push({\n      from,\n      to,\n      symbol\n    });\n  }\n  setStartState(state) {\n    this.startState = state;\n  }\n  setEndState(state) {\n    this.endStates.add(state); // Ajouter à l'ensemble des états finaux\n  }\n  getAutomate() {\n    return {\n      states: this.states,\n      transitions: this.transitions,\n      startState: this.startState,\n      endStates: this.endStates // Retourner les états finaux sous forme d'ensemble\n    };\n  }\n}\n\n// Fonction pour créer un automate pour un symbole\nconst createBaseAutomate = symbol => {\n  const automate = new Automate();\n  const start = automate.addState();\n  const end = automate.addState();\n  automate.addTransition(start, end, symbol);\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour concaténer deux automates\nconst concatenateAutomates = (automate1, automate2) => {\n  const automate = new Automate();\n\n  // Copier les états et transitions des deux automates\n  automate.states = [...automate1.states, ...automate2.states];\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\n\n  // Ajouter une transition epsilon entre la fin du premier automate et le début du second\n  automate.addTransition(automate1.endStates.values().next().value, automate2.startState, \"ε\");\n\n  // Définir les nouveaux états de départ et de fin\n  automate.setStartState(automate1.startState);\n  automate.setEndState(automate2.endStates.values().next().value);\n  return automate;\n};\n\n// Fonction pour gérer l'union de deux automates (opérateur |)\nconst unionAutomates = (automate1, automate2) => {\n  const automate = new Automate();\n  const start = automate.addState(); // Nouvel état de départ\n  const end = automate.addState(); // Nouvel état de fin\n\n  // Copier les états et transitions des deux automates\n  automate.states = [...automate1.states, ...automate2.states, start, end];\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\n\n  // Ajouter des transitions epsilon du nouvel état initial vers les deux sous-automates\n  automate.addTransition(start, automate1.startState, \"ε\");\n  automate.addTransition(start, automate2.startState, \"ε\");\n\n  // Ajouter des transitions epsilon des états finaux des sous-automates vers le nouvel état final\n  automate1.endStates.forEach(state => {\n    automate.addTransition(state, end, \"ε\");\n  });\n  automate2.endStates.forEach(state => {\n    automate.addTransition(state, end, \"ε\");\n  });\n\n  // Définir les nouveaux états de départ et de fin\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour gérer la fermeture de Kleene (opérateur *)\nconst kleeneAutomate = automate1 => {\n  const automate = new Automate();\n  const start = automate.addState(); // Nouvel état de départ\n  const end = automate.addState(); // Nouvel état de fin\n\n  // Copier les états et transitions du premier automate\n  automate.states = [...automate1.states, start, end];\n  automate.transitions = [...automate1.transitions];\n\n  // Ajouter des transitions epsilon pour la fermeture de Kleene\n  automate.addTransition(start, automate1.startState, \"ε\");\n  automate.addTransition(automate1.endStates.values().next().value, end, \"ε\");\n  automate.addTransition(automate1.endStates.values().next().value, automate1.startState, \"ε\"); // Boucle\n  automate.addTransition(start, end, \"ε\"); // Transition directe\n\n  // Définir les nouveaux états de départ et de fin\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour gérer l'opérateur +\nconst plusAutomate = automate1 => {\n  const automate = new Automate();\n  const start = automate.addState(); // Nouvel état de départ\n  const end = automate.addState(); // Nouvel état de fin\n\n  // Copier les états et transitions du premier automate\n  automate.states = [...automate1.states, start, end];\n  automate.transitions = [...automate1.transitions];\n\n  // Ajouter des transitions epsilon pour l'opérateur +\n  automate.addTransition(start, automate1.startState, \"ε\");\n  automate.addTransition(automate1.endStates.values().next().value, end, \"ε\");\n  automate.addTransition(automate1.endStates.values().next().value, automate1.startState, \"ε\"); // Boucle\n\n  // Définir les nouveaux états de départ et de fin\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour insérer les concaténations implicites dans une regex\nconst ajouterConcatImpl = regex => {\n  let resultat = \"\";\n  for (let i = 0; i < regex.length; i++) {\n    const char = regex[i];\n    resultat += char;\n\n    // Ajouter une concaténation implicite si nécessaire\n    if (i + 1 < regex.length) {\n      const nextChar = regex[i + 1];\n\n      // Condition pour ajouter une concaténation implicite\n      if (char !== \"(\" && char !== \"|\" && char !== \".\" &&\n      // Si le caractère actuel n'est pas un opérateur\n      nextChar !== \")\" && nextChar !== \"|\" && nextChar !== \"*\" && nextChar !== \"+\" && nextChar !== \".\" // Si le prochain caractère n'est pas un opérateur\n      ) {\n        resultat += \".\"; // Ajouter une concaténation explicite\n      }\n    }\n  }\n  return resultat;\n};\n\n// Fonction pour parser une expression régulière en respectant les priorités et les parenthèses\nconst parseRegex = regex => {\n  // Ajouter les concaténations implicites avant de parser\n  regex = ajouterConcatImpl(regex);\n  const precedence = {\n    \"|\": 1,\n    \".\": 2,\n    \"*\": 3,\n    \"+\": 3\n  };\n  const operators = [];\n  const output = [];\n  const isOperator = char => [\"|\", \".\", \"*\", \"+\"].includes(char);\n  const applyOperator = () => {\n    const operator = operators.pop();\n    if (operator === \".\") {\n      const b = output.pop();\n      const a = output.pop();\n      output.push([\".\", a, b]);\n    } else if (operator === \"|\") {\n      const b = output.pop();\n      const a = output.pop();\n      output.push([\"|\", a, b]);\n    } else if (operator === \"*\") {\n      const a = output.pop();\n      output.push([\"*\", a]);\n    } else if (operator === \"+\") {\n      const a = output.pop();\n      output.push([\"+\", a]);\n    }\n  };\n  let i = 0;\n  while (i < regex.length) {\n    const char = regex[i];\n    if (char === \"(\") {\n      // Trouver la sous-expression entre parenthèses\n      let j = i;\n      let openParentheses = 1;\n      while (openParentheses > 0 && ++j < regex.length) {\n        if (regex[j] === \"(\") openParentheses++;\n        if (regex[j] === \")\") openParentheses--;\n      }\n\n      // Appeler récursivement `parseRegex` sur la sous-expression\n      const subexpression = regex.slice(i + 1, j);\n      output.push(parseRegex(subexpression));\n      i = j; // Avancer jusqu'à la parenthèse fermante\n    } else if (!isOperator(char)) {\n      output.push(char); // Ajouter les symboles au output\n    } else {\n      while (operators.length > 0 && operators[operators.length - 1] !== \"(\" && precedence[operators[operators.length - 1]] >= precedence[char]) {\n        applyOperator();\n      }\n      operators.push(char);\n    }\n    i++;\n  }\n\n  // Appliquer les opérateurs restants\n  while (operators.length > 0) {\n    applyOperator();\n  }\n  return output[0];\n};\n\n// Fonction pour parcourir l'arbre syntaxique et créer l'automate\nconst parseArbre = arbre => {\n  if (typeof arbre === \"string\") {\n    return createBaseAutomate(arbre); // Si c'est un symbole\n  }\n  const [op, ...args] = arbre;\n  switch (op) {\n    case \".\":\n      {\n        // Concaténation\n        let result = parseArbre(args[0]);\n        for (let i = 1; i < args.length; i++) {\n          result = concatenateAutomates(result, parseArbre(args[i]));\n        }\n        return result;\n      }\n    case \"|\":\n      {\n        // Union\n        let result = parseArbre(args[0]);\n        for (let i = 1; i < args.length; i++) {\n          result = unionAutomates(result, parseArbre(args[i]));\n        }\n        return result;\n      }\n    case \"*\":\n      {\n        // Fermeture de Kleene\n        return kleeneAutomate(parseArbre(args[0]));\n      }\n    case \"+\":\n      {\n        // L'opérateur +\n        return plusAutomate(parseArbre(args[0]));\n      }\n    default:\n      throw new Error(`Opérateur non supporté: ${op}`);\n  }\n};\n\n//\n\n//\n\n// Fonction pour calculer le tableau LPS (Longest Prefix Suffix)\nconst computeLPSArray = (pat, M, lps) => {\n  let len = 0;\n  let i = 1;\n  lps[0] = 0;\n  while (i < M) {\n    if (pat[i] === pat[len]) {\n      len++;\n      lps[i] = len;\n      i++;\n    } else {\n      if (len !== 0) {\n        len = lps[len - 1];\n      } else {\n        lps[i] = 0;\n        i++;\n      }\n    }\n  }\n};\n\n// Algorithme KMP\nconst KMPSearch = (txt, pat) => {\n  const M = pat.length;\n  const N = txt.length;\n  const lpsTable = new Array(M).fill(0);\n  computeLPSArray(pat, M, lpsTable);\n  let i = 0; // Index pour txt[]\n  let j = 0; // Index pour pat[]\n  const positions = [];\n  while (i < N) {\n    if (pat[j] === txt[i]) {\n      i++;\n      j++;\n    }\n    if (j === M) {\n      positions.push(i - j);\n      j = lpsTable[j - 1];\n    } else if (i < N && pat[j] !== txt[i]) {\n      if (j !== 0) {\n        j = lpsTable[j - 1];\n      } else {\n        i++;\n      }\n    }\n  }\n  return {\n    positions,\n    lpsTable\n  };\n};\n\n// Fonction pour mesurer le temps moyen d'exécution sur plusieurs itérations\n_c = KMPSearch;\nconst measureExecutionTime = (txt, pat, numIterations) => {\n  let totalTime = 0;\n  let times = [];\n  for (let i = 0; i < numIterations; i++) {\n    const startTime = performance.now();\n    KMPSearch(txt, pat);\n    const endTime = performance.now();\n    const iterationTime = endTime - startTime;\n    if (iterationTime > 0.1) {\n      // Filtre les valeurs proches de 0\n      times.push(iterationTime);\n      totalTime += iterationTime;\n    }\n  }\n\n  // Trie les temps et trouve la médiane\n  times.sort((a, b) => a - b);\n  const medianTime = times[Math.floor(times.length / 2)];\n  console.log(`Median time: ${medianTime.toFixed(2)} ms`);\n  return medianTime;\n};\n\n//\n\n//\n\n//\n\n// Fonction pour générer l'automate à partir d'une expression régulière\nconst construireAutomate = regex => {\n  const arbre = parseRegex(regex); // Construire l'arbre syntaxique à partir du regex\n\n  return parseArbre(arbre); // Construire l'automate à partir de l'arbre syntaxique\n};\n\n// Fonction pour tester si une sous-chaîne est acceptée par l'automate\nconst estAccepte = (automate, chaine, index = 0, etatCourant = automate.startState) => {\n  if (index === chaine.length) {\n    return automate.endStates.has(etatCourant); // Vérifier si l'état courant est un état final\n  }\n  const symbol = chaine[index];\n  let transitions = automate.transitions.filter(t => t.from === etatCourant);\n\n  // Parcourir les transitions epsilon\n  for (let trans of transitions) {\n    if (trans.symbol === \"ε\") {\n      if (estAccepte(automate, chaine, index, trans.to)) {\n        return true;\n      }\n    }\n  }\n\n  // Parcourir les transitions pour le symbole courant\n  for (let trans of transitions) {\n    if (trans.symbol === symbol) {\n      if (estAccepte(automate, chaine, index + 1, trans.to)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// Fonction pour tester si une sous-chaîne (motif) est présente dans un mot\nconst testMotifDansMot = (automate, mot) => {\n  // Essayer toutes les sous-chaînes du mot pour trouver le motif\n  for (let i = 0; i < mot.length; i++) {\n    for (let j = i; j <= mot.length; j++) {\n      const sousChaine = mot.slice(i, j);\n      if (estAccepte(automate, sousChaine)) {\n        return true; // Si une sous-chaîne correspond au motif, retourner vrai\n      }\n    }\n  }\n  return false;\n};\n\n// Fonction pour tester toutes les sous-chaînes acceptées dans une ligne de texte\nconst TestTxt = (automate, line) => {\n  const mots = line.split(\" \"); // Diviser la ligne en mots\n  for (let mot of mots) {\n    if (testMotifDansMot(automate, mot)) {\n      return true; // Si un mot contient le motif, retourner vrai\n    }\n  }\n  return false; // Si aucun mot ne contient le motif, retourner faux\n};\n\n// Fonction pour calculer la fermeture epsilon d'un état donné\n_c2 = TestTxt;\nconst epsilonClosure = (automate, state) => {\n  const closure = new Set([state]);\n  const stack = [state];\n  while (stack.length > 0) {\n    const currentState = stack.pop();\n    const epsilonTransitions = automate.transitions.filter(t => t.from === currentState && t.symbol === \"ε\");\n    for (const transition of epsilonTransitions) {\n      if (!closure.has(transition.to)) {\n        closure.add(transition.to);\n        stack.push(transition.to);\n      }\n    }\n  }\n  return closure;\n};\n\n// Fonction pour calculer la fermeture epsilon d'un ensemble d'états\nconst epsilonClosureSet = (automate, states) => {\n  let closure = new Set();\n  for (const state of states) {\n    closure = new Set([...closure, ...epsilonClosure(automate, state)]);\n  }\n  return closure;\n};\n\n// Fonction pour calculer la transition d'un ensemble d'états sur un symbole donné\nconst move = (automate, states, symbol) => {\n  const nextStates = new Set();\n  for (const state of states) {\n    const transitions = automate.transitions.filter(t => t.from === state && t.symbol === symbol);\n    for (const transition of transitions) {\n      nextStates.add(transition.to);\n    }\n  }\n  return nextStates;\n};\n\n// Fonction pour déterminiser un automate non déterministe avec epsilon transitions\nconst determinizeAutomate = nfa => {\n  const dfa = new Automate();\n  const alphabet = Array.from(new Set(nfa.transitions.map(t => t.symbol).filter(s => s !== \"ε\")));\n  const initialClosure = epsilonClosure(nfa, nfa.startState);\n  const dfaStatesMap = new Map();\n  dfaStatesMap.set(JSON.stringify([...initialClosure]), dfa.addState());\n  dfa.setStartState(dfaStatesMap.get(JSON.stringify([...initialClosure])));\n  const unprocessedStates = [initialClosure];\n  while (unprocessedStates.length > 0) {\n    const currentSet = unprocessedStates.pop();\n    const currentStateId = dfaStatesMap.get(JSON.stringify([...currentSet]));\n\n    // Vérifier si l'un des états de l'ensemble est un état final du NFA\n    if ([...currentSet].some(state => nfa.endStates.has(state))) {\n      dfa.setEndState(currentStateId); // Marquer cet état comme final dans le DFA\n    }\n    for (const symbol of alphabet) {\n      const nextSet = epsilonClosureSet(nfa, move(nfa, currentSet, symbol));\n      if (nextSet.size === 0) continue; // Ignorer les ensembles vides\n\n      const nextSetKey = JSON.stringify([...nextSet]);\n      if (!dfaStatesMap.has(nextSetKey)) {\n        const newState = dfa.addState();\n        dfaStatesMap.set(nextSetKey, newState);\n        unprocessedStates.push(nextSet);\n      }\n      dfa.addTransition(currentStateId, dfaStatesMap.get(nextSetKey), symbol);\n    }\n  }\n  return dfa;\n};\nconst removeInaccessibleStates = automate => {\n  const reachableStates = new Set([automate.startState]);\n  const stack = [automate.startState];\n  while (stack.length > 0) {\n    const currentState = stack.pop();\n    const transitions = automate.transitions.filter(t => t.from === currentState);\n    for (const transition of transitions) {\n      if (!reachableStates.has(transition.to)) {\n        reachableStates.add(transition.to);\n        stack.push(transition.to);\n      }\n    }\n  }\n\n  // Filtrer les états et les transitions pour ne conserver que les états accessibles\n  automate.states = automate.states.filter(state => reachableStates.has(state));\n  automate.transitions = automate.transitions.filter(t => reachableStates.has(t.from) && reachableStates.has(t.to));\n  return automate;\n};\n\n// Fonction pour effectuer la minimisation avec l'algorithme de Moore\nconst minimizeAutomate = dfa => {\n  // Étape 1: Supprimer les états inaccessibles\n  removeInaccessibleStates(dfa);\n\n  // Étape 2: Partitionner les états en deux ensembles: états finaux et non finaux\n  let partitions = [new Set(), new Set()];\n  dfa.states.forEach(state => {\n    if (dfa.endStates.has(state)) {\n      partitions[0].add(state); // États finaux\n    } else {\n      partitions[1].add(state); // États non finaux\n    }\n  });\n  let stable = false;\n  const alphabet = Array.from(new Set(dfa.transitions.map(t => t.symbol)));\n\n  // Étape 3: Raffiner les partitions\n  while (!stable) {\n    stable = true;\n    const newPartitions = [];\n    const partitionsCopy = partitions.slice(); // Create a copy of partitions\n\n    for (const partition of partitionsCopy) {\n      const partitionMap = new Map();\n      for (const state of partition) {\n        const signature = alphabet.map(symbol => {\n          const transition = dfa.transitions.find(t => t.from === state && t.symbol === symbol);\n          const targetState = transition ? transition.to : null;\n\n          // Trouver la partition contenant l'état cible\n          const partitionIndex = partitionsCopy.findIndex(p => p.has(targetState));\n          return partitionIndex;\n        }).join(\"-\");\n        if (!partitionMap.has(signature)) {\n          partitionMap.set(signature, new Set());\n        }\n        partitionMap.get(signature).add(state);\n      }\n\n      // Ajouter les nouvelles partitions\n      newPartitions.push(...partitionMap.values());\n    }\n\n    // Si les partitions ont changé, on continue la boucle\n    if (newPartitions.length !== partitions.length) {\n      stable = false;\n    }\n    partitions = newPartitions;\n  }\n\n  // Étape 4: Construire le nouvel automate minimisé\n  const minimizedAutomate = new Automate();\n  const stateMap = new Map(); // Map pour relier les anciens états aux nouveaux états\n\n  partitions.forEach((partition, index) => {\n    const newState = minimizedAutomate.addState();\n    partition.forEach(state => stateMap.set(state, newState));\n\n    // Marquer l'état comme final s'il contient un ancien état final\n    if ([...partition].some(state => dfa.endStates.has(state))) {\n      minimizedAutomate.setEndState(newState);\n    }\n  });\n\n  // Recréer les transitions dans l'automate minimisé sans duplicata\n  dfa.transitions.forEach(t => {\n    const fromState = stateMap.get(t.from);\n    const toState = stateMap.get(t.to);\n\n    // Vérifier si la transition existe déjà\n    if (!minimizedAutomate.transitions.some(trans => trans.from === fromState && trans.to === toState && trans.symbol === t.symbol)) {\n      minimizedAutomate.addTransition(fromState, toState, t.symbol);\n    }\n  });\n\n  // Définir l'état initial\n  minimizedAutomate.setStartState(stateMap.get(dfa.startState));\n  return minimizedAutomate;\n};\n\n// Composant React pour afficher l'automate avec les états initiaux et finaux\nconst AutomateVisualizer = ({\n  automate\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\xC9tats\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 682,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: automate.states.map(state => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [state, automate.endStates.has(state) && \" (Final)\", \" \", state === automate.startState && \" (Initial)\"]\n      }, state, true, {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 683,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Transitions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: automate.transitions.map((trans, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [trans.from, \" --(\", trans.symbol, \")--> \", trans.to]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 696,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 694,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 681,\n    columnNumber: 5\n  }, this);\n};\n_c3 = AutomateVisualizer;\nconst SyntaxTree = ({\n  node\n}) => {\n  // Si le node est une feuille (une string ou un élément simple), on l'affiche directement\n  if (typeof node === \"string\") {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: node\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 708,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Si le node est une liste, on affiche l'élément 0 (parent), et les enfants 1 et 2 (fils gauche et droit)\n  const [parent, leftChild, rightChild] = node;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      margin: \"20px\",\n      display: \"inline-block\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: parent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 719,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      children: [leftChild && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"50%\",\n          borderBottom: \"1px solid black\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 11\n      }, this), rightChild && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"50%\",\n          borderBottom: \"1px solid black\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 733,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 722,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-between\"\n      },\n      children: [leftChild && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginRight: \"10px\",\n          paddingTop: \"10px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(SyntaxTree, {\n          node: leftChild\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 742,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 741,\n        columnNumber: 11\n      }, this), rightChild && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: \"10px\",\n          paddingTop: \"10px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(SyntaxTree, {\n          node: rightChild\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 748,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 747,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 738,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 715,\n    columnNumber: 5\n  }, this);\n};\n\n// Composant principal de l'application\n_c4 = SyntaxTree;\nconst Automaton = () => {\n  _s();\n  const [arbre, setArbre] = useState(null); // Arbre syntaxique\n  const [automate, setAutomate] = useState(null); // Automate (NFA ou DFA)\n  const [detAutomate, setDetAutomate] = useState(null); // Automate déterminisé (DFA)\n  const [MinAutomate, setMinAutomate] = useState(null); // Automate Min (Min)\n  const [regex, setRegex] = useState(\"\");\n  const [fileContent, setFileContent] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [kmp, setKmp] = useState([]);\n  const [searchkmp, setSearchKmp] = useState(false);\n  const [searchAutomate, setSearchAutomate] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [iterations, setIterations] = useState(1);\n  const [executionTime, setExecutionTime] = useState(null); // Temps moyen d'exécution\n  const [showTime, setShowTime] = useState(false);\n  const [textTime, setTextTime] = useState(\"Test Performance\");\n  const [isAutomateReady, setIsAutomateReady] = useState(false);\n  const [isDeterminizeReady, setIsDeterminizeReady] = useState(false);\n  const [isMinimizeReady, setIsMinimizeReady] = useState(false);\n  //\n\n  //\n\n  const isKmp = () => {\n    if (regex.length > 0) {\n      if (regex.includes(\"|\") || regex.includes(\"*\") || regex.includes(\"+\") || regex.includes(\".\") || regex.includes(\"(\") || regex.includes(\")\") || regex.includes(\"ε\")) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n  };\n  // Fonction pour générer l'arbre syntaxique à partir de l'expression régulière\n  const handleGenerateArbre = async () => {\n    return new Promise(resolve => {\n      stateCounter = 0; // Réinitialiser le compteur d'état\n      const arbre = parseRegex(regex); // Générer l'arbre à partir du regex\n      setArbre(arbre); // Stocker l'arbre\n      setAutomate(null); // Réinitialiser l'automate\n      setDetAutomate(null); // Réinitialiser l'automate déterminisé\n      setMinAutomate(null); // Réinitialiser l'automate minimisé\n      resolve(); // Marquer la fonction comme terminée\n    });\n  };\n\n  // Fonction pour générer l'automate (NFA)\n  const handleGenerateAutomate = async () => {\n    return new Promise(resolve => {\n      stateCounter = 0; // Réinitialiser le compteur d'état\n      const automate = construireAutomate(regex); // Générer l'automate à partir du regex\n      setAutomate(automate); // Stocker l'automate NFA\n\n      setDetAutomate(null); // Réinitialiser l'automate déterminisé\n      setMinAutomate(null); // Réinitialiser l'automate minimisé\n      resolve(); // Marquer la fonction comme terminée\n    });\n  };\n\n  // Fonction pour déterminiser l'automate (NFA -> DFA)\n  const handleDeterminizeAutomate = async () => {\n    return new Promise(resolve => {\n      if (automate) {\n        const dfa = determinizeAutomate(automate); // Déterminiser l'automate\n        setDetAutomate(dfa); // Stocker l'automate déterminisé\n        setMinAutomate(null); // Réinitialiser l'automate minimisé\n      }\n      resolve(); // Marquer la fonction comme terminée\n    });\n  };\n\n  // Fonction pour minimiser l'automate déterminisé (DFA)\n  const handleMinimizeAutomate = async () => {\n    return new Promise(resolve => {\n      if (detAutomate) {\n        const minDfa = minimizeAutomate(detAutomate); // Minimiser l'automate déterminisé\n        setMinAutomate(minDfa); // Stocker l'automate minimisé\n      }\n      resolve(); // Marquer la fonction comme terminée\n    });\n  };\n\n  // Fonction de recherche utilisant l'automate\n  const handleSearch = async () => {\n    if (!MinAutomate) return; // Si l'automate minimisé est null, arrêter\n\n    const lines = fileContent.split(\"\\n\"); // Diviser le contenu du fichier par ligne\n    const results = lines.filter(line => TestTxt(MinAutomate, line)); // Tester chaque ligne\n\n    setSearchResults(results); // Stocker les résultats\n  };\n\n  // Fonction pour charger le fichier\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.onload = () => {\n      setFileContent(reader.result);\n    };\n    reader.readAsText(file);\n  };\n\n  // Fonction de recherche utilisant l'automate et mesurer le temps\n  const handleSearchTIME = async () => {\n    const totalExecutionTime = measureExecutionTime(fileContent, regex, iterations); // Mesurer le temps\n    await handleGenerateArbre(); // Attendre que l'arbre soit généré\n    await handleGenerateAutomate(); // Attendre que l'automate soit généré\n    await handleDeterminizeAutomate(); // Attendre que l'automate soit déterminisé\n    await handleMinimizeAutomate(); // Attendre que l'automate soit minimisé\n\n    if (!MinAutomate) return;\n    const lines = fileContent.split(\"\\n\"); // Diviser le contenu du fichier par ligne\n    const results = lines.filter(line => TestTxt(MinAutomate, line)); // Rechercher les lignes qui correspondent\n\n    setExecutionTime(totalExecutionTime); // Stocker le temps d'exécution Median\n    setSearchResults(results); // Stocker les résultats de la recherche\n  };\n\n  //\n\n  //\n\n  // Fonction de recherche utilisant KMP\n  // Fonction pour tester chaque ligne du fichier avec le pattern\n  const handleSearchKMP = () => {\n    const lines = fileContent.split(\"\\n\");\n    const res = [];\n    lines.forEach((line, index) => {\n      const {\n        positions,\n        lpsTable\n      } = KMPSearch(line, regex);\n      if (positions.length > 0) {\n        res.push({\n          lineNumber: index + 1,\n          lineText: line,\n          positions,\n          lpsTable\n        });\n      }\n    });\n    setSearchResults(res); // Stocker les résultats de la recherche\n  };\n  // Fonction pour tester chaque ligne du fichier avec le pattern et mesurer le temps\n  const handleSearchKMPTime = () => {\n    const lines = fileContent.split(\"\\n\");\n    const res = [];\n    const totalExecutionTime = measureExecutionTime(fileContent, regex, iterations); // Mesurer le temps\n    lines.forEach((line, index) => {\n      const {\n        positions,\n        lpsTable\n      } = KMPSearch(line, regex);\n      if (positions.length > 0) {\n        res.push({\n          lineNumber: index + 1,\n          lineText: line,\n          positions,\n          lpsTable\n        });\n      }\n    });\n    setExecutionTime(totalExecutionTime); // Stocker le temps d'exécution Median\n    setSearchResults(res); // Stocker les résultats de la recherche\n  };\n  const handleAll = async () => {\n    if (!regex || !fileContent) return;\n    setSearchResults([]); // Réinitialiser les résultats de la recherche\n\n    // Vérifier si on utilise KMP ou l'automate\n    if (isKmp()) {\n      setSearchKmp(true);\n      setSearchAutomate(false);\n      handleSearchKMP(); // Exécuter la recherche avec KMP\n    } else {\n      setSearchKmp(false);\n      setSearchAutomate(true);\n      try {\n        // Générer l'arbre\n        await handleGenerateArbre();\n\n        // Générer l'automate\n        await handleGenerateAutomate();\n\n        // Déterminiser l'automate\n        await handleDeterminizeAutomate();\n\n        // Minimiser l'automate déterminisé\n        await handleMinimizeAutomate();\n\n        // // Rechercher les lignes correspondantes\n        // if (MinAutomate) {\n        //   const lines = fileContent.split(\"\\n\"); // Diviser le contenu du fichier par lignes\n        //   const results = lines.filter((line) => TestTxt(MinAutomate, line)); // Rechercher les lignes qui correspondent\n        //   setSearchResults(results); // Stocker les résultats\n        //   console.log(\"zebzebi\");\n        // }\n      } catch (error) {\n        console.error(\"Erreur lors du traitement de l'automate :\", error);\n      }\n    }\n  };\n  const handleAllTime = () => {\n    if (!regex || !fileContent) return;\n    if (isKmp()) {\n      setSearchKmp(true);\n      setSearchAutomate(false);\n      handleSearchKMPTime();\n    } else {\n      setSearchKmp(false);\n      setSearchAutomate(true);\n      handleSearchTIME(); // rechercher dans le fichier\n    }\n  };\n\n  // useEffect(() => {\n  //   if (regex.trim() !== \"\" && fileContent) {\n  //     handleAll();\n  //   } else {\n  //     // Réinitialiser si le regex est vide\n  //     setSearchKmp(false);\n  //     setSearchAutomate(false);\n  //     setIsAutomateReady(false);\n  //     setIsDeterminizeReady(false);\n  //     setIsMinimizeReady(false);\n  //     setAutomate(null);\n  //     setDetAutomate(null);\n  //     setMinAutomate(null);\n  //     setSearchResults([]);\n  //   }\n  // }, [regex, fileContent]);\n\n  // Utiliser useEffect pour déclencher les étapes successives\n  useEffect(() => {\n    if (automate) {\n      handleDeterminizeAutomate(); // Déclencher la déterminisation après la génération de l'automate\n    }\n  }, [automate]);\n  useEffect(() => {\n    if (detAutomate) {\n      handleMinimizeAutomate(); // Déclencher la minimisation après la déterminisation de l'automate\n    }\n  }, [detAutomate]);\n  useEffect(() => {\n    if (MinAutomate) {\n      handleSearch(); // Déclencher la recherche après la minimisation de l'automate\n    }\n  }, [MinAutomate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"LoginImg \",\n    style: {\n      backdropFilter: \"blur(6px)\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \" vh-100 d-flex justify-content-center align-items-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \" card container py-5  w-50\",\n        style: {\n          minHeight: \"400px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            className: \"text-decoration-none text-primary\",\n            children: \"HomePage\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1036,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1035,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"mb-4\",\n          children: \"egrep Clone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1041,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-warning\",\n          onClick: () => {\n            if (showTime) {\n              setTextTime(\"Test Performance\");\n            } else {\n              setTextTime(\"Test egrep\");\n            }\n            setShowTime(!showTime);\n          },\n          children: textTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1043,\n          columnNumber: 11\n        }, this), showTime ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-3 d-flex flex-column justify-content-end\",\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"\",\n              children: [\"Regex:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                value: regex,\n                onChange: e => setRegex(e.target.value),\n                className: \"form-control shadow-sm\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1062,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1060,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1059,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-4 d-flex flex-column justify-content-end\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              onChange: handleFileUpload,\n              accept: \".txt\",\n              className: \"form-control shadow-sm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1070,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1069,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-2 d-flex flex-column justify-content-end \",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              className: \"form-control shadow-sm\",\n              placeholder: \"Enter number of iterations\",\n              value: iterations,\n              onChange: e => setIterations(parseInt(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1079,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1078,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-3 d-flex flex-column justify-content-end \",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleAllTime,\n              className: \"btn btn-primary shadow-sm\",\n              children: \"Rechercher\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1088,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1087,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1058,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-4 d-flex flex-column justify-content-end mb-3 mt-3\",\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"\",\n              children: [\"Regex:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                value: regex,\n                onChange: e => setRegex(e.target.value),\n                className: \"form-control\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1101,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1099,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1098,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-4 d-flex flex-column justify-content-end mb-3 mt-3\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              onChange: handleFileUpload,\n              accept: \".txt\",\n              className: \"form-control\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1109,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1108,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-4 d-flex flex-column justify-content-end mb-3 mt-3\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleAll,\n              className: \"btn btn-primary\",\n              children: \"Rechercher\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1117,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1116,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1097,\n          columnNumber: 13\n        }, this), searchkmp ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary mb-4\",\n            onClick: () => setShowModal(true) // Open modal\n            ,\n            children: \"Show Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1130,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"mb-3\",\n            children: \"R\\xE9sultats de la recherche : L'algorithme Knuth-Morris-Pratt (KMP)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1136,\n            columnNumber: 15\n          }, this), searchResults.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"list-group mb-4\",\n              children: searchResults.map((res, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"list-group-item\",\n                children: [res.lineNumber, \" | \", res.lineText, \" | position(s):\", \" \", res.positions.join(\", \")]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1144,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1142,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1150,\n              columnNumber: 19\n            }, this), showTime && executionTime !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: [\"Average Execution Time (Median):\", \" \", executionTime.toFixed(2), \" ms over \", iterations, \" \", \"iteration(s)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1154,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1153,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1141,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Modal, {\n            show: showModal,\n            onHide: () => setShowModal(false),\n            size: \"lg\",\n            centered: true,\n            children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n              children: [/*#__PURE__*/_jsxDEV(Modal.Title, {\n                children: \"Details\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1171,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"btn-close\",\n                onClick: () => setShowModal(false)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1173,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1170,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mb-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Carry Over (LPS Table)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1181,\n                  columnNumber: 21\n                }, this), searchResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: [\"Ligne \", result.lineNumber]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1185,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"Texte de la ligne : \", result.lineText]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1186,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"Positions : \", result.positions.join(\", \")]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1187,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"LPS Table : \", result.lpsTable.join(\", \")]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1188,\n                    columnNumber: 25\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1184,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1180,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1179,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1164,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1127,\n          columnNumber: 13\n        }, this) : null, searchAutomate ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\" \", searchResults.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-secondary mb-4\",\n              onClick: () => setShowModal(true) // Open modal\n              ,\n              children: \"Show Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1202,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"mb-3\",\n              children: \"R\\xE9sultats de la recherche : Automaton\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1208,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"list-group mb-4\",\n              children: searchResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"list-group-item\",\n                children: result\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1213,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1211,\n              columnNumber: 19\n            }, this), showTime && executionTime !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: [\"Average Execution Time (Median):\", \" \", executionTime.toFixed(2), \" ms over \", iterations, \" \", \"iteration(s)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1221,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1220,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1201,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Modal, {\n            show: showModal,\n            onHide: () => setShowModal(false),\n            size: \"lg\",\n            centered: true,\n            children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n              children: [/*#__PURE__*/_jsxDEV(Modal.Title, {\n                children: \"Details\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1238,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"btn-close\",\n                onClick: () => setShowModal(false)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1240,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1237,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n              children: [arbre && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mb-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Arbre syntaxique\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1249,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(SyntaxTree, {\n                  node: arbre\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1250,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: JSON.stringify(arbre, null, 3)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1251,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1248,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1254,\n                columnNumber: 19\n              }, this), automate && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mb-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Automate (NFA)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1257,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(AutomateVisualizer, {\n                  automate: automate\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1258,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1256,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1261,\n                columnNumber: 19\n              }, this), detAutomate && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mb-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Automate D\\xE9terminis\\xE9 (DFA)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1264,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(AutomateVisualizer, {\n                  automate: detAutomate\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1265,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1263,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1268,\n                columnNumber: 19\n              }, this), MinAutomate && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mb-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Automate Minimis\\xE9 (Min)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1271,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(AutomateVisualizer, {\n                  automate: MinAutomate\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1272,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1270,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1246,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1231,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1197,\n          columnNumber: 13\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1030,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1029,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1023,\n    columnNumber: 5\n  }, this);\n};\n_s(Automaton, \"sRPz6NHeNIjA99KxxECE8FTsNkQ=\");\n_c5 = Automaton;\nexport default Automaton;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"KMPSearch\");\n$RefreshReg$(_c2, \"TestTxt\");\n$RefreshReg$(_c3, \"AutomateVisualizer\");\n$RefreshReg$(_c4, \"SyntaxTree\");\n$RefreshReg$(_c5, \"Automaton\");","map":{"version":3,"names":["React","useState","useEffect","Link","Modal","jsxDEV","_jsxDEV","stateCounter","Automate","constructor","states","transitions","startState","endStates","Set","addState","newState","push","addTransition","from","to","symbol","setStartState","state","setEndState","add","getAutomate","createBaseAutomate","automate","start","end","concatenateAutomates","automate1","automate2","values","next","value","unionAutomates","forEach","kleeneAutomate","plusAutomate","ajouterConcatImpl","regex","resultat","i","length","char","nextChar","parseRegex","precedence","operators","output","isOperator","includes","applyOperator","operator","pop","b","a","j","openParentheses","subexpression","slice","parseArbre","arbre","op","args","result","Error","computeLPSArray","pat","M","lps","len","KMPSearch","txt","N","lpsTable","Array","fill","positions","_c","measureExecutionTime","numIterations","totalTime","times","startTime","performance","now","endTime","iterationTime","sort","medianTime","Math","floor","console","log","toFixed","construireAutomate","estAccepte","chaine","index","etatCourant","has","filter","t","trans","testMotifDansMot","mot","sousChaine","TestTxt","line","mots","split","_c2","epsilonClosure","closure","stack","currentState","epsilonTransitions","transition","epsilonClosureSet","move","nextStates","determinizeAutomate","nfa","dfa","alphabet","map","s","initialClosure","dfaStatesMap","Map","set","JSON","stringify","get","unprocessedStates","currentSet","currentStateId","some","nextSet","size","nextSetKey","removeInaccessibleStates","reachableStates","minimizeAutomate","partitions","stable","newPartitions","partitionsCopy","partition","partitionMap","signature","find","targetState","partitionIndex","findIndex","p","join","minimizedAutomate","stateMap","fromState","toState","AutomateVisualizer","children","fileName","_jsxFileName","lineNumber","columnNumber","idx","_c3","SyntaxTree","node","parent","leftChild","rightChild","style","textAlign","margin","display","justifyContent","alignItems","width","borderBottom","marginRight","paddingTop","marginLeft","_c4","Automaton","_s","setArbre","setAutomate","detAutomate","setDetAutomate","MinAutomate","setMinAutomate","setRegex","fileContent","setFileContent","searchResults","setSearchResults","kmp","setKmp","searchkmp","setSearchKmp","searchAutomate","setSearchAutomate","showModal","setShowModal","iterations","setIterations","executionTime","setExecutionTime","showTime","setShowTime","textTime","setTextTime","isAutomateReady","setIsAutomateReady","isDeterminizeReady","setIsDeterminizeReady","isMinimizeReady","setIsMinimizeReady","isKmp","handleGenerateArbre","Promise","resolve","handleGenerateAutomate","handleDeterminizeAutomate","handleMinimizeAutomate","minDfa","handleSearch","lines","results","handleFileUpload","event","file","target","files","reader","FileReader","onload","readAsText","handleSearchTIME","totalExecutionTime","handleSearchKMP","res","lineText","handleSearchKMPTime","handleAll","error","handleAllTime","className","backdropFilter","minHeight","onClick","onChange","e","type","accept","placeholder","parseInt","show","onHide","centered","Header","Title","Body","_c5","$RefreshReg$"],"sources":["C:/Users/Musha/Desktop/DAAR/projet/Projet 1/Automaton-/Client/src/app/automate.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Modal } from \"react-bootstrap\";\r\n\r\n// Compteur d'état global pour assurer des identifiants uniques\r\nlet stateCounter = 0;\r\n\r\n// Classe Automate pour stocker les états et transitions\r\nclass Automate {\r\n  constructor() {\r\n    this.states = [];\r\n    this.transitions = [];\r\n    this.startState = null;\r\n    this.endStates = new Set(); // Utilisation d'un ensemble pour gérer plusieurs états finaux\r\n  }\r\n\r\n  // Fonction pour ajouter un état avec un identifiant unique\r\n  addState() {\r\n    const newState = stateCounter++;\r\n    this.states.push(newState);\r\n    return newState;\r\n  }\r\n\r\n  addTransition(from, to, symbol) {\r\n    this.transitions.push({ from, to, symbol });\r\n  }\r\n\r\n  setStartState(state) {\r\n    this.startState = state;\r\n  }\r\n\r\n  setEndState(state) {\r\n    this.endStates.add(state); // Ajouter à l'ensemble des états finaux\r\n  }\r\n\r\n  getAutomate() {\r\n    return {\r\n      states: this.states,\r\n      transitions: this.transitions,\r\n      startState: this.startState,\r\n      endStates: this.endStates, // Retourner les états finaux sous forme d'ensemble\r\n    };\r\n  }\r\n}\r\n\r\n// Fonction pour créer un automate pour un symbole\r\nconst createBaseAutomate = (symbol) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState();\r\n  const end = automate.addState();\r\n  automate.addTransition(start, end, symbol);\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n  return automate;\r\n};\r\n\r\n// Fonction pour concaténer deux automates\r\nconst concatenateAutomates = (automate1, automate2) => {\r\n  const automate = new Automate();\r\n\r\n  // Copier les états et transitions des deux automates\r\n  automate.states = [...automate1.states, ...automate2.states];\r\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\r\n\r\n  // Ajouter une transition epsilon entre la fin du premier automate et le début du second\r\n  automate.addTransition(\r\n    automate1.endStates.values().next().value,\r\n    automate2.startState,\r\n    \"ε\"\r\n  );\r\n\r\n  // Définir les nouveaux états de départ et de fin\r\n  automate.setStartState(automate1.startState);\r\n  automate.setEndState(automate2.endStates.values().next().value);\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour gérer l'union de deux automates (opérateur |)\r\nconst unionAutomates = (automate1, automate2) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState(); // Nouvel état de départ\r\n  const end = automate.addState(); // Nouvel état de fin\r\n\r\n  // Copier les états et transitions des deux automates\r\n  automate.states = [...automate1.states, ...automate2.states, start, end];\r\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\r\n\r\n  // Ajouter des transitions epsilon du nouvel état initial vers les deux sous-automates\r\n  automate.addTransition(start, automate1.startState, \"ε\");\r\n  automate.addTransition(start, automate2.startState, \"ε\");\r\n\r\n  // Ajouter des transitions epsilon des états finaux des sous-automates vers le nouvel état final\r\n  automate1.endStates.forEach((state) => {\r\n    automate.addTransition(state, end, \"ε\");\r\n  });\r\n  automate2.endStates.forEach((state) => {\r\n    automate.addTransition(state, end, \"ε\");\r\n  });\r\n\r\n  // Définir les nouveaux états de départ et de fin\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour gérer la fermeture de Kleene (opérateur *)\r\nconst kleeneAutomate = (automate1) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState(); // Nouvel état de départ\r\n  const end = automate.addState(); // Nouvel état de fin\r\n\r\n  // Copier les états et transitions du premier automate\r\n  automate.states = [...automate1.states, start, end];\r\n  automate.transitions = [...automate1.transitions];\r\n\r\n  // Ajouter des transitions epsilon pour la fermeture de Kleene\r\n  automate.addTransition(start, automate1.startState, \"ε\");\r\n  automate.addTransition(automate1.endStates.values().next().value, end, \"ε\");\r\n  automate.addTransition(\r\n    automate1.endStates.values().next().value,\r\n    automate1.startState,\r\n    \"ε\"\r\n  ); // Boucle\r\n  automate.addTransition(start, end, \"ε\"); // Transition directe\r\n\r\n  // Définir les nouveaux états de départ et de fin\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour gérer l'opérateur +\r\nconst plusAutomate = (automate1) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState(); // Nouvel état de départ\r\n  const end = automate.addState(); // Nouvel état de fin\r\n\r\n  // Copier les états et transitions du premier automate\r\n  automate.states = [...automate1.states, start, end];\r\n  automate.transitions = [...automate1.transitions];\r\n\r\n  // Ajouter des transitions epsilon pour l'opérateur +\r\n  automate.addTransition(start, automate1.startState, \"ε\");\r\n  automate.addTransition(automate1.endStates.values().next().value, end, \"ε\");\r\n  automate.addTransition(\r\n    automate1.endStates.values().next().value,\r\n    automate1.startState,\r\n    \"ε\"\r\n  ); // Boucle\r\n\r\n  // Définir les nouveaux états de départ et de fin\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour insérer les concaténations implicites dans une regex\r\nconst ajouterConcatImpl = (regex) => {\r\n  let resultat = \"\";\r\n\r\n  for (let i = 0; i < regex.length; i++) {\r\n    const char = regex[i];\r\n    resultat += char;\r\n\r\n    // Ajouter une concaténation implicite si nécessaire\r\n    if (i + 1 < regex.length) {\r\n      const nextChar = regex[i + 1];\r\n\r\n      // Condition pour ajouter une concaténation implicite\r\n      if (\r\n        char !== \"(\" &&\r\n        char !== \"|\" &&\r\n        char !== \".\" && // Si le caractère actuel n'est pas un opérateur\r\n        nextChar !== \")\" &&\r\n        nextChar !== \"|\" &&\r\n        nextChar !== \"*\" &&\r\n        nextChar !== \"+\" &&\r\n        nextChar !== \".\" // Si le prochain caractère n'est pas un opérateur\r\n      ) {\r\n        resultat += \".\"; // Ajouter une concaténation explicite\r\n      }\r\n    }\r\n  }\r\n\r\n  return resultat;\r\n};\r\n\r\n// Fonction pour parser une expression régulière en respectant les priorités et les parenthèses\r\nconst parseRegex = (regex) => {\r\n  // Ajouter les concaténations implicites avant de parser\r\n  regex = ajouterConcatImpl(regex);\r\n\r\n  const precedence = { \"|\": 1, \".\": 2, \"*\": 3, \"+\": 3 };\r\n  const operators = [];\r\n  const output = [];\r\n\r\n  const isOperator = (char) => [\"|\", \".\", \"*\", \"+\"].includes(char);\r\n\r\n  const applyOperator = () => {\r\n    const operator = operators.pop();\r\n    if (operator === \".\") {\r\n      const b = output.pop();\r\n      const a = output.pop();\r\n      output.push([\".\", a, b]);\r\n    } else if (operator === \"|\") {\r\n      const b = output.pop();\r\n      const a = output.pop();\r\n      output.push([\"|\", a, b]);\r\n    } else if (operator === \"*\") {\r\n      const a = output.pop();\r\n      output.push([\"*\", a]);\r\n    } else if (operator === \"+\") {\r\n      const a = output.pop();\r\n      output.push([\"+\", a]);\r\n    }\r\n  };\r\n\r\n  let i = 0;\r\n  while (i < regex.length) {\r\n    const char = regex[i];\r\n\r\n    if (char === \"(\") {\r\n      // Trouver la sous-expression entre parenthèses\r\n      let j = i;\r\n      let openParentheses = 1;\r\n      while (openParentheses > 0 && ++j < regex.length) {\r\n        if (regex[j] === \"(\") openParentheses++;\r\n        if (regex[j] === \")\") openParentheses--;\r\n      }\r\n\r\n      // Appeler récursivement `parseRegex` sur la sous-expression\r\n      const subexpression = regex.slice(i + 1, j);\r\n      output.push(parseRegex(subexpression));\r\n      i = j; // Avancer jusqu'à la parenthèse fermante\r\n    } else if (!isOperator(char)) {\r\n      output.push(char); // Ajouter les symboles au output\r\n    } else {\r\n      while (\r\n        operators.length > 0 &&\r\n        operators[operators.length - 1] !== \"(\" &&\r\n        precedence[operators[operators.length - 1]] >= precedence[char]\r\n      ) {\r\n        applyOperator();\r\n      }\r\n      operators.push(char);\r\n    }\r\n    i++;\r\n  }\r\n\r\n  // Appliquer les opérateurs restants\r\n  while (operators.length > 0) {\r\n    applyOperator();\r\n  }\r\n\r\n  return output[0];\r\n};\r\n\r\n// Fonction pour parcourir l'arbre syntaxique et créer l'automate\r\nconst parseArbre = (arbre) => {\r\n  if (typeof arbre === \"string\") {\r\n    return createBaseAutomate(arbre); // Si c'est un symbole\r\n  }\r\n\r\n  const [op, ...args] = arbre;\r\n\r\n  switch (op) {\r\n    case \".\": {\r\n      // Concaténation\r\n      let result = parseArbre(args[0]);\r\n      for (let i = 1; i < args.length; i++) {\r\n        result = concatenateAutomates(result, parseArbre(args[i]));\r\n      }\r\n      return result;\r\n    }\r\n\r\n    case \"|\": {\r\n      // Union\r\n      let result = parseArbre(args[0]);\r\n      for (let i = 1; i < args.length; i++) {\r\n        result = unionAutomates(result, parseArbre(args[i]));\r\n      }\r\n      return result;\r\n    }\r\n\r\n    case \"*\": {\r\n      // Fermeture de Kleene\r\n      return kleeneAutomate(parseArbre(args[0]));\r\n    }\r\n\r\n    case \"+\": {\r\n      // L'opérateur +\r\n      return plusAutomate(parseArbre(args[0]));\r\n    }\r\n\r\n    default:\r\n      throw new Error(`Opérateur non supporté: ${op}`);\r\n  }\r\n};\r\n\r\n//\r\n\r\n//\r\n\r\n// Fonction pour calculer le tableau LPS (Longest Prefix Suffix)\r\nconst computeLPSArray = (pat, M, lps) => {\r\n  let len = 0;\r\n  let i = 1;\r\n  lps[0] = 0;\r\n\r\n  while (i < M) {\r\n    if (pat[i] === pat[len]) {\r\n      len++;\r\n      lps[i] = len;\r\n      i++;\r\n    } else {\r\n      if (len !== 0) {\r\n        len = lps[len - 1];\r\n      } else {\r\n        lps[i] = 0;\r\n        i++;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// Algorithme KMP\r\nconst KMPSearch = (txt, pat) => {\r\n  const M = pat.length;\r\n  const N = txt.length;\r\n\r\n  const lpsTable = new Array(M).fill(0);\r\n  computeLPSArray(pat, M, lpsTable);\r\n\r\n  let i = 0; // Index pour txt[]\r\n  let j = 0; // Index pour pat[]\r\n  const positions = [];\r\n\r\n  while (i < N) {\r\n    if (pat[j] === txt[i]) {\r\n      i++;\r\n      j++;\r\n    }\r\n\r\n    if (j === M) {\r\n      positions.push(i - j);\r\n      j = lpsTable[j - 1];\r\n    } else if (i < N && pat[j] !== txt[i]) {\r\n      if (j !== 0) {\r\n        j = lpsTable[j - 1];\r\n      } else {\r\n        i++;\r\n      }\r\n    }\r\n  }\r\n\r\n  return { positions, lpsTable };\r\n};\r\n\r\n// Fonction pour mesurer le temps moyen d'exécution sur plusieurs itérations\r\nconst measureExecutionTime = (txt, pat, numIterations) => {\r\n  let totalTime = 0;\r\n  let times = [];\r\n\r\n  for (let i = 0; i < numIterations; i++) {\r\n    const startTime = performance.now();\r\n    KMPSearch(txt, pat);\r\n    const endTime = performance.now();\r\n\r\n    const iterationTime = endTime - startTime;\r\n    if (iterationTime > 0.1) {\r\n      // Filtre les valeurs proches de 0\r\n      times.push(iterationTime);\r\n      totalTime += iterationTime;\r\n    }\r\n  }\r\n\r\n  // Trie les temps et trouve la médiane\r\n  times.sort((a, b) => a - b);\r\n  const medianTime = times[Math.floor(times.length / 2)];\r\n  console.log(`Median time: ${medianTime.toFixed(2)} ms`);\r\n  return medianTime;\r\n};\r\n\r\n//\r\n\r\n//\r\n\r\n//\r\n\r\n// Fonction pour générer l'automate à partir d'une expression régulière\r\nconst construireAutomate = (regex) => {\r\n  const arbre = parseRegex(regex); // Construire l'arbre syntaxique à partir du regex\r\n\r\n  return parseArbre(arbre); // Construire l'automate à partir de l'arbre syntaxique\r\n};\r\n\r\n// Fonction pour tester si une sous-chaîne est acceptée par l'automate\r\nconst estAccepte = (\r\n  automate,\r\n  chaine,\r\n  index = 0,\r\n  etatCourant = automate.startState\r\n) => {\r\n  if (index === chaine.length) {\r\n    return automate.endStates.has(etatCourant); // Vérifier si l'état courant est un état final\r\n  }\r\n\r\n  const symbol = chaine[index];\r\n  let transitions = automate.transitions.filter((t) => t.from === etatCourant);\r\n\r\n  // Parcourir les transitions epsilon\r\n  for (let trans of transitions) {\r\n    if (trans.symbol === \"ε\") {\r\n      if (estAccepte(automate, chaine, index, trans.to)) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Parcourir les transitions pour le symbole courant\r\n  for (let trans of transitions) {\r\n    if (trans.symbol === symbol) {\r\n      if (estAccepte(automate, chaine, index + 1, trans.to)) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n// Fonction pour tester si une sous-chaîne (motif) est présente dans un mot\r\nconst testMotifDansMot = (automate, mot) => {\r\n  // Essayer toutes les sous-chaînes du mot pour trouver le motif\r\n  for (let i = 0; i < mot.length; i++) {\r\n    for (let j = i; j <= mot.length; j++) {\r\n      const sousChaine = mot.slice(i, j);\r\n      if (estAccepte(automate, sousChaine)) {\r\n        return true; // Si une sous-chaîne correspond au motif, retourner vrai\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n// Fonction pour tester toutes les sous-chaînes acceptées dans une ligne de texte\r\nconst TestTxt = (automate, line) => {\r\n  const mots = line.split(\" \"); // Diviser la ligne en mots\r\n  for (let mot of mots) {\r\n    if (testMotifDansMot(automate, mot)) {\r\n      return true; // Si un mot contient le motif, retourner vrai\r\n    }\r\n  }\r\n  return false; // Si aucun mot ne contient le motif, retourner faux\r\n};\r\n\r\n// Fonction pour calculer la fermeture epsilon d'un état donné\r\nconst epsilonClosure = (automate, state) => {\r\n  const closure = new Set([state]);\r\n  const stack = [state];\r\n\r\n  while (stack.length > 0) {\r\n    const currentState = stack.pop();\r\n    const epsilonTransitions = automate.transitions.filter(\r\n      (t) => t.from === currentState && t.symbol === \"ε\"\r\n    );\r\n\r\n    for (const transition of epsilonTransitions) {\r\n      if (!closure.has(transition.to)) {\r\n        closure.add(transition.to);\r\n        stack.push(transition.to);\r\n      }\r\n    }\r\n  }\r\n\r\n  return closure;\r\n};\r\n\r\n// Fonction pour calculer la fermeture epsilon d'un ensemble d'états\r\nconst epsilonClosureSet = (automate, states) => {\r\n  let closure = new Set();\r\n  for (const state of states) {\r\n    closure = new Set([...closure, ...epsilonClosure(automate, state)]);\r\n  }\r\n  return closure;\r\n};\r\n\r\n// Fonction pour calculer la transition d'un ensemble d'états sur un symbole donné\r\nconst move = (automate, states, symbol) => {\r\n  const nextStates = new Set();\r\n  for (const state of states) {\r\n    const transitions = automate.transitions.filter(\r\n      (t) => t.from === state && t.symbol === symbol\r\n    );\r\n    for (const transition of transitions) {\r\n      nextStates.add(transition.to);\r\n    }\r\n  }\r\n  return nextStates;\r\n};\r\n\r\n// Fonction pour déterminiser un automate non déterministe avec epsilon transitions\r\nconst determinizeAutomate = (nfa) => {\r\n  const dfa = new Automate();\r\n  const alphabet = Array.from(\r\n    new Set(nfa.transitions.map((t) => t.symbol).filter((s) => s !== \"ε\"))\r\n  );\r\n\r\n  const initialClosure = epsilonClosure(nfa, nfa.startState);\r\n  const dfaStatesMap = new Map();\r\n  dfaStatesMap.set(JSON.stringify([...initialClosure]), dfa.addState());\r\n  dfa.setStartState(dfaStatesMap.get(JSON.stringify([...initialClosure])));\r\n\r\n  const unprocessedStates = [initialClosure];\r\n\r\n  while (unprocessedStates.length > 0) {\r\n    const currentSet = unprocessedStates.pop();\r\n    const currentStateId = dfaStatesMap.get(JSON.stringify([...currentSet]));\r\n\r\n    // Vérifier si l'un des états de l'ensemble est un état final du NFA\r\n    if ([...currentSet].some((state) => nfa.endStates.has(state))) {\r\n      dfa.setEndState(currentStateId); // Marquer cet état comme final dans le DFA\r\n    }\r\n\r\n    for (const symbol of alphabet) {\r\n      const nextSet = epsilonClosureSet(nfa, move(nfa, currentSet, symbol));\r\n\r\n      if (nextSet.size === 0) continue; // Ignorer les ensembles vides\r\n\r\n      const nextSetKey = JSON.stringify([...nextSet]);\r\n\r\n      if (!dfaStatesMap.has(nextSetKey)) {\r\n        const newState = dfa.addState();\r\n        dfaStatesMap.set(nextSetKey, newState);\r\n        unprocessedStates.push(nextSet);\r\n      }\r\n\r\n      dfa.addTransition(currentStateId, dfaStatesMap.get(nextSetKey), symbol);\r\n    }\r\n  }\r\n\r\n  return dfa;\r\n};\r\n\r\nconst removeInaccessibleStates = (automate) => {\r\n  const reachableStates = new Set([automate.startState]);\r\n  const stack = [automate.startState];\r\n\r\n  while (stack.length > 0) {\r\n    const currentState = stack.pop();\r\n    const transitions = automate.transitions.filter(\r\n      (t) => t.from === currentState\r\n    );\r\n\r\n    for (const transition of transitions) {\r\n      if (!reachableStates.has(transition.to)) {\r\n        reachableStates.add(transition.to);\r\n        stack.push(transition.to);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Filtrer les états et les transitions pour ne conserver que les états accessibles\r\n  automate.states = automate.states.filter((state) =>\r\n    reachableStates.has(state)\r\n  );\r\n  automate.transitions = automate.transitions.filter(\r\n    (t) => reachableStates.has(t.from) && reachableStates.has(t.to)\r\n  );\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour effectuer la minimisation avec l'algorithme de Moore\r\nconst minimizeAutomate = (dfa) => {\r\n  // Étape 1: Supprimer les états inaccessibles\r\n  removeInaccessibleStates(dfa);\r\n\r\n  // Étape 2: Partitionner les états en deux ensembles: états finaux et non finaux\r\n  let partitions = [new Set(), new Set()];\r\n  dfa.states.forEach((state) => {\r\n    if (dfa.endStates.has(state)) {\r\n      partitions[0].add(state); // États finaux\r\n    } else {\r\n      partitions[1].add(state); // États non finaux\r\n    }\r\n  });\r\n\r\n  let stable = false;\r\n  const alphabet = Array.from(new Set(dfa.transitions.map((t) => t.symbol)));\r\n\r\n  // Étape 3: Raffiner les partitions\r\n  while (!stable) {\r\n    stable = true;\r\n    const newPartitions = [];\r\n\r\n    const partitionsCopy = partitions.slice(); // Create a copy of partitions\r\n\r\n    for (const partition of partitionsCopy) {\r\n      const partitionMap = new Map();\r\n\r\n      for (const state of partition) {\r\n        const signature = alphabet\r\n          .map((symbol) => {\r\n            const transition = dfa.transitions.find(\r\n              (t) => t.from === state && t.symbol === symbol\r\n            );\r\n            const targetState = transition ? transition.to : null;\r\n\r\n            // Trouver la partition contenant l'état cible\r\n            const partitionIndex = partitionsCopy.findIndex((p) =>\r\n              p.has(targetState)\r\n            );\r\n            return partitionIndex;\r\n          })\r\n          .join(\"-\");\r\n\r\n        if (!partitionMap.has(signature)) {\r\n          partitionMap.set(signature, new Set());\r\n        }\r\n        partitionMap.get(signature).add(state);\r\n      }\r\n\r\n      // Ajouter les nouvelles partitions\r\n      newPartitions.push(...partitionMap.values());\r\n    }\r\n\r\n    // Si les partitions ont changé, on continue la boucle\r\n    if (newPartitions.length !== partitions.length) {\r\n      stable = false;\r\n    }\r\n\r\n    partitions = newPartitions;\r\n  }\r\n\r\n  // Étape 4: Construire le nouvel automate minimisé\r\n  const minimizedAutomate = new Automate();\r\n  const stateMap = new Map(); // Map pour relier les anciens états aux nouveaux états\r\n\r\n  partitions.forEach((partition, index) => {\r\n    const newState = minimizedAutomate.addState();\r\n    partition.forEach((state) => stateMap.set(state, newState));\r\n\r\n    // Marquer l'état comme final s'il contient un ancien état final\r\n    if ([...partition].some((state) => dfa.endStates.has(state))) {\r\n      minimizedAutomate.setEndState(newState);\r\n    }\r\n  });\r\n\r\n  // Recréer les transitions dans l'automate minimisé sans duplicata\r\n  dfa.transitions.forEach((t) => {\r\n    const fromState = stateMap.get(t.from);\r\n    const toState = stateMap.get(t.to);\r\n\r\n    // Vérifier si la transition existe déjà\r\n    if (\r\n      !minimizedAutomate.transitions.some(\r\n        (trans) =>\r\n          trans.from === fromState &&\r\n          trans.to === toState &&\r\n          trans.symbol === t.symbol\r\n      )\r\n    ) {\r\n      minimizedAutomate.addTransition(fromState, toState, t.symbol);\r\n    }\r\n  });\r\n\r\n  // Définir l'état initial\r\n  minimizedAutomate.setStartState(stateMap.get(dfa.startState));\r\n\r\n  return minimizedAutomate;\r\n};\r\n\r\n// Composant React pour afficher l'automate avec les états initiaux et finaux\r\nconst AutomateVisualizer = ({ automate }) => {\r\n  return (\r\n    <div>\r\n      <h3>États</h3>\r\n      <ul>\r\n        {automate.states.map((state) => (\r\n          <li key={state}>\r\n            {state}\r\n            {automate.endStates.has(state) && \" (Final)\"}{\" \"}\r\n            {/* Vérifie si l'état est final */}\r\n            {state === automate.startState && \" (Initial)\"}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <h3>Transitions</h3>\r\n      <ul>\r\n        {automate.transitions.map((trans, idx) => (\r\n          <li key={idx}>\r\n            {trans.from} --({trans.symbol})--&gt; {trans.to}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SyntaxTree = ({ node }) => {\r\n  // Si le node est une feuille (une string ou un élément simple), on l'affiche directement\r\n  if (typeof node === \"string\") {\r\n    return <span>{node}</span>;\r\n  }\r\n\r\n  // Si le node est une liste, on affiche l'élément 0 (parent), et les enfants 1 et 2 (fils gauche et droit)\r\n  const [parent, leftChild, rightChild] = node;\r\n\r\n  return (\r\n    <div\r\n      style={{ textAlign: \"center\", margin: \"20px\", display: \"inline-block\" }}\r\n    >\r\n      {/* Affichage du parent */}\r\n      <div>{parent}</div>\r\n\r\n      {/* Connecteurs entre parent et enfants */}\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        {leftChild && (\r\n          <div style={{ width: \"50%\", borderBottom: \"1px solid black\" }}></div>\r\n        )}\r\n        {rightChild && (\r\n          <div style={{ width: \"50%\", borderBottom: \"1px solid black\" }}></div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Conteneur pour les enfants */}\r\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n        {/* Fils gauche */}\r\n        {leftChild && (\r\n          <div style={{ marginRight: \"10px\", paddingTop: \"10px\" }}>\r\n            <SyntaxTree node={leftChild} />\r\n          </div>\r\n        )}\r\n        {/* Fils droit */}\r\n        {rightChild && (\r\n          <div style={{ marginLeft: \"10px\", paddingTop: \"10px\" }}>\r\n            <SyntaxTree node={rightChild} />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Composant principal de l'application\r\nconst Automaton = () => {\r\n  const [arbre, setArbre] = useState(null); // Arbre syntaxique\r\n  const [automate, setAutomate] = useState(null); // Automate (NFA ou DFA)\r\n  const [detAutomate, setDetAutomate] = useState(null); // Automate déterminisé (DFA)\r\n  const [MinAutomate, setMinAutomate] = useState(null); // Automate Min (Min)\r\n  const [regex, setRegex] = useState(\"\");\r\n  const [fileContent, setFileContent] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [kmp, setKmp] = useState([]);\r\n  const [searchkmp, setSearchKmp] = useState(false);\r\n  const [searchAutomate, setSearchAutomate] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [iterations, setIterations] = useState(1);\r\n  const [executionTime, setExecutionTime] = useState(null); // Temps moyen d'exécution\r\n  const [showTime, setShowTime] = useState(false);\r\n  const [textTime, setTextTime] = useState(\"Test Performance\");\r\n  const [isAutomateReady, setIsAutomateReady] = useState(false);\r\n  const [isDeterminizeReady, setIsDeterminizeReady] = useState(false);\r\n  const [isMinimizeReady, setIsMinimizeReady] = useState(false);\r\n  //\r\n\r\n  //\r\n\r\n  const isKmp = () => {\r\n    if (regex.length > 0) {\r\n      if (\r\n        regex.includes(\"|\") ||\r\n        regex.includes(\"*\") ||\r\n        regex.includes(\"+\") ||\r\n        regex.includes(\".\") ||\r\n        regex.includes(\"(\") ||\r\n        regex.includes(\")\") ||\r\n        regex.includes(\"ε\")\r\n      ) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    }\r\n  };\r\n  // Fonction pour générer l'arbre syntaxique à partir de l'expression régulière\r\n  const handleGenerateArbre = async () => {\r\n    return new Promise((resolve) => {\r\n      stateCounter = 0; // Réinitialiser le compteur d'état\r\n      const arbre = parseRegex(regex); // Générer l'arbre à partir du regex\r\n      setArbre(arbre); // Stocker l'arbre\r\n      setAutomate(null); // Réinitialiser l'automate\r\n      setDetAutomate(null); // Réinitialiser l'automate déterminisé\r\n      setMinAutomate(null); // Réinitialiser l'automate minimisé\r\n      resolve(); // Marquer la fonction comme terminée\r\n    });\r\n  };\r\n\r\n  // Fonction pour générer l'automate (NFA)\r\n  const handleGenerateAutomate = async () => {\r\n    return new Promise((resolve) => {\r\n      stateCounter = 0; // Réinitialiser le compteur d'état\r\n      const automate = construireAutomate(regex); // Générer l'automate à partir du regex\r\n      setAutomate(automate); // Stocker l'automate NFA\r\n\r\n      setDetAutomate(null); // Réinitialiser l'automate déterminisé\r\n      setMinAutomate(null); // Réinitialiser l'automate minimisé\r\n      resolve(); // Marquer la fonction comme terminée\r\n    });\r\n  };\r\n\r\n  // Fonction pour déterminiser l'automate (NFA -> DFA)\r\n  const handleDeterminizeAutomate = async () => {\r\n    return new Promise((resolve) => {\r\n      if (automate) {\r\n        const dfa = determinizeAutomate(automate); // Déterminiser l'automate\r\n        setDetAutomate(dfa); // Stocker l'automate déterminisé\r\n        setMinAutomate(null); // Réinitialiser l'automate minimisé\r\n      }\r\n      resolve(); // Marquer la fonction comme terminée\r\n    });\r\n  };\r\n\r\n  // Fonction pour minimiser l'automate déterminisé (DFA)\r\n  const handleMinimizeAutomate = async () => {\r\n    return new Promise((resolve) => {\r\n      if (detAutomate) {\r\n        const minDfa = minimizeAutomate(detAutomate); // Minimiser l'automate déterminisé\r\n        setMinAutomate(minDfa); // Stocker l'automate minimisé\r\n      }\r\n      resolve(); // Marquer la fonction comme terminée\r\n    });\r\n  };\r\n\r\n  // Fonction de recherche utilisant l'automate\r\n  const handleSearch = async () => {\r\n    if (!MinAutomate) return; // Si l'automate minimisé est null, arrêter\r\n\r\n    const lines = fileContent.split(\"\\n\"); // Diviser le contenu du fichier par ligne\r\n    const results = lines.filter((line) => TestTxt(MinAutomate, line)); // Tester chaque ligne\r\n\r\n    setSearchResults(results); // Stocker les résultats\r\n  };\r\n\r\n  // Fonction pour charger le fichier\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      setFileContent(reader.result);\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  // Fonction de recherche utilisant l'automate et mesurer le temps\r\n  const handleSearchTIME = async () => {\r\n    const totalExecutionTime = measureExecutionTime(\r\n      fileContent,\r\n      regex,\r\n      iterations\r\n    ); // Mesurer le temps\r\n    await handleGenerateArbre(); // Attendre que l'arbre soit généré\r\n    await handleGenerateAutomate(); // Attendre que l'automate soit généré\r\n    await handleDeterminizeAutomate(); // Attendre que l'automate soit déterminisé\r\n    await handleMinimizeAutomate(); // Attendre que l'automate soit minimisé\r\n\r\n    if (!MinAutomate) return;\r\n    const lines = fileContent.split(\"\\n\"); // Diviser le contenu du fichier par ligne\r\n    const results = lines.filter((line) => TestTxt(MinAutomate, line)); // Rechercher les lignes qui correspondent\r\n\r\n    setExecutionTime(totalExecutionTime); // Stocker le temps d'exécution Median\r\n    setSearchResults(results); // Stocker les résultats de la recherche\r\n  };\r\n\r\n  //\r\n\r\n  //\r\n\r\n  // Fonction de recherche utilisant KMP\r\n  // Fonction pour tester chaque ligne du fichier avec le pattern\r\n  const handleSearchKMP = () => {\r\n    const lines = fileContent.split(\"\\n\");\r\n    const res = [];\r\n    lines.forEach((line, index) => {\r\n      const { positions, lpsTable } = KMPSearch(line, regex);\r\n      if (positions.length > 0) {\r\n        res.push({\r\n          lineNumber: index + 1,\r\n          lineText: line,\r\n          positions,\r\n          lpsTable,\r\n        });\r\n      }\r\n    });\r\n    setSearchResults(res); // Stocker les résultats de la recherche\r\n  };\r\n  // Fonction pour tester chaque ligne du fichier avec le pattern et mesurer le temps\r\n  const handleSearchKMPTime = () => {\r\n    const lines = fileContent.split(\"\\n\");\r\n    const res = [];\r\n    const totalExecutionTime = measureExecutionTime(\r\n      fileContent,\r\n      regex,\r\n      iterations\r\n    ); // Mesurer le temps\r\n    lines.forEach((line, index) => {\r\n      const { positions, lpsTable } = KMPSearch(line, regex);\r\n      if (positions.length > 0) {\r\n        res.push({\r\n          lineNumber: index + 1,\r\n          lineText: line,\r\n          positions,\r\n          lpsTable,\r\n        });\r\n      }\r\n    });\r\n\r\n    setExecutionTime(totalExecutionTime); // Stocker le temps d'exécution Median\r\n    setSearchResults(res); // Stocker les résultats de la recherche\r\n  };\r\n\r\n  const handleAll = async () => {\r\n    if (!regex || !fileContent) return;\r\n    setSearchResults([]); // Réinitialiser les résultats de la recherche\r\n\r\n    // Vérifier si on utilise KMP ou l'automate\r\n    if (isKmp()) {\r\n      setSearchKmp(true);\r\n      setSearchAutomate(false);\r\n      handleSearchKMP(); // Exécuter la recherche avec KMP\r\n    } else {\r\n      setSearchKmp(false);\r\n      setSearchAutomate(true);\r\n\r\n      try {\r\n        // Générer l'arbre\r\n        await handleGenerateArbre();\r\n\r\n        // Générer l'automate\r\n        await handleGenerateAutomate();\r\n\r\n        // Déterminiser l'automate\r\n        await handleDeterminizeAutomate();\r\n\r\n        // Minimiser l'automate déterminisé\r\n        await handleMinimizeAutomate();\r\n\r\n        // // Rechercher les lignes correspondantes\r\n        // if (MinAutomate) {\r\n        //   const lines = fileContent.split(\"\\n\"); // Diviser le contenu du fichier par lignes\r\n        //   const results = lines.filter((line) => TestTxt(MinAutomate, line)); // Rechercher les lignes qui correspondent\r\n        //   setSearchResults(results); // Stocker les résultats\r\n        //   console.log(\"zebzebi\");\r\n        // }\r\n      } catch (error) {\r\n        console.error(\"Erreur lors du traitement de l'automate :\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAllTime = () => {\r\n    if (!regex || !fileContent) return;\r\n\r\n    if (isKmp()) {\r\n      setSearchKmp(true);\r\n      setSearchAutomate(false);\r\n      handleSearchKMPTime();\r\n    } else {\r\n      setSearchKmp(false);\r\n      setSearchAutomate(true);\r\n      handleSearchTIME(); // rechercher dans le fichier\r\n    }\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   if (regex.trim() !== \"\" && fileContent) {\r\n  //     handleAll();\r\n  //   } else {\r\n  //     // Réinitialiser si le regex est vide\r\n  //     setSearchKmp(false);\r\n  //     setSearchAutomate(false);\r\n  //     setIsAutomateReady(false);\r\n  //     setIsDeterminizeReady(false);\r\n  //     setIsMinimizeReady(false);\r\n  //     setAutomate(null);\r\n  //     setDetAutomate(null);\r\n  //     setMinAutomate(null);\r\n  //     setSearchResults([]);\r\n  //   }\r\n  // }, [regex, fileContent]);\r\n\r\n  // Utiliser useEffect pour déclencher les étapes successives\r\n  useEffect(() => {\r\n    if (automate) {\r\n      handleDeterminizeAutomate(); // Déclencher la déterminisation après la génération de l'automate\r\n    }\r\n  }, [automate]);\r\n\r\n  useEffect(() => {\r\n    if (detAutomate) {\r\n      handleMinimizeAutomate(); // Déclencher la minimisation après la déterminisation de l'automate\r\n    }\r\n  }, [detAutomate]);\r\n\r\n  useEffect(() => {\r\n    if (MinAutomate) {\r\n      handleSearch(); // Déclencher la recherche après la minimisation de l'automate\r\n    }\r\n  }, [MinAutomate]);\r\n\r\n  return (\r\n    <div\r\n      className=\"LoginImg \"\r\n      style={{\r\n        backdropFilter: \"blur(6px)\",\r\n      }}\r\n    >\r\n      <div className=\" vh-100 d-flex justify-content-center align-items-center\">\r\n        <div\r\n          className=\" card container py-5  w-50\"\r\n          style={{ minHeight: \"400px\" }}\r\n        >\r\n          {/* Header */}\r\n          <div className=\"mb-4\">\r\n            <Link to=\"/\" className=\"text-decoration-none text-primary\">\r\n              HomePage\r\n            </Link>\r\n          </div>\r\n\r\n          <h1 className=\"mb-4\">egrep Clone</h1>\r\n\r\n          <button\r\n            className=\"btn btn-warning\"\r\n            onClick={() => {\r\n              if (showTime) {\r\n                setTextTime(\"Test Performance\");\r\n              } else {\r\n                setTextTime(\"Test egrep\");\r\n              }\r\n              setShowTime(!showTime);\r\n            }}\r\n          >\r\n            {textTime}\r\n          </button>\r\n\r\n          {showTime ? (\r\n            <div className=\"row mb-4\">\r\n              <div className=\"col-md-3 d-flex flex-column justify-content-end\">\r\n                <label className=\"\">\r\n                  Regex:\r\n                  <input\r\n                    value={regex}\r\n                    onChange={(e) => setRegex(e.target.value)}\r\n                    className=\"form-control shadow-sm\"\r\n                  />\r\n                </label>\r\n              </div>\r\n              <div className=\"col-md-4 d-flex flex-column justify-content-end\">\r\n                <input\r\n                  type=\"file\"\r\n                  onChange={handleFileUpload}\r\n                  accept=\".txt\"\r\n                  className=\"form-control shadow-sm\"\r\n                />\r\n              </div>\r\n              {/* Input pour le nombre d'itérations */}\r\n              <div className=\"col-md-2 d-flex flex-column justify-content-end \">\r\n                <input\r\n                  type=\"number\"\r\n                  className=\"form-control shadow-sm\"\r\n                  placeholder=\"Enter number of iterations\"\r\n                  value={iterations}\r\n                  onChange={(e) => setIterations(parseInt(e.target.value))}\r\n                />\r\n              </div>\r\n              <div className=\"col-md-3 d-flex flex-column justify-content-end \">\r\n                <button\r\n                  onClick={handleAllTime}\r\n                  className=\"btn btn-primary shadow-sm\"\r\n                >\r\n                  Rechercher\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"row mb-4\">\r\n              <div className=\"col-md-4 d-flex flex-column justify-content-end mb-3 mt-3\">\r\n                <label className=\"\">\r\n                  Regex:\r\n                  <input\r\n                    value={regex}\r\n                    onChange={(e) => setRegex(e.target.value)}\r\n                    className=\"form-control\"\r\n                  />\r\n                </label>\r\n              </div>\r\n              <div className=\"col-md-4 d-flex flex-column justify-content-end mb-3 mt-3\">\r\n                <input\r\n                  type=\"file\"\r\n                  onChange={handleFileUpload}\r\n                  accept=\".txt\"\r\n                  className=\"form-control\"\r\n                />\r\n              </div>\r\n              <div className=\"col-md-4 d-flex flex-column justify-content-end mb-3 mt-3\">\r\n                <button onClick={handleAll} className=\"btn btn-primary\">\r\n                  Rechercher\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Search results */}\r\n\r\n          {searchkmp ? (\r\n            <div>\r\n              {\" \"}\r\n              {/* Button to trigger modal */}\r\n              <button\r\n                className=\"btn btn-secondary mb-4\"\r\n                onClick={() => setShowModal(true)} // Open modal\r\n              >\r\n                Show Details\r\n              </button>\r\n              <h3 className=\"mb-3\">\r\n                Résultats de la recherche : L'algorithme Knuth-Morris-Pratt\r\n                (KMP)\r\n              </h3>\r\n              {searchResults.length > 0 && (\r\n                <div>\r\n                  <ul className=\"list-group mb-4\">\r\n                    {searchResults.map((res, index) => (\r\n                      <li key={index} className=\"list-group-item\">\r\n                        {res.lineNumber} | {res.lineText} | position(s):{\" \"}\r\n                        {res.positions.join(\", \")}\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                  <hr />\r\n                  {/* Affichage du temps d'exécution moyen */}\r\n                  {showTime && executionTime !== null && (\r\n                    <div>\r\n                      <h3>\r\n                        Average Execution Time (Median):{\" \"}\r\n                        {executionTime.toFixed(2)} ms over {iterations}{\" \"}\r\n                        iteration(s)\r\n                      </h3>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              )}\r\n              {/* Modal for showing details */}\r\n              <Modal\r\n                show={showModal}\r\n                onHide={() => setShowModal(false)}\r\n                size=\"lg\"\r\n                centered\r\n              >\r\n                <Modal.Header>\r\n                  <Modal.Title>Details</Modal.Title>\r\n                  {/* Close button in the top right */}\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn-close\"\r\n                    onClick={() => setShowModal(false)}\r\n                  ></button>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                  <div className=\"mb-4\">\r\n                    <h2>Carry Over (LPS Table)</h2>\r\n                    {/* Afficher la table LPS ici */}\r\n                    {searchResults.map((result, index) => (\r\n                      <div key={index}>\r\n                        <h3>Ligne {result.lineNumber}</h3>\r\n                        <p>Texte de la ligne : {result.lineText}</p>\r\n                        <p>Positions : {result.positions.join(\", \")}</p>\r\n                        <p>LPS Table : {result.lpsTable.join(\", \")}</p>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </Modal.Body>\r\n              </Modal>\r\n            </div>\r\n          ) : null}\r\n          {searchAutomate ? (\r\n            <div>\r\n              {\" \"}\r\n              {/* Button to trigger modal */}\r\n              {searchResults.length > 0 && (\r\n                <div>\r\n                  <button\r\n                    className=\"btn btn-secondary mb-4\"\r\n                    onClick={() => setShowModal(true)} // Open modal\r\n                  >\r\n                    Show Details\r\n                  </button>\r\n                  <h3 className=\"mb-3\">\r\n                    Résultats de la recherche : Automaton\r\n                  </h3>\r\n                  <ul className=\"list-group mb-4\">\r\n                    {searchResults.map((result, index) => (\r\n                      <li key={index} className=\"list-group-item\">\r\n                        {result}\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                  {/* Affichage du temps d'exécution moyen */}\r\n                  {showTime && executionTime !== null && (\r\n                    <div>\r\n                      <h3>\r\n                        Average Execution Time (Median):{\" \"}\r\n                        {executionTime.toFixed(2)} ms over {iterations}{\" \"}\r\n                        iteration(s)\r\n                      </h3>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              )}\r\n              {/* Modal for showing details */}\r\n              <Modal\r\n                show={showModal}\r\n                onHide={() => setShowModal(false)}\r\n                size=\"lg\"\r\n                centered\r\n              >\r\n                <Modal.Header>\r\n                  <Modal.Title>Details</Modal.Title>\r\n                  {/* Close button in the top right */}\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn-close\"\r\n                    onClick={() => setShowModal(false)}\r\n                  ></button>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                  {arbre && (\r\n                    <div className=\"mb-4\">\r\n                      <h2>Arbre syntaxique</h2>\r\n                      <SyntaxTree node={arbre} />\r\n                      <div>{JSON.stringify(arbre, null, 3)}</div>\r\n                    </div>\r\n                  )}\r\n                  <hr />\r\n                  {automate && (\r\n                    <div className=\"mb-4\">\r\n                      <h2>Automate (NFA)</h2>\r\n                      <AutomateVisualizer automate={automate} />\r\n                    </div>\r\n                  )}\r\n                  <hr />\r\n                  {detAutomate && (\r\n                    <div className=\"mb-4\">\r\n                      <h2>Automate Déterminisé (DFA)</h2>\r\n                      <AutomateVisualizer automate={detAutomate} />\r\n                    </div>\r\n                  )}\r\n                  <hr />\r\n                  {MinAutomate && (\r\n                    <div className=\"mb-4\">\r\n                      <h2>Automate Minimisé (Min)</h2>\r\n                      <AutomateVisualizer automate={MinAutomate} />\r\n                    </div>\r\n                  )}\r\n                </Modal.Body>\r\n              </Modal>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Automaton;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}