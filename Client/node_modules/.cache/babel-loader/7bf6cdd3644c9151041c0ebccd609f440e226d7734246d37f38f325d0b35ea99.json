{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Musha\\\\Desktop\\\\DAAR\\\\projet\\\\projet1\\\\src\\\\app\\\\egrep.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EgrepClone() {\n  _s();\n  const [fileContent, setFileContent] = useState(\"\");\n  const [regexPattern, setRegexPattern] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n\n  // Lecture du fichier et stockage du contenu dans le state\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.onload = () => {\n      setFileContent(reader.result);\n    };\n    reader.readAsText(file);\n  };\n\n  // Fonction de recherche utilisant RegEx\n  const handleSearch = () => {\n    if (!regexPattern) return;\n\n    // Créer une RegEx à partir de la chaîne de motif\n    const regex = new RegExp(regexPattern, \"g\"); // 'g' pour global\n    const lines = fileContent.split(\"\\n\"); // Diviser le contenu du fichier par ligne\n    const results = lines.filter(line => regex.test(line)); // Rechercher les lignes qui correspondent\n    setSearchResults(results);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Clone egrep - Recherche par Motif\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileUpload,\n      accept: \".txt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Entrez le motif RegEx\",\n      value: regexPattern,\n      onChange: e => setRegexPattern(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      children: \"Rechercher\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"R\\xE9sultats de la recherche :\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: searchResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: result\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(EgrepClone, \"tT/M7XI+F9VJF1+TuBThQI0faVI=\");\n_c = EgrepClone;\nexport default EgrepClone;\nvar _c;\n$RefreshReg$(_c, \"EgrepClone\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","EgrepClone","_s","fileContent","setFileContent","regexPattern","setRegexPattern","searchResults","setSearchResults","handleFileUpload","event","file","target","files","reader","FileReader","onload","result","readAsText","handleSearch","regex","RegExp","lines","split","results","filter","line","test","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","accept","placeholder","value","e","onClick","map","index","_c","$RefreshReg$"],"sources":["C:/Users/Musha/Desktop/DAAR/projet/projet1/src/app/egrep.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction EgrepClone() {\r\n  const [fileContent, setFileContent] = useState(\"\");\r\n  const [regexPattern, setRegexPattern] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n\r\n  // Lecture du fichier et stockage du contenu dans le state\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      setFileContent(reader.result);\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  // Fonction de recherche utilisant RegEx\r\n  const handleSearch = () => {\r\n    if (!regexPattern) return;\r\n\r\n    // Créer une RegEx à partir de la chaîne de motif\r\n    const regex = new RegExp(regexPattern, \"g\"); // 'g' pour global\r\n    const lines = fileContent.split(\"\\n\"); // Diviser le contenu du fichier par ligne\r\n    const results = lines.filter((line) => regex.test(line)); // Rechercher les lignes qui correspondent\r\n    setSearchResults(results);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Clone egrep - Recherche par Motif</h2>\r\n\r\n      {/* Téléchargement du fichier */}\r\n      <input type=\"file\" onChange={handleFileUpload} accept=\".txt\" />\r\n\r\n      {/* Saisie du motif RegEx */}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Entrez le motif RegEx\"\r\n        value={regexPattern}\r\n        onChange={(e) => setRegexPattern(e.target.value)}\r\n      />\r\n\r\n      {/* Bouton pour déclencher la recherche */}\r\n      <button onClick={handleSearch}>Rechercher</button>\r\n\r\n      {/* Affichage des résultats */}\r\n      <div>\r\n        <h3>Résultats de la recherche :</h3>\r\n        <ul>\r\n          {searchResults.map((result, index) => (\r\n            <li key={index}>{result}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EgrepClone;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}