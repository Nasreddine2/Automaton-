{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Musha\\\\Desktop\\\\DAAR\\\\projet\\\\Projet 1\\\\Automaton-\\\\Client\\\\src\\\\app\\\\component\\\\arbre.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SyntaxTree = ({\n  node\n}) => {\n  // Si le node est une feuille (une string ou un élément simple), on l'affiche directement\n  if (typeof node === \"string\") {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: node\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Si le node est une liste, on affiche l'élément 0 (parent), et les enfants 1 et 2 (fils gauche et droit)\n  const [parent, leftChild, rightChild] = node;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      margin: \"20px\",\n      display: \"inline-block\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: parent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      children: [leftChild && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"50%\",\n          borderBottom: \"1px solid black\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this), rightChild && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"50%\",\n          borderBottom: \"1px solid black\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-between\"\n      },\n      children: [leftChild && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginRight: \"10px\",\n          paddingTop: \"10px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(SyntaxTree, {\n          node: leftChild\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), rightChild && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: \"10px\",\n          paddingTop: \"10px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(SyntaxTree, {\n          node: rightChild\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n_c = SyntaxTree;\nexport default SyntaxTree;\nvar _c;\n$RefreshReg$(_c, \"SyntaxTree\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","SyntaxTree","node","children","fileName","_jsxFileName","lineNumber","columnNumber","parent","leftChild","rightChild","style","textAlign","margin","display","justifyContent","alignItems","width","borderBottom","marginRight","paddingTop","marginLeft","_c","$RefreshReg$"],"sources":["C:/Users/Musha/Desktop/DAAR/projet/Projet 1/Automaton-/Client/src/app/component/arbre.js"],"sourcesContent":["import React from \"react\";\r\nconst SyntaxTree = ({ node }) => {\r\n  // Si le node est une feuille (une string ou un élément simple), on l'affiche directement\r\n  if (typeof node === \"string\") {\r\n    return <span>{node}</span>;\r\n  }\r\n\r\n  // Si le node est une liste, on affiche l'élément 0 (parent), et les enfants 1 et 2 (fils gauche et droit)\r\n  const [parent, leftChild, rightChild] = node;\r\n\r\n  return (\r\n    <div\r\n      style={{ textAlign: \"center\", margin: \"20px\", display: \"inline-block\" }}\r\n    >\r\n      {/* Affichage du parent */}\r\n      <div>{parent}</div>\r\n\r\n      {/* Connecteurs entre parent et enfants */}\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        {leftChild && (\r\n          <div style={{ width: \"50%\", borderBottom: \"1px solid black\" }}></div>\r\n        )}\r\n        {rightChild && (\r\n          <div style={{ width: \"50%\", borderBottom: \"1px solid black\" }}></div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Conteneur pour les enfants */}\r\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n        {/* Fils gauche */}\r\n        {leftChild && (\r\n          <div style={{ marginRight: \"10px\", paddingTop: \"10px\" }}>\r\n            <SyntaxTree node={leftChild} />\r\n          </div>\r\n        )}\r\n        {/* Fils droit */}\r\n        {rightChild && (\r\n          <div style={{ marginLeft: \"10px\", paddingTop: \"10px\" }}>\r\n            <SyntaxTree node={rightChild} />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SyntaxTree;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1B,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAC/B;EACA,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5B,oBAAOF,OAAA;MAAAG,QAAA,EAAOD;IAAI;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC;EAC5B;;EAEA;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,EAAEC,UAAU,CAAC,GAAGR,IAAI;EAE5C,oBACEF,OAAA;IACEW,KAAK,EAAE;MAAEC,SAAS,EAAE,QAAQ;MAAEC,MAAM,EAAE,MAAM;MAAEC,OAAO,EAAE;IAAe,CAAE;IAAAX,QAAA,gBAGxEH,OAAA;MAAAG,QAAA,EAAMK;IAAM;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAGnBP,OAAA;MACEW,KAAK,EAAE;QACLG,OAAO,EAAE,MAAM;QACfC,cAAc,EAAE,QAAQ;QACxBC,UAAU,EAAE;MACd,CAAE;MAAAb,QAAA,GAEDM,SAAS,iBACRT,OAAA;QAAKW,KAAK,EAAE;UAAEM,KAAK,EAAE,KAAK;UAAEC,YAAY,EAAE;QAAkB;MAAE;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CACrE,EACAG,UAAU,iBACTV,OAAA;QAAKW,KAAK,EAAE;UAAEM,KAAK,EAAE,KAAK;UAAEC,YAAY,EAAE;QAAkB;MAAE;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CACrE;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAGNP,OAAA;MAAKW,KAAK,EAAE;QAAEG,OAAO,EAAE,MAAM;QAAEC,cAAc,EAAE;MAAgB,CAAE;MAAAZ,QAAA,GAE9DM,SAAS,iBACRT,OAAA;QAAKW,KAAK,EAAE;UAAEQ,WAAW,EAAE,MAAM;UAAEC,UAAU,EAAE;QAAO,CAAE;QAAAjB,QAAA,eACtDH,OAAA,CAACC,UAAU;UAACC,IAAI,EAAEO;QAAU;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CACN,EAEAG,UAAU,iBACTV,OAAA;QAAKW,KAAK,EAAE;UAAEU,UAAU,EAAE,MAAM;UAAED,UAAU,EAAE;QAAO,CAAE;QAAAjB,QAAA,eACrDH,OAAA,CAACC,UAAU;UAACC,IAAI,EAAEQ;QAAW;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACe,EAAA,GAjDIrB,UAAU;AAmDhB,eAAeA,UAAU;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}