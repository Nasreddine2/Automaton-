{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Musha\\\\Desktop\\\\DAAR\\\\projet\\\\projet1\\\\src\\\\app\\\\automate.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n\n// Compteur d'état global pour assurer des identifiants uniques\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet stateCounter = 0;\n\n// Classe Automate pour stocker les états et transitions\nclass Automate {\n  constructor() {\n    this.states = [];\n    this.transitions = [];\n    this.startState = null;\n    this.endState = null;\n  }\n\n  // Fonction pour ajouter un état avec un identifiant unique\n  addState() {\n    const newState = stateCounter++;\n    this.states.push(newState);\n    return newState;\n  }\n  addTransition(from, to, symbol) {\n    this.transitions.push({\n      from,\n      to,\n      symbol\n    });\n  }\n  setStartState(state) {\n    this.startState = state;\n  }\n  setEndState(state) {\n    this.endState = state;\n  }\n  getAutomate() {\n    return {\n      states: this.states,\n      transitions: this.transitions,\n      startState: this.startState,\n      endState: this.endState\n    };\n  }\n}\n\n// Fonction pour créer un automate pour un symbole\nconst createBaseAutomate = symbol => {\n  const automate = new Automate();\n  const start = automate.addState();\n  const end = automate.addState();\n  automate.addTransition(start, end, symbol);\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour concaténer deux automates\nconst concatenateAutomates = (automate1, automate2) => {\n  const automate = new Automate();\n\n  // Copier les états et transitions des deux automates\n  automate.states = [...automate1.states, ...automate2.states];\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\n\n  // Ajouter une transition epsilon entre la fin du premier automate et le début du second\n  automate.addTransition(automate1.endState, automate2.startState, \"ε\");\n\n  // Définir les nouveaux états de départ et de fin\n  automate.setStartState(automate1.startState);\n  automate.setEndState(automate2.endState);\n  return automate;\n};\n\n// Fonction pour gérer l'union de deux automates (opérateur |)\nconst unionAutomates = (automate1, automate2) => {\n  const automate = new Automate();\n  const start = automate.addState(); // Nouvel état de départ\n  const end = automate.addState(); // Nouvel état de fin\n\n  // Copier les états et transitions des deux automates\n  automate.states = [...automate1.states, ...automate2.states, start, end];\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\n\n  // Ajouter des transitions epsilon du nouvel état initial vers les deux sous-automates\n  automate.addTransition(start, automate1.startState, \"ε\");\n  automate.addTransition(start, automate2.startState, \"ε\");\n\n  // Ajouter des transitions epsilon des états finaux des sous-automates vers le nouvel état final\n  automate.addTransition(automate1.endState, end, \"ε\");\n  automate.addTransition(automate2.endState, end, \"ε\");\n\n  // Définir les nouveaux états de départ et de fin\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour gérer la fermeture de Kleene (opérateur *)\nconst kleeneAutomate = automate1 => {\n  const automate = new Automate();\n  const start = automate.addState(); // Nouvel état de départ\n  const end = automate.addState(); // Nouvel état de fin\n\n  // Copier les états et transitions du premier automate\n  automate.states = [...automate1.states, start, end];\n  automate.transitions = [...automate1.transitions];\n\n  // Ajouter des transitions epsilon pour la fermeture de Kleene\n  automate.addTransition(start, automate1.startState, \"ε\");\n  automate.addTransition(automate1.endState, end, \"ε\");\n  automate.addTransition(automate1.endState, automate1.startState, \"ε\"); // Boucle\n  automate.addTransition(start, end, \"ε\"); // Transition directe\n\n  // Définir les nouveaux états de départ et de fin\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour gérer l'opérateur +\nconst plusAutomate = automate1 => {\n  const automate = new Automate();\n  const start = automate.addState(); // Nouvel état de départ\n  const end = automate.addState(); // Nouvel état de fin\n\n  // Copier les états et transitions du premier automate\n  automate.states = [...automate1.states, start, end];\n  automate.transitions = [...automate1.transitions];\n\n  // Ajouter des transitions epsilon pour l'opérateur +\n  automate.addTransition(start, automate1.startState, \"ε\");\n  automate.addTransition(automate1.endState, end, \"ε\");\n  automate.addTransition(automate1.endState, automate1.startState, \"ε\"); // Boucle\n\n  // Définir les nouveaux états de départ et de fin\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour parser une expression régulière en respectant les priorités et les parenthèses\nconst parseRegex = regex => {\n  const precedence = {\n    \"|\": 1,\n    \".\": 2,\n    \"*\": 3,\n    \"+\": 3\n  };\n  const operators = [];\n  const output = [];\n  const isOperator = char => [\"|\", \".\", \"*\", \"+\"].includes(char);\n  const applyOperator = () => {\n    const operator = operators.pop();\n    if (operator === \".\") {\n      const b = output.pop();\n      const a = output.pop();\n      output.push([\".\", a, b]);\n    } else if (operator === \"|\") {\n      const b = output.pop();\n      const a = output.pop();\n      output.push([\"|\", a, b]);\n    } else if (operator === \"*\") {\n      const a = output.pop();\n      output.push([\"*\", a]);\n    } else if (operator === \"+\") {\n      const a = output.pop();\n      output.push([\"+\", a]);\n    }\n  };\n  let i = 0;\n  while (i < regex.length) {\n    const char = regex[i];\n    if (char === \"(\") {\n      // Trouver la sous-expression entre parenthèses\n      let j = i;\n      let openParentheses = 1;\n      while (openParentheses > 0 && ++j < regex.length) {\n        if (regex[j] === \"(\") openParentheses++;\n        if (regex[j] === \")\") openParentheses--;\n      }\n\n      // Appeler récursivement `parseRegex` sur la sous-expression\n      const subexpression = regex.slice(i + 1, j);\n      output.push(parseRegex(subexpression));\n      i = j; // Avancer jusqu'à la parenthèse fermante\n    } else if (!isOperator(char)) {\n      output.push(char); // Ajouter les symboles au output\n    } else {\n      while (operators.length > 0 && operators[operators.length - 1] !== \"(\" && precedence[operators[operators.length - 1]] >= precedence[char]) {\n        applyOperator();\n      }\n      operators.push(char);\n    }\n    i++;\n  }\n\n  // Appliquer les opérateurs restants\n  while (operators.length > 0) {\n    applyOperator();\n  }\n  return output[0];\n};\n\n// Fonction pour parcourir l'arbre syntaxique et créer l'automate\nconst parseArbre = arbre => {\n  if (typeof arbre === \"string\") {\n    return createBaseAutomate(arbre); // Si c'est un symbole\n  }\n  const [op, ...args] = arbre;\n  switch (op) {\n    case \".\":\n      {\n        // Concaténation\n        let result = parseArbre(args[0]);\n        for (let i = 1; i < args.length; i++) {\n          result = concatenateAutomates(result, parseArbre(args[i]));\n        }\n        return result;\n      }\n    case \"|\":\n      {\n        // Union\n        let result = parseArbre(args[0]);\n        for (let i = 1; i < args.length; i++) {\n          result = unionAutomates(result, parseArbre(args[i]));\n        }\n        return result;\n      }\n    case \"*\":\n      {\n        // Fermeture de Kleene\n        return kleeneAutomate(parseArbre(args[0]));\n      }\n    case \"+\":\n      {\n        // L'opérateur +\n        return plusAutomate(parseArbre(args[0]));\n      }\n    default:\n      throw new Error(`Opérateur non supporté: ${op}`);\n  }\n};\n\n// Fonction pour générer l'automate à partir d'une expression régulière\nconst construireAutomate = regex => {\n  const arbre = parseRegex(regex); // Construire l'arbre syntaxique à partir du regex\n  return parseArbre(arbre); // Construire l'automate à partir de l'arbre syntaxique\n};\n\n// Fonction pour tester si une sous-chaîne est acceptée par l'automate\nconst estAccepte = (automate, chaine, index = 0, etatCourant = automate.startState) => {\n  if (index === chaine.length) {\n    return etatCourant === automate.endState;\n  }\n  const symbol = chaine[index];\n  let transitions = automate.transitions.filter(t => t.from === etatCourant);\n\n  // Parcourir les transitions epsilon\n  for (let trans of transitions) {\n    if (trans.symbol === \"ε\") {\n      if (estAccepte(automate, chaine, index, trans.to)) {\n        return true;\n      }\n    }\n  }\n\n  // Parcourir les transitions pour le symbole courant\n  for (let trans of transitions) {\n    if (trans.symbol === symbol) {\n      if (estAccepte(automate, chaine, index + 1, trans.to)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// Fonction pour compter les occurrences de sous-chaînes acceptées\nconst compterOccurences = (automate, texte) => {\n  const mots = texte.split(\" \");\n  let compte = 0;\n  for (let mot of mots) {\n    if (estAccepte(automate, mot)) {\n      compte++;\n    }\n  }\n  return compte;\n};\n\n// Fonction pour calculer la fermeture epsilon d'un état donné\nconst epsilonClosure = (automate, state) => {\n  const closure = new Set([state]);\n  const stack = [state];\n  while (stack.length > 0) {\n    const currentState = stack.pop();\n    const epsilonTransitions = automate.transitions.filter(t => t.from === currentState && t.symbol === \"ε\");\n    for (const transition of epsilonTransitions) {\n      if (!closure.has(transition.to)) {\n        closure.add(transition.to);\n        stack.push(transition.to);\n      }\n    }\n  }\n  return closure;\n};\n\n// Fonction pour calculer la fermeture epsilon d'un ensemble d'états\nconst epsilonClosureSet = (automate, states) => {\n  let closure = new Set();\n  for (const state of states) {\n    closure = new Set([...closure, ...epsilonClosure(automate, state)]);\n  }\n  return closure;\n};\n\n// Fonction pour calculer la transition d'un ensemble d'états sur un symbole donné\nconst move = (automate, states, symbol) => {\n  const nextStates = new Set();\n  for (const state of states) {\n    const transitions = automate.transitions.filter(t => t.from === state && t.symbol === symbol);\n    for (const transition of transitions) {\n      nextStates.add(transition.to);\n    }\n  }\n  return nextStates;\n};\n\n// Fonction pour déterminiser un automate non déterministe avec epsilon transitions\nconst determinizeAutomate = nfa => {\n  const dfa = new Automate();\n  const alphabet = Array.from(new Set(nfa.transitions.map(t => t.symbol).filter(s => s !== \"ε\")));\n  const initialClosure = epsilonClosure(nfa, nfa.startState);\n  const dfaStatesMap = new Map();\n  dfaStatesMap.set(JSON.stringify([...initialClosure]), dfa.addState());\n  dfa.setStartState(dfaStatesMap.get(JSON.stringify([...initialClosure])));\n  const unprocessedStates = [initialClosure];\n  const finalStates = new Set(); // Ensemble pour stocker les états finaux du DFA\n\n  while (unprocessedStates.length > 0) {\n    const currentSet = unprocessedStates.pop();\n    const currentStateId = dfaStatesMap.get(JSON.stringify([...currentSet]));\n\n    // Vérifier si l'un des états de l'ensemble est un état final du NFA\n    if ([...currentSet].includes(nfa.endState)) {\n      finalStates.add(currentStateId); // Marquer cet état comme final dans le DFA\n    }\n    for (const symbol of alphabet) {\n      const nextSet = epsilonClosureSet(nfa, move(nfa, currentSet, symbol));\n      if (nextSet.size === 0) continue; // Ignorer les ensembles vides\n\n      const nextSetKey = JSON.stringify([...nextSet]);\n      if (!dfaStatesMap.has(nextSetKey)) {\n        const newState = dfa.addState();\n        dfaStatesMap.set(nextSetKey, newState);\n        unprocessedStates.push(nextSet);\n      }\n      dfa.addTransition(currentStateId, dfaStatesMap.get(nextSetKey), symbol);\n    }\n  }\n\n  // Définir les états finaux dans le DFA\n  for (const finalState of finalStates) {\n    dfa.setEndState(finalState);\n  }\n  return dfa;\n};\n\n// Composant React pour afficher l'automate avec les états initiaux et finaux\nconst AutomateVisualizer = ({\n  automate\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\xC9tats\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: automate.states.map(state => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [state, state === automate.startState && \" (Initial)\", state === automate.endState && \" (Final)\"]\n      }, state, true, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Transitions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: automate.transitions.map((trans, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [trans.from, \" --(\", trans.symbol, \")--> \", trans.to]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 402,\n    columnNumber: 5\n  }, this);\n};\n\n// Composant principal de l'application\n_c = AutomateVisualizer;\nconst Automata = () => {\n  _s();\n  const [automate, setAutomate] = useState(null); // Automate (NFA ou DFA)\n  const [detAutomate, setDetAutomate] = useState(null); // Automate déterminisé (DFA)\n  const [text, setText] = useState(\"\");\n  const [regex, setRegex] = useState(\"\");\n  const [occurrences, setOccurrences] = useState(0);\n\n  // Fonction pour générer l'automate (NFA)\n  const handleGenerateAutomate = () => {\n    stateCounter = 0; // Réinitialiser le compteur d'état pour chaque nouveau calcul\n    const automate = construireAutomate(regex); // Générer l'automate à partir de l'expression régulière\n    setAutomate(automate); // Stocker l'automate NFA\n    setDetAutomate(null); // Réinitialiser l'automate déterminisé (DFA)\n  };\n\n  // Fonction pour déterminiser l'automate (NFA -> DFA)\n  const handleDeterminizeAutomate = () => {\n    if (automate) {\n      const dfa = determinizeAutomate(automate); // Déterminiser l'automate NFA\n      setDetAutomate(dfa); // Stocker l'automate déterminisé (DFA)\n    }\n  };\n\n  // Fonction pour compter les occurrences dans le texte (NFA ou DFA)\n  const handleCountOccurrences = () => {\n    if (detAutomate) {\n      // Si l'automate déterminisé existe, on l'utilise\n      const count = compterOccurences(detAutomate, text);\n      setOccurrences(count);\n    } else if (automate) {\n      // Sinon, on utilise l'automate NFA\n      const count = compterOccurences(automate, text);\n      setOccurrences(count);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Automate avec transitions epsilon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Regex:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: regex,\n          onChange: e => setRegex(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGenerateAutomate,\n        children: \"G\\xE9n\\xE9rer l'automate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeterminizeAutomate,\n        children: \"D\\xE9terminiser l'automate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Texte:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: text,\n          onChange: e => setText(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCountOccurrences,\n        children: \"Compter les occurrences\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 7\n    }, this), automate && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Automate (NFA)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AutomateVisualizer, {\n        automate: automate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), detAutomate && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Automate D\\xE9terminis\\xE9 (DFA)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AutomateVisualizer, {\n        automate: detAutomate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Nombre d'occurrences: \", occurrences]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 463,\n    columnNumber: 5\n  }, this);\n};\n_s(Automata, \"ORGEu1NlyXvxieCbT1CcLEd59OA=\");\n_c2 = Automata;\nexport default Automata;\nvar _c, _c2;\n$RefreshReg$(_c, \"AutomateVisualizer\");\n$RefreshReg$(_c2, \"Automata\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","stateCounter","Automate","constructor","states","transitions","startState","endState","addState","newState","push","addTransition","from","to","symbol","setStartState","state","setEndState","getAutomate","createBaseAutomate","automate","start","end","concatenateAutomates","automate1","automate2","unionAutomates","kleeneAutomate","plusAutomate","parseRegex","regex","precedence","operators","output","isOperator","char","includes","applyOperator","operator","pop","b","a","i","length","j","openParentheses","subexpression","slice","parseArbre","arbre","op","args","result","Error","construireAutomate","estAccepte","chaine","index","etatCourant","filter","t","trans","compterOccurences","texte","mots","split","compte","mot","epsilonClosure","closure","Set","stack","currentState","epsilonTransitions","transition","has","add","epsilonClosureSet","move","nextStates","determinizeAutomate","nfa","dfa","alphabet","Array","map","s","initialClosure","dfaStatesMap","Map","set","JSON","stringify","get","unprocessedStates","finalStates","currentSet","currentStateId","nextSet","size","nextSetKey","finalState","AutomateVisualizer","children","fileName","_jsxFileName","lineNumber","columnNumber","idx","_c","Automata","_s","setAutomate","detAutomate","setDetAutomate","text","setText","setRegex","occurrences","setOccurrences","handleGenerateAutomate","handleDeterminizeAutomate","handleCountOccurrences","count","value","onChange","e","target","onClick","_c2","$RefreshReg$"],"sources":["C:/Users/Musha/Desktop/DAAR/projet/projet1/src/app/automate.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// Compteur d'état global pour assurer des identifiants uniques\r\nlet stateCounter = 0;\r\n\r\n// Classe Automate pour stocker les états et transitions\r\nclass Automate {\r\n  constructor() {\r\n    this.states = [];\r\n    this.transitions = [];\r\n    this.startState = null;\r\n    this.endState = null;\r\n  }\r\n\r\n  // Fonction pour ajouter un état avec un identifiant unique\r\n  addState() {\r\n    const newState = stateCounter++;\r\n    this.states.push(newState);\r\n    return newState;\r\n  }\r\n\r\n  addTransition(from, to, symbol) {\r\n    this.transitions.push({ from, to, symbol });\r\n  }\r\n\r\n  setStartState(state) {\r\n    this.startState = state;\r\n  }\r\n\r\n  setEndState(state) {\r\n    this.endState = state;\r\n  }\r\n\r\n  getAutomate() {\r\n    return {\r\n      states: this.states,\r\n      transitions: this.transitions,\r\n      startState: this.startState,\r\n      endState: this.endState,\r\n    };\r\n  }\r\n}\r\n\r\n// Fonction pour créer un automate pour un symbole\r\nconst createBaseAutomate = (symbol) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState();\r\n  const end = automate.addState();\r\n  automate.addTransition(start, end, symbol);\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n  return automate;\r\n};\r\n\r\n// Fonction pour concaténer deux automates\r\nconst concatenateAutomates = (automate1, automate2) => {\r\n  const automate = new Automate();\r\n\r\n  // Copier les états et transitions des deux automates\r\n  automate.states = [...automate1.states, ...automate2.states];\r\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\r\n\r\n  // Ajouter une transition epsilon entre la fin du premier automate et le début du second\r\n  automate.addTransition(automate1.endState, automate2.startState, \"ε\");\r\n\r\n  // Définir les nouveaux états de départ et de fin\r\n  automate.setStartState(automate1.startState);\r\n  automate.setEndState(automate2.endState);\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour gérer l'union de deux automates (opérateur |)\r\nconst unionAutomates = (automate1, automate2) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState(); // Nouvel état de départ\r\n  const end = automate.addState(); // Nouvel état de fin\r\n\r\n  // Copier les états et transitions des deux automates\r\n  automate.states = [...automate1.states, ...automate2.states, start, end];\r\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\r\n\r\n  // Ajouter des transitions epsilon du nouvel état initial vers les deux sous-automates\r\n  automate.addTransition(start, automate1.startState, \"ε\");\r\n  automate.addTransition(start, automate2.startState, \"ε\");\r\n\r\n  // Ajouter des transitions epsilon des états finaux des sous-automates vers le nouvel état final\r\n  automate.addTransition(automate1.endState, end, \"ε\");\r\n  automate.addTransition(automate2.endState, end, \"ε\");\r\n\r\n  // Définir les nouveaux états de départ et de fin\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour gérer la fermeture de Kleene (opérateur *)\r\nconst kleeneAutomate = (automate1) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState(); // Nouvel état de départ\r\n  const end = automate.addState(); // Nouvel état de fin\r\n\r\n  // Copier les états et transitions du premier automate\r\n  automate.states = [...automate1.states, start, end];\r\n  automate.transitions = [...automate1.transitions];\r\n\r\n  // Ajouter des transitions epsilon pour la fermeture de Kleene\r\n  automate.addTransition(start, automate1.startState, \"ε\");\r\n  automate.addTransition(automate1.endState, end, \"ε\");\r\n  automate.addTransition(automate1.endState, automate1.startState, \"ε\"); // Boucle\r\n  automate.addTransition(start, end, \"ε\"); // Transition directe\r\n\r\n  // Définir les nouveaux états de départ et de fin\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour gérer l'opérateur +\r\nconst plusAutomate = (automate1) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState(); // Nouvel état de départ\r\n  const end = automate.addState(); // Nouvel état de fin\r\n\r\n  // Copier les états et transitions du premier automate\r\n  automate.states = [...automate1.states, start, end];\r\n  automate.transitions = [...automate1.transitions];\r\n\r\n  // Ajouter des transitions epsilon pour l'opérateur +\r\n  automate.addTransition(start, automate1.startState, \"ε\");\r\n  automate.addTransition(automate1.endState, end, \"ε\");\r\n  automate.addTransition(automate1.endState, automate1.startState, \"ε\"); // Boucle\r\n\r\n  // Définir les nouveaux états de départ et de fin\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour parser une expression régulière en respectant les priorités et les parenthèses\r\nconst parseRegex = (regex) => {\r\n  const precedence = { \"|\": 1, \".\": 2, \"*\": 3, \"+\": 3 };\r\n  const operators = [];\r\n  const output = [];\r\n\r\n  const isOperator = (char) => [\"|\", \".\", \"*\", \"+\"].includes(char);\r\n\r\n  const applyOperator = () => {\r\n    const operator = operators.pop();\r\n    if (operator === \".\") {\r\n      const b = output.pop();\r\n      const a = output.pop();\r\n      output.push([\".\", a, b]);\r\n    } else if (operator === \"|\") {\r\n      const b = output.pop();\r\n      const a = output.pop();\r\n      output.push([\"|\", a, b]);\r\n    } else if (operator === \"*\") {\r\n      const a = output.pop();\r\n      output.push([\"*\", a]);\r\n    } else if (operator === \"+\") {\r\n      const a = output.pop();\r\n      output.push([\"+\", a]);\r\n    }\r\n  };\r\n\r\n  let i = 0;\r\n  while (i < regex.length) {\r\n    const char = regex[i];\r\n\r\n    if (char === \"(\") {\r\n      // Trouver la sous-expression entre parenthèses\r\n      let j = i;\r\n      let openParentheses = 1;\r\n      while (openParentheses > 0 && ++j < regex.length) {\r\n        if (regex[j] === \"(\") openParentheses++;\r\n        if (regex[j] === \")\") openParentheses--;\r\n      }\r\n\r\n      // Appeler récursivement `parseRegex` sur la sous-expression\r\n      const subexpression = regex.slice(i + 1, j);\r\n      output.push(parseRegex(subexpression));\r\n      i = j; // Avancer jusqu'à la parenthèse fermante\r\n    } else if (!isOperator(char)) {\r\n      output.push(char); // Ajouter les symboles au output\r\n    } else {\r\n      while (\r\n        operators.length > 0 &&\r\n        operators[operators.length - 1] !== \"(\" &&\r\n        precedence[operators[operators.length - 1]] >= precedence[char]\r\n      ) {\r\n        applyOperator();\r\n      }\r\n      operators.push(char);\r\n    }\r\n    i++;\r\n  }\r\n\r\n  // Appliquer les opérateurs restants\r\n  while (operators.length > 0) {\r\n    applyOperator();\r\n  }\r\n\r\n  return output[0];\r\n};\r\n\r\n// Fonction pour parcourir l'arbre syntaxique et créer l'automate\r\nconst parseArbre = (arbre) => {\r\n  if (typeof arbre === \"string\") {\r\n    return createBaseAutomate(arbre); // Si c'est un symbole\r\n  }\r\n\r\n  const [op, ...args] = arbre;\r\n\r\n  switch (op) {\r\n    case \".\": {\r\n      // Concaténation\r\n      let result = parseArbre(args[0]);\r\n      for (let i = 1; i < args.length; i++) {\r\n        result = concatenateAutomates(result, parseArbre(args[i]));\r\n      }\r\n      return result;\r\n    }\r\n\r\n    case \"|\": {\r\n      // Union\r\n      let result = parseArbre(args[0]);\r\n      for (let i = 1; i < args.length; i++) {\r\n        result = unionAutomates(result, parseArbre(args[i]));\r\n      }\r\n      return result;\r\n    }\r\n\r\n    case \"*\": {\r\n      // Fermeture de Kleene\r\n      return kleeneAutomate(parseArbre(args[0]));\r\n    }\r\n\r\n    case \"+\": {\r\n      // L'opérateur +\r\n      return plusAutomate(parseArbre(args[0]));\r\n    }\r\n\r\n    default:\r\n      throw new Error(`Opérateur non supporté: ${op}`);\r\n  }\r\n};\r\n\r\n// Fonction pour générer l'automate à partir d'une expression régulière\r\nconst construireAutomate = (regex) => {\r\n  const arbre = parseRegex(regex); // Construire l'arbre syntaxique à partir du regex\r\n  return parseArbre(arbre); // Construire l'automate à partir de l'arbre syntaxique\r\n};\r\n\r\n// Fonction pour tester si une sous-chaîne est acceptée par l'automate\r\nconst estAccepte = (\r\n  automate,\r\n  chaine,\r\n  index = 0,\r\n  etatCourant = automate.startState\r\n) => {\r\n  if (index === chaine.length) {\r\n    return etatCourant === automate.endState;\r\n  }\r\n\r\n  const symbol = chaine[index];\r\n  let transitions = automate.transitions.filter((t) => t.from === etatCourant);\r\n\r\n  // Parcourir les transitions epsilon\r\n  for (let trans of transitions) {\r\n    if (trans.symbol === \"ε\") {\r\n      if (estAccepte(automate, chaine, index, trans.to)) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Parcourir les transitions pour le symbole courant\r\n  for (let trans of transitions) {\r\n    if (trans.symbol === symbol) {\r\n      if (estAccepte(automate, chaine, index + 1, trans.to)) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n// Fonction pour compter les occurrences de sous-chaînes acceptées\r\nconst compterOccurences = (automate, texte) => {\r\n  const mots = texte.split(\" \");\r\n  let compte = 0;\r\n  for (let mot of mots) {\r\n    if (estAccepte(automate, mot)) {\r\n      compte++;\r\n    }\r\n  }\r\n  return compte;\r\n};\r\n\r\n// Fonction pour calculer la fermeture epsilon d'un état donné\r\nconst epsilonClosure = (automate, state) => {\r\n  const closure = new Set([state]);\r\n  const stack = [state];\r\n\r\n  while (stack.length > 0) {\r\n    const currentState = stack.pop();\r\n    const epsilonTransitions = automate.transitions.filter(\r\n      (t) => t.from === currentState && t.symbol === \"ε\"\r\n    );\r\n\r\n    for (const transition of epsilonTransitions) {\r\n      if (!closure.has(transition.to)) {\r\n        closure.add(transition.to);\r\n        stack.push(transition.to);\r\n      }\r\n    }\r\n  }\r\n\r\n  return closure;\r\n};\r\n\r\n// Fonction pour calculer la fermeture epsilon d'un ensemble d'états\r\nconst epsilonClosureSet = (automate, states) => {\r\n  let closure = new Set();\r\n  for (const state of states) {\r\n    closure = new Set([...closure, ...epsilonClosure(automate, state)]);\r\n  }\r\n  return closure;\r\n};\r\n\r\n// Fonction pour calculer la transition d'un ensemble d'états sur un symbole donné\r\nconst move = (automate, states, symbol) => {\r\n  const nextStates = new Set();\r\n  for (const state of states) {\r\n    const transitions = automate.transitions.filter(\r\n      (t) => t.from === state && t.symbol === symbol\r\n    );\r\n    for (const transition of transitions) {\r\n      nextStates.add(transition.to);\r\n    }\r\n  }\r\n  return nextStates;\r\n};\r\n\r\n// Fonction pour déterminiser un automate non déterministe avec epsilon transitions\r\nconst determinizeAutomate = (nfa) => {\r\n  const dfa = new Automate();\r\n  const alphabet = Array.from(\r\n    new Set(nfa.transitions.map((t) => t.symbol).filter((s) => s !== \"ε\"))\r\n  );\r\n\r\n  const initialClosure = epsilonClosure(nfa, nfa.startState);\r\n  const dfaStatesMap = new Map();\r\n  dfaStatesMap.set(JSON.stringify([...initialClosure]), dfa.addState());\r\n  dfa.setStartState(dfaStatesMap.get(JSON.stringify([...initialClosure])));\r\n\r\n  const unprocessedStates = [initialClosure];\r\n  const finalStates = new Set(); // Ensemble pour stocker les états finaux du DFA\r\n\r\n  while (unprocessedStates.length > 0) {\r\n    const currentSet = unprocessedStates.pop();\r\n    const currentStateId = dfaStatesMap.get(JSON.stringify([...currentSet]));\r\n\r\n    // Vérifier si l'un des états de l'ensemble est un état final du NFA\r\n    if ([...currentSet].includes(nfa.endState)) {\r\n      finalStates.add(currentStateId); // Marquer cet état comme final dans le DFA\r\n    }\r\n\r\n    for (const symbol of alphabet) {\r\n      const nextSet = epsilonClosureSet(nfa, move(nfa, currentSet, symbol));\r\n\r\n      if (nextSet.size === 0) continue; // Ignorer les ensembles vides\r\n\r\n      const nextSetKey = JSON.stringify([...nextSet]);\r\n\r\n      if (!dfaStatesMap.has(nextSetKey)) {\r\n        const newState = dfa.addState();\r\n        dfaStatesMap.set(nextSetKey, newState);\r\n        unprocessedStates.push(nextSet);\r\n      }\r\n\r\n      dfa.addTransition(currentStateId, dfaStatesMap.get(nextSetKey), symbol);\r\n    }\r\n  }\r\n\r\n  // Définir les états finaux dans le DFA\r\n  for (const finalState of finalStates) {\r\n    dfa.setEndState(finalState);\r\n  }\r\n\r\n  return dfa;\r\n};\r\n\r\n// Composant React pour afficher l'automate avec les états initiaux et finaux\r\nconst AutomateVisualizer = ({ automate }) => {\r\n  return (\r\n    <div>\r\n      <h3>États</h3>\r\n      <ul>\r\n        {automate.states.map((state) => (\r\n          <li key={state}>\r\n            {state}\r\n            {state === automate.startState && \" (Initial)\"}\r\n            {state === automate.endState && \" (Final)\"}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <h3>Transitions</h3>\r\n      <ul>\r\n        {automate.transitions.map((trans, idx) => (\r\n          <li key={idx}>\r\n            {trans.from} --({trans.symbol})--> {trans.to}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Composant principal de l'application\r\nconst Automata = () => {\r\n  const [automate, setAutomate] = useState(null); // Automate (NFA ou DFA)\r\n  const [detAutomate, setDetAutomate] = useState(null); // Automate déterminisé (DFA)\r\n  const [text, setText] = useState(\"\");\r\n  const [regex, setRegex] = useState(\"\");\r\n  const [occurrences, setOccurrences] = useState(0);\r\n\r\n  // Fonction pour générer l'automate (NFA)\r\n  const handleGenerateAutomate = () => {\r\n    stateCounter = 0; // Réinitialiser le compteur d'état pour chaque nouveau calcul\r\n    const automate = construireAutomate(regex); // Générer l'automate à partir de l'expression régulière\r\n    setAutomate(automate); // Stocker l'automate NFA\r\n    setDetAutomate(null); // Réinitialiser l'automate déterminisé (DFA)\r\n  };\r\n\r\n  // Fonction pour déterminiser l'automate (NFA -> DFA)\r\n  const handleDeterminizeAutomate = () => {\r\n    if (automate) {\r\n      const dfa = determinizeAutomate(automate); // Déterminiser l'automate NFA\r\n      setDetAutomate(dfa); // Stocker l'automate déterminisé (DFA)\r\n    }\r\n  };\r\n\r\n  // Fonction pour compter les occurrences dans le texte (NFA ou DFA)\r\n  const handleCountOccurrences = () => {\r\n    if (detAutomate) {\r\n      // Si l'automate déterminisé existe, on l'utilise\r\n      const count = compterOccurences(detAutomate, text);\r\n      setOccurrences(count);\r\n    } else if (automate) {\r\n      // Sinon, on utilise l'automate NFA\r\n      const count = compterOccurences(automate, text);\r\n      setOccurrences(count);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Automate avec transitions epsilon</h1>\r\n      <div>\r\n        <label>\r\n          Regex:\r\n          <input value={regex} onChange={(e) => setRegex(e.target.value)} />\r\n        </label>\r\n        <button onClick={handleGenerateAutomate}>Générer l'automate</button>\r\n        <button onClick={handleDeterminizeAutomate}>\r\n          Déterminiser l'automate\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <label>\r\n          Texte:\r\n          <input value={text} onChange={(e) => setText(e.target.value)} />\r\n        </label>\r\n        <button onClick={handleCountOccurrences}>\r\n          Compter les occurrences\r\n        </button>\r\n      </div>\r\n      {automate && (\r\n        <>\r\n          <h2>Automate (NFA)</h2>\r\n          <AutomateVisualizer automate={automate} />\r\n        </>\r\n      )}\r\n      {detAutomate && (\r\n        <>\r\n          <h2>Automate Déterminisé (DFA)</h2>\r\n          <AutomateVisualizer automate={detAutomate} />\r\n        </>\r\n      )}\r\n      <h3>Nombre d'occurrences: {occurrences}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Automata;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}