{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Musha\\\\Desktop\\\\DAAR\\\\projet\\\\Projet 1\\\\Automaton-\\\\src\\\\app\\\\egrep.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n\n// Définition des classes d'automates et des fonctions nécessaires\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass SyntaxTreeNode {\n  constructor(type, left = null, right = null, char = null) {\n    this.type = type; // \"CONCAT\", \"UNION\", \"STAR\", \"CHAR\"\n    this.left = left;\n    this.right = right;\n    this.char = char;\n  }\n}\nclass NFA {\n  constructor() {\n    this.startState = null;\n    this.acceptStates = new Set();\n    this.transitions = {};\n  }\n  addTransition(from, symbol, to) {\n    if (!this.transitions[from]) {\n      this.transitions[from] = {};\n    }\n    if (!this.transitions[from][symbol]) {\n      this.transitions[from][symbol] = new Set();\n    }\n    this.transitions[from][symbol].add(to);\n  }\n  addAcceptState(state) {\n    this.acceptStates.add(state);\n  }\n}\nclass DFA {\n  constructor() {\n    this.startState = null;\n    this.acceptStates = new Set();\n    this.transitions = {};\n  }\n  addTransition(from, symbol, to) {\n    if (!this.transitions[from]) {\n      this.transitions[from] = {};\n    }\n    this.transitions[from][symbol] = to;\n  }\n  addAcceptState(state) {\n    this.acceptStates.add(state);\n  }\n  test(input) {\n    let currentState = this.startState;\n    for (let char of input) {\n      if (this.transitions[currentState] && this.transitions[currentState][char]) {\n        currentState = this.transitions[currentState][char];\n      } else {\n        return false;\n      }\n    }\n    return this.acceptStates.has(currentState);\n  }\n}\nfunction regexToNFA(regex) {\n  let stack = [];\n  for (let char of regex) {\n    if (char === \"*\") {\n      if (stack.length === 0) {\n        console.error(\"Erreur: la pile est vide lors de l'opération '*'\");\n        return;\n      }\n      const nfa = stack.pop();\n      stack.push(applyStar(nfa));\n    } else if (char === \"|\") {\n      if (stack.length < 2) {\n        console.error(\"Erreur: pas assez d'éléments dans la pile pour l'opération '|'\");\n        return;\n      }\n      const right = stack.pop();\n      const left = stack.pop();\n      stack.push(applyUnion(left, right));\n    } else if (char === \".\") {\n      if (stack.length < 2) {\n        console.error(\"Erreur: pas assez d'éléments dans la pile pour l'opération '.'\");\n        return;\n      }\n      const right = stack.pop();\n      const left = stack.pop();\n      stack.push(applyConcat(left, right));\n    } else {\n      stack.push(buildBasicNFA(char));\n    }\n  }\n  if (stack.length !== 1) {\n    console.error(\"Erreur: la pile ne contient pas exactement un élément après le traitement de l'expression régulière\");\n    return;\n  }\n  return stack.pop();\n}\n\n// Correction des fonctions de manipulation des NFA\nfunction buildBasicNFA(char) {\n  const nfa = new NFA();\n  const startState = Symbol(\"start\");\n  const acceptState = Symbol(\"accept\");\n  nfa.startState = startState;\n  nfa.addAcceptState(acceptState);\n  nfa.addTransition(startState, char, acceptState);\n  return nfa;\n}\nfunction applyConcat(nfa1, nfa2) {\n  if (!nfa1 || !nfa2) {\n    console.error(\"Erreur: NFA1 ou NFA2 est invalide dans applyConcat\");\n    return;\n  }\n  const nfa = new NFA();\n  nfa.startState = nfa1.startState;\n  for (let state of nfa1.acceptStates) {\n    nfa.addTransition(state, \"\", nfa2.startState);\n  }\n\n  // Copier les transitions de nfa1\n  for (let from in nfa1.transitions) {\n    for (let char in nfa1.transitions[from]) {\n      for (let to of nfa1.transitions[from][char]) {\n        nfa.addTransition(from, char, to);\n      }\n    }\n  }\n\n  // Copier les transitions de nfa2\n  for (let from in nfa2.transitions) {\n    for (let char in nfa2.transitions[from]) {\n      for (let to of nfa2.transitions[from][char]) {\n        nfa.addTransition(from, char, to);\n      }\n    }\n  }\n  for (let state of nfa2.acceptStates) {\n    nfa.addAcceptState(state);\n  }\n  return nfa;\n}\nfunction applyUnion(nfa1, nfa2) {\n  if (!nfa1 || !nfa2) {\n    console.error(\"Erreur: NFA1 ou NFA2 est invalide dans applyUnion\");\n    return;\n  }\n  const nfa = new NFA();\n  const startState = Symbol(\"start\");\n  nfa.startState = startState;\n  nfa.addTransition(startState, \"\", nfa1.startState);\n  nfa.addTransition(startState, \"\", nfa2.startState);\n\n  // Copier les transitions de nfa1\n  for (let from in nfa1.transitions) {\n    for (let char in nfa1.transitions[from]) {\n      for (let to of nfa1.transitions[from][char]) {\n        nfa.addTransition(from, char, to);\n      }\n    }\n  }\n\n  // Copier les transitions de nfa2\n  for (let from in nfa2.transitions) {\n    for (let char in nfa2.transitions[from]) {\n      for (let to of nfa2.transitions[from][char]) {\n        nfa.addTransition(from, char, to);\n      }\n    }\n  }\n  for (let state of nfa1.acceptStates) {\n    nfa.addAcceptState(state);\n  }\n  for (let state of nfa2.acceptStates) {\n    nfa.addAcceptState(state);\n  }\n  return nfa;\n}\nfunction applyStar(nfa) {\n  if (!nfa) {\n    console.error(\"Erreur: NFA est invalide dans applyStar\");\n    return;\n  }\n  const result = new NFA();\n  const startState = Symbol(\"start\");\n  result.startState = startState;\n  result.addAcceptState(startState);\n  result.addTransition(startState, \"\", nfa.startState);\n\n  // Copier les transitions de nfa\n  for (let from in nfa.transitions) {\n    for (let char in nfa.transitions[from]) {\n      for (let to of nfa.transitions[from][char]) {\n        result.addTransition(from, char, to);\n      }\n    }\n  }\n  for (let state of nfa.acceptStates) {\n    result.addTransition(state, \"\", nfa.startState);\n    result.addAcceptState(state);\n  }\n  return result;\n}\n\n// Fonction pour convertir le NFA en un DFA\nfunction convertNFAToDFA(nfa) {\n  let dfa = new DFA();\n  let queue = [];\n  let dfaStartState = [nfa.startState];\n  queue.push(dfaStartState);\n  dfa.startState = JSON.stringify(dfaStartState);\n  while (queue.length > 0) {\n    let current = queue.shift();\n    let currentDFAState = JSON.stringify(current);\n    let charTransitions = {};\n    current.forEach(nfaState => {\n      if (nfa.transitions[nfaState]) {\n        for (let char in nfa.transitions[nfaState]) {\n          if (!charTransitions[char]) charTransitions[char] = new Set();\n          nfa.transitions[nfaState][char].forEach(toState => {\n            charTransitions[char].add(toState);\n          });\n        }\n      }\n    });\n    for (let char in charTransitions) {\n      let toDFAState = Array.from(charTransitions[char]);\n      let toDFAStateString = JSON.stringify(toDFAState);\n      dfa.addTransition(currentDFAState, char, toDFAStateString);\n      if (!queue.some(state => JSON.stringify(state) === toDFAStateString)) {\n        queue.push(toDFAState);\n      }\n    }\n    current.forEach(state => {\n      if (nfa.acceptStates.has(state)) dfa.addAcceptState(currentDFAState);\n    });\n  }\n  return dfa;\n}\nfunction EgrepClone() {\n  _s();\n  const [fileContent, setFileContent] = useState(\"\");\n  const [regexPattern, setRegexPattern] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n\n  // Lecture du fichier et stockage du contenu dans le state\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.onload = () => {\n      setFileContent(reader.result);\n    };\n    reader.readAsText(file);\n  };\n\n  // Fonction de recherche utilisant l'automate\n  const handleSearch = () => {\n    if (!regexPattern) return;\n\n    // Construire le NFA à partir du motif\n    const nfa = regexToNFA(regexPattern);\n\n    // Convertir le NFA en DFA\n    const dfa = convertNFAToDFA(nfa);\n    const lines = fileContent.split(\"\\n\"); // Diviser le contenu du fichier par ligne\n    const results = lines.filter(line => dfa.test(line)); // Rechercher les lignes qui correspondent\n    setSearchResults(results);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Clone egrep - Recherche par Motif avec Automate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileUpload,\n      accept: \".txt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Entrez le motif RegEx\",\n      value: regexPattern,\n      onChange: e => setRegexPattern(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      children: \"Rechercher\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"R\\xE9sultats de la recherche :\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: searchResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: result\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 311,\n    columnNumber: 5\n  }, this);\n}\n_s(EgrepClone, \"tT/M7XI+F9VJF1+TuBThQI0faVI=\");\n_c = EgrepClone;\nexport default EgrepClone;\nvar _c;\n$RefreshReg$(_c, \"EgrepClone\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SyntaxTreeNode","constructor","type","left","right","char","NFA","startState","acceptStates","Set","transitions","addTransition","from","symbol","to","add","addAcceptState","state","DFA","test","input","currentState","has","regexToNFA","regex","stack","length","console","error","nfa","pop","push","applyStar","applyUnion","applyConcat","buildBasicNFA","Symbol","acceptState","nfa1","nfa2","result","convertNFAToDFA","dfa","queue","dfaStartState","JSON","stringify","current","shift","currentDFAState","charTransitions","forEach","nfaState","toState","toDFAState","Array","toDFAStateString","some","EgrepClone","_s","fileContent","setFileContent","regexPattern","setRegexPattern","searchResults","setSearchResults","handleFileUpload","event","file","target","files","reader","FileReader","onload","readAsText","handleSearch","lines","split","results","filter","line","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","accept","placeholder","value","e","onClick","map","index","_c","$RefreshReg$"],"sources":["C:/Users/Musha/Desktop/DAAR/projet/Projet 1/Automaton-/src/app/egrep.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// Définition des classes d'automates et des fonctions nécessaires\r\nclass SyntaxTreeNode {\r\n  constructor(type, left = null, right = null, char = null) {\r\n    this.type = type; // \"CONCAT\", \"UNION\", \"STAR\", \"CHAR\"\r\n    this.left = left;\r\n    this.right = right;\r\n    this.char = char;\r\n  }\r\n}\r\n\r\nclass NFA {\r\n  constructor() {\r\n    this.startState = null;\r\n    this.acceptStates = new Set();\r\n    this.transitions = {};\r\n  }\r\n\r\n  addTransition(from, symbol, to) {\r\n    if (!this.transitions[from]) {\r\n      this.transitions[from] = {};\r\n    }\r\n    if (!this.transitions[from][symbol]) {\r\n      this.transitions[from][symbol] = new Set();\r\n    }\r\n    this.transitions[from][symbol].add(to);\r\n  }\r\n\r\n  addAcceptState(state) {\r\n    this.acceptStates.add(state);\r\n  }\r\n}\r\n\r\nclass DFA {\r\n  constructor() {\r\n    this.startState = null;\r\n    this.acceptStates = new Set();\r\n    this.transitions = {};\r\n  }\r\n\r\n  addTransition(from, symbol, to) {\r\n    if (!this.transitions[from]) {\r\n      this.transitions[from] = {};\r\n    }\r\n    this.transitions[from][symbol] = to;\r\n  }\r\n\r\n  addAcceptState(state) {\r\n    this.acceptStates.add(state);\r\n  }\r\n\r\n  test(input) {\r\n    let currentState = this.startState;\r\n    for (let char of input) {\r\n      if (\r\n        this.transitions[currentState] &&\r\n        this.transitions[currentState][char]\r\n      ) {\r\n        currentState = this.transitions[currentState][char];\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    return this.acceptStates.has(currentState);\r\n  }\r\n}\r\n\r\nfunction regexToNFA(regex) {\r\n  let stack = [];\r\n\r\n  for (let char of regex) {\r\n    if (char === \"*\") {\r\n      if (stack.length === 0) {\r\n        console.error(\"Erreur: la pile est vide lors de l'opération '*'\");\r\n        return;\r\n      }\r\n      const nfa = stack.pop();\r\n      stack.push(applyStar(nfa));\r\n    } else if (char === \"|\") {\r\n      if (stack.length < 2) {\r\n        console.error(\r\n          \"Erreur: pas assez d'éléments dans la pile pour l'opération '|'\"\r\n        );\r\n        return;\r\n      }\r\n      const right = stack.pop();\r\n      const left = stack.pop();\r\n      stack.push(applyUnion(left, right));\r\n    } else if (char === \".\") {\r\n      if (stack.length < 2) {\r\n        console.error(\r\n          \"Erreur: pas assez d'éléments dans la pile pour l'opération '.'\"\r\n        );\r\n        return;\r\n      }\r\n      const right = stack.pop();\r\n      const left = stack.pop();\r\n      stack.push(applyConcat(left, right));\r\n    } else {\r\n      stack.push(buildBasicNFA(char));\r\n    }\r\n  }\r\n\r\n  if (stack.length !== 1) {\r\n    console.error(\r\n      \"Erreur: la pile ne contient pas exactement un élément après le traitement de l'expression régulière\"\r\n    );\r\n    return;\r\n  }\r\n\r\n  return stack.pop();\r\n}\r\n\r\n// Correction des fonctions de manipulation des NFA\r\nfunction buildBasicNFA(char) {\r\n  const nfa = new NFA();\r\n  const startState = Symbol(\"start\");\r\n  const acceptState = Symbol(\"accept\");\r\n\r\n  nfa.startState = startState;\r\n  nfa.addAcceptState(acceptState);\r\n  nfa.addTransition(startState, char, acceptState);\r\n\r\n  return nfa;\r\n}\r\n\r\nfunction applyConcat(nfa1, nfa2) {\r\n  if (!nfa1 || !nfa2) {\r\n    console.error(\"Erreur: NFA1 ou NFA2 est invalide dans applyConcat\");\r\n    return;\r\n  }\r\n\r\n  const nfa = new NFA();\r\n\r\n  nfa.startState = nfa1.startState;\r\n  for (let state of nfa1.acceptStates) {\r\n    nfa.addTransition(state, \"\", nfa2.startState);\r\n  }\r\n\r\n  // Copier les transitions de nfa1\r\n  for (let from in nfa1.transitions) {\r\n    for (let char in nfa1.transitions[from]) {\r\n      for (let to of nfa1.transitions[from][char]) {\r\n        nfa.addTransition(from, char, to);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Copier les transitions de nfa2\r\n  for (let from in nfa2.transitions) {\r\n    for (let char in nfa2.transitions[from]) {\r\n      for (let to of nfa2.transitions[from][char]) {\r\n        nfa.addTransition(from, char, to);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let state of nfa2.acceptStates) {\r\n    nfa.addAcceptState(state);\r\n  }\r\n\r\n  return nfa;\r\n}\r\n\r\nfunction applyUnion(nfa1, nfa2) {\r\n  if (!nfa1 || !nfa2) {\r\n    console.error(\"Erreur: NFA1 ou NFA2 est invalide dans applyUnion\");\r\n    return;\r\n  }\r\n\r\n  const nfa = new NFA();\r\n  const startState = Symbol(\"start\");\r\n\r\n  nfa.startState = startState;\r\n  nfa.addTransition(startState, \"\", nfa1.startState);\r\n  nfa.addTransition(startState, \"\", nfa2.startState);\r\n\r\n  // Copier les transitions de nfa1\r\n  for (let from in nfa1.transitions) {\r\n    for (let char in nfa1.transitions[from]) {\r\n      for (let to of nfa1.transitions[from][char]) {\r\n        nfa.addTransition(from, char, to);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Copier les transitions de nfa2\r\n  for (let from in nfa2.transitions) {\r\n    for (let char in nfa2.transitions[from]) {\r\n      for (let to of nfa2.transitions[from][char]) {\r\n        nfa.addTransition(from, char, to);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let state of nfa1.acceptStates) {\r\n    nfa.addAcceptState(state);\r\n  }\r\n  for (let state of nfa2.acceptStates) {\r\n    nfa.addAcceptState(state);\r\n  }\r\n\r\n  return nfa;\r\n}\r\n\r\nfunction applyStar(nfa) {\r\n  if (!nfa) {\r\n    console.error(\"Erreur: NFA est invalide dans applyStar\");\r\n    return;\r\n  }\r\n\r\n  const result = new NFA();\r\n  const startState = Symbol(\"start\");\r\n\r\n  result.startState = startState;\r\n  result.addAcceptState(startState);\r\n  result.addTransition(startState, \"\", nfa.startState);\r\n\r\n  // Copier les transitions de nfa\r\n  for (let from in nfa.transitions) {\r\n    for (let char in nfa.transitions[from]) {\r\n      for (let to of nfa.transitions[from][char]) {\r\n        result.addTransition(from, char, to);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let state of nfa.acceptStates) {\r\n    result.addTransition(state, \"\", nfa.startState);\r\n    result.addAcceptState(state);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n// Fonction pour convertir le NFA en un DFA\r\nfunction convertNFAToDFA(nfa) {\r\n  let dfa = new DFA();\r\n  let queue = [];\r\n  let dfaStartState = [nfa.startState];\r\n  queue.push(dfaStartState);\r\n  dfa.startState = JSON.stringify(dfaStartState);\r\n\r\n  while (queue.length > 0) {\r\n    let current = queue.shift();\r\n    let currentDFAState = JSON.stringify(current);\r\n\r\n    let charTransitions = {};\r\n    current.forEach((nfaState) => {\r\n      if (nfa.transitions[nfaState]) {\r\n        for (let char in nfa.transitions[nfaState]) {\r\n          if (!charTransitions[char]) charTransitions[char] = new Set();\r\n          nfa.transitions[nfaState][char].forEach((toState) => {\r\n            charTransitions[char].add(toState);\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    for (let char in charTransitions) {\r\n      let toDFAState = Array.from(charTransitions[char]);\r\n      let toDFAStateString = JSON.stringify(toDFAState);\r\n\r\n      dfa.addTransition(currentDFAState, char, toDFAStateString);\r\n\r\n      if (!queue.some((state) => JSON.stringify(state) === toDFAStateString)) {\r\n        queue.push(toDFAState);\r\n      }\r\n    }\r\n\r\n    current.forEach((state) => {\r\n      if (nfa.acceptStates.has(state)) dfa.addAcceptState(currentDFAState);\r\n    });\r\n  }\r\n\r\n  return dfa;\r\n}\r\n\r\nfunction EgrepClone() {\r\n  const [fileContent, setFileContent] = useState(\"\");\r\n  const [regexPattern, setRegexPattern] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n\r\n  // Lecture du fichier et stockage du contenu dans le state\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      setFileContent(reader.result);\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  // Fonction de recherche utilisant l'automate\r\n  const handleSearch = () => {\r\n    if (!regexPattern) return;\r\n\r\n    // Construire le NFA à partir du motif\r\n    const nfa = regexToNFA(regexPattern);\r\n\r\n    // Convertir le NFA en DFA\r\n    const dfa = convertNFAToDFA(nfa);\r\n\r\n    const lines = fileContent.split(\"\\n\"); // Diviser le contenu du fichier par ligne\r\n    const results = lines.filter((line) => dfa.test(line)); // Rechercher les lignes qui correspondent\r\n    setSearchResults(results);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Clone egrep - Recherche par Motif avec Automate</h2>\r\n\r\n      {/* Téléchargement du fichier */}\r\n      <input type=\"file\" onChange={handleFileUpload} accept=\".txt\" />\r\n\r\n      {/* Saisie du motif RegEx */}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Entrez le motif RegEx\"\r\n        value={regexPattern}\r\n        onChange={(e) => setRegexPattern(e.target.value)}\r\n      />\r\n\r\n      {/* Bouton pour déclencher la recherche */}\r\n      <button onClick={handleSearch}>Rechercher</button>\r\n\r\n      {/* Affichage des résultats */}\r\n      <div>\r\n        <h3>Résultats de la recherche :</h3>\r\n        <ul>\r\n          {searchResults.map((result, index) => (\r\n            <li key={index}>{result}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EgrepClone;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}