{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Musha\\\\Desktop\\\\DAAR\\\\projet\\\\Projet 1\\\\Automaton-\\\\Client\\\\src\\\\app\\\\automate.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { Chart, registerables } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst ExecutionTimeChart = ({\n  isKMP,\n  kmpTimes,\n  egrepTimes\n}) => {\n  _s();\n  React.useEffect(() => {\n    var _document$getElementB;\n    const ctx = (_document$getElementB = document.getElementById(\"executionTimeChart\")) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.getContext(\"2d\");\n    if (ctx) {\n      const chart = new Chart(ctx, {\n        type: \"bar\",\n        // Changez à 'line' si vous préférez un graphique linéaire\n        data: {\n          labels: (kmpTimes === null || kmpTimes === void 0 ? void 0 : kmpTimes.map((_, index) => `Iteration ${index + 1}`)) || [],\n          // Labels pour chaque itération\n          datasets: [{\n            label: isKMP ? \"KMP Temps d'Execution (ms)\" : \"Automate Temps d'Execution (ms)\",\n            data: kmpTimes || [],\n            backgroundColor: \"rgba(75, 192, 192, 0.6)\",\n            borderColor: \"rgba(75, 192, 192, 1)\",\n            borderWidth: 1\n          }, {\n            label: \"egrep Execution Time (ms)\",\n            data: egrepTimes || [],\n            backgroundColor: \"rgba(255, 99, 132, 0.6)\",\n            borderColor: \"rgba(255, 99, 132, 1)\",\n            borderWidth: 1\n          }]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: \"Temps d'Execution (ms)\"\n              }\n            },\n            x: {\n              title: {\n                display: true,\n                text: \"Iterations\"\n              }\n            }\n          },\n          responsive: true,\n          plugins: {\n            legend: {\n              display: true,\n              position: \"top\"\n            }\n          }\n        }\n      });\n\n      // Cleanup the chart when the component unmounts\n      return () => {\n        chart.destroy();\n      };\n    }\n  }, [isKMP, kmpTimes, egrepTimes]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"executionTimeChart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 10\n  }, this);\n};\n_s(ExecutionTimeChart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ExecutionTimeChart;\nexport default ExecutionTimeChart;\nvar _c;\n$RefreshReg$(_c, \"ExecutionTimeChart\");","map":{"version":3,"names":["React","Chart","registerables","jsxDEV","_jsxDEV","register","ExecutionTimeChart","isKMP","kmpTimes","egrepTimes","_s","useEffect","_document$getElementB","ctx","document","getElementById","getContext","chart","type","data","labels","map","_","index","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","y","beginAtZero","title","display","text","x","responsive","plugins","legend","position","destroy","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Musha/Desktop/DAAR/projet/Projet 1/Automaton-/Client/src/app/automate.js"],"sourcesContent":["import React from \"react\";\r\nimport { Chart, registerables } from \"chart.js\";\r\n\r\nChart.register(...registerables);\r\n\r\nconst ExecutionTimeChart = ({ isKMP, kmpTimes, egrepTimes }) => {\r\n  React.useEffect(() => {\r\n    const ctx = document.getElementById(\"executionTimeChart\")?.getContext(\"2d\");\r\n\r\n    if (ctx) {\r\n      const chart = new Chart(ctx, {\r\n        type: \"bar\", // Changez à 'line' si vous préférez un graphique linéaire\r\n        data: {\r\n          labels: kmpTimes?.map((_, index) => `Iteration ${index + 1}`) || [], // Labels pour chaque itération\r\n          datasets: [\r\n            {\r\n              label: isKMP\r\n                ? \"KMP Temps d'Execution (ms)\"\r\n                : \"Automate Temps d'Execution (ms)\",\r\n              data: kmpTimes || [],\r\n              backgroundColor: \"rgba(75, 192, 192, 0.6)\",\r\n              borderColor: \"rgba(75, 192, 192, 1)\",\r\n              borderWidth: 1,\r\n            },\r\n            {\r\n              label: \"egrep Execution Time (ms)\",\r\n              data: egrepTimes || [],\r\n              backgroundColor: \"rgba(255, 99, 132, 0.6)\",\r\n              borderColor: \"rgba(255, 99, 132, 1)\",\r\n              borderWidth: 1,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n              title: {\r\n                display: true,\r\n                text: \"Temps d'Execution (ms)\",\r\n              },\r\n            },\r\n            x: {\r\n              title: {\r\n                display: true,\r\n                text: \"Iterations\",\r\n              },\r\n            },\r\n          },\r\n          responsive: true,\r\n          plugins: {\r\n            legend: {\r\n              display: true,\r\n              position: \"top\",\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      // Cleanup the chart when the component unmounts\r\n      return () => {\r\n        chart.destroy();\r\n      };\r\n    }\r\n  }, [isKMP, kmpTimes, egrepTimes]);\r\n\r\n  return <canvas id=\"executionTimeChart\"></canvas>;\r\n};\r\n\r\nexport default ExecutionTimeChart;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAAEC,aAAa,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhDH,KAAK,CAACI,QAAQ,CAAC,GAAGH,aAAa,CAAC;AAEhC,MAAMI,kBAAkB,GAAGA,CAAC;EAAEC,KAAK;EAAEC,QAAQ;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EAC9DV,KAAK,CAACW,SAAS,CAAC,MAAM;IAAA,IAAAC,qBAAA;IACpB,MAAMC,GAAG,IAAAD,qBAAA,GAAGE,QAAQ,CAACC,cAAc,CAAC,oBAAoB,CAAC,cAAAH,qBAAA,uBAA7CA,qBAAA,CAA+CI,UAAU,CAAC,IAAI,CAAC;IAE3E,IAAIH,GAAG,EAAE;MACP,MAAMI,KAAK,GAAG,IAAIhB,KAAK,CAACY,GAAG,EAAE;QAC3BK,IAAI,EAAE,KAAK;QAAE;QACbC,IAAI,EAAE;UACJC,MAAM,EAAE,CAAAZ,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEa,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAK,aAAaA,KAAK,GAAG,CAAC,EAAE,CAAC,KAAI,EAAE;UAAE;UACrEC,QAAQ,EAAE,CACR;YACEC,KAAK,EAAElB,KAAK,GACR,4BAA4B,GAC5B,iCAAiC;YACrCY,IAAI,EAAEX,QAAQ,IAAI,EAAE;YACpBkB,eAAe,EAAE,yBAAyB;YAC1CC,WAAW,EAAE,uBAAuB;YACpCC,WAAW,EAAE;UACf,CAAC,EACD;YACEH,KAAK,EAAE,2BAA2B;YAClCN,IAAI,EAAEV,UAAU,IAAI,EAAE;YACtBiB,eAAe,EAAE,yBAAyB;YAC1CC,WAAW,EAAE,uBAAuB;YACpCC,WAAW,EAAE;UACf,CAAC;QAEL,CAAC;QACDC,OAAO,EAAE;UACPC,MAAM,EAAE;YACNC,CAAC,EAAE;cACDC,WAAW,EAAE,IAAI;cACjBC,KAAK,EAAE;gBACLC,OAAO,EAAE,IAAI;gBACbC,IAAI,EAAE;cACR;YACF,CAAC;YACDC,CAAC,EAAE;cACDH,KAAK,EAAE;gBACLC,OAAO,EAAE,IAAI;gBACbC,IAAI,EAAE;cACR;YACF;UACF,CAAC;UACDE,UAAU,EAAE,IAAI;UAChBC,OAAO,EAAE;YACPC,MAAM,EAAE;cACNL,OAAO,EAAE,IAAI;cACbM,QAAQ,EAAE;YACZ;UACF;QACF;MACF,CAAC,CAAC;;MAEF;MACA,OAAO,MAAM;QACXvB,KAAK,CAACwB,OAAO,CAAC,CAAC;MACjB,CAAC;IACH;EACF,CAAC,EAAE,CAAClC,KAAK,EAAEC,QAAQ,EAAEC,UAAU,CAAC,CAAC;EAEjC,oBAAOL,OAAA;IAAQsC,EAAE,EAAC;EAAoB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAS,CAAC;AAClD,CAAC;AAACpC,EAAA,CA9DIJ,kBAAkB;AAAAyC,EAAA,GAAlBzC,kBAAkB;AAgExB,eAAeA,kBAAkB;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}