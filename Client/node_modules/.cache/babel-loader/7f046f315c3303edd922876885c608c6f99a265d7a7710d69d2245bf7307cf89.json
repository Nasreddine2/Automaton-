{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Musha\\\\Desktop\\\\DAAR\\\\projet\\\\Projet 1\\\\Automaton-\\\\Client\\\\src\\\\app\\\\automate.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Modal } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport axios from \"axios\";\nimport ResultsTable from \"./tableau\";\nimport SyntaxTree from \"./arbre\";\nimport AutomateVisualizer from \"./visualiser\";\nimport ExecutionTimeChart from \"./chart\";\n\n// Compteur d'état global pour assurer des identifiants uniques\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet stateCounter = 0;\n\n// Classe Automate pour stocker les états et transitions\nclass Automate {\n  constructor() {\n    this.states = [];\n    this.transitions = [];\n    this.startState = null;\n    this.endStates = new Set(); // Utilisation d'un ensemble pour gérer plusieurs états finaux\n  }\n\n  // Fonction pour ajouter un état avec un identifiant unique\n  addState() {\n    const newState = stateCounter++;\n    this.states.push(newState);\n    return newState;\n  }\n  addTransition(from, to, symbol) {\n    this.transitions.push({\n      from,\n      to,\n      symbol\n    });\n  }\n  setStartState(state) {\n    this.startState = state;\n  }\n  setEndState(state) {\n    this.endStates.add(state); // Ajouter à l'ensemble des états finaux\n  }\n  getAutomate() {\n    return {\n      states: this.states,\n      transitions: this.transitions,\n      startState: this.startState,\n      endStates: this.endStates // Retourner les états finaux sous forme d'ensemble\n    };\n  }\n}\n\n// Fonction pour créer un automate pour un symbole\nconst createBaseAutomate = symbol => {\n  const automate = new Automate();\n  const start = automate.addState();\n  const end = automate.addState();\n  automate.addTransition(start, end, symbol);\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour concaténer deux automates\nconst concatenateAutomates = (automate1, automate2) => {\n  const automate = new Automate();\n\n  // Copier les états et transitions des deux automates\n  automate.states = [...automate1.states, ...automate2.states];\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\n\n  // Ajouter une transition epsilon entre la fin du premier automate et le début du second\n  automate.addTransition(automate1.endStates.values().next().value, automate2.startState, \"ε\");\n\n  // Définir les nouveaux états de départ et de fin\n  automate.setStartState(automate1.startState);\n  automate.setEndState(automate2.endStates.values().next().value);\n  return automate;\n};\n\n// Fonction pour gérer l'union de deux automates (opérateur |)\nconst unionAutomates = (automate1, automate2) => {\n  const automate = new Automate();\n  const start = automate.addState(); // Nouvel état de départ\n  const end = automate.addState(); // Nouvel état de fin\n\n  // Copier les états et transitions des deux automates\n  automate.states = [...automate1.states, ...automate2.states, start, end];\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\n\n  // Ajouter des transitions epsilon du nouvel état initial vers les deux sous-automates\n  automate.addTransition(start, automate1.startState, \"ε\");\n  automate.addTransition(start, automate2.startState, \"ε\");\n\n  // Ajouter des transitions epsilon des états finaux des sous-automates vers le nouvel état final\n  automate1.endStates.forEach(state => {\n    automate.addTransition(state, end, \"ε\");\n  });\n  automate2.endStates.forEach(state => {\n    automate.addTransition(state, end, \"ε\");\n  });\n\n  // Définir les nouveaux états de départ et de fin\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour gérer la fermeture de Kleene (opérateur *)\nconst kleeneAutomate = automate1 => {\n  const automate = new Automate();\n  const start = automate.addState(); // Nouvel état de départ\n  const end = automate.addState(); // Nouvel état de fin\n\n  // Copier les états et transitions du premier automate\n  automate.states = [...automate1.states, start, end];\n  automate.transitions = [...automate1.transitions];\n\n  // Ajouter des transitions epsilon pour la fermeture de Kleene\n  automate.addTransition(start, automate1.startState, \"ε\");\n  automate.addTransition(automate1.endStates.values().next().value, end, \"ε\");\n  automate.addTransition(automate1.endStates.values().next().value, automate1.startState, \"ε\"); // Boucle\n  automate.addTransition(start, end, \"ε\"); // Transition directe\n\n  // Définir les nouveaux états de départ et de fin\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour gérer l'opérateur +\nconst plusAutomate = automate1 => {\n  const automate = new Automate();\n  const start = automate.addState(); // Nouvel état de départ\n  const end = automate.addState(); // Nouvel état de fin\n\n  // Copier les états et transitions du premier automate\n  automate.states = [...automate1.states, start, end];\n  automate.transitions = [...automate1.transitions];\n\n  // Ajouter des transitions epsilon pour l'opérateur +\n  automate.addTransition(start, automate1.startState, \"ε\");\n  automate.addTransition(automate1.endStates.values().next().value, end, \"ε\");\n  automate.addTransition(automate1.endStates.values().next().value, automate1.startState, \"ε\"); // Boucle\n\n  // Définir les nouveaux états de départ et de fin\n  automate.setStartState(start);\n  automate.setEndState(end);\n  return automate;\n};\n\n// Fonction pour insérer les concaténations implicites dans une regex\nconst ajouterConcatImpl = regex => {\n  let resultat = \"\";\n  for (let i = 0; i < regex.length; i++) {\n    const char = regex[i];\n    resultat += char;\n\n    // Ajouter une concaténation implicite si nécessaire\n    if (i + 1 < regex.length) {\n      const nextChar = regex[i + 1];\n\n      // Condition pour ajouter une concaténation implicite\n      if (char !== \"(\" && char !== \"|\" && char !== \".\" &&\n      // Si le caractère actuel n'est pas un opérateur\n      nextChar !== \")\" && nextChar !== \"|\" && nextChar !== \"*\" && nextChar !== \"+\" && nextChar !== \".\" // Si le prochain caractère n'est pas un opérateur\n      ) {\n        resultat += \".\"; // Ajouter une concaténation explicite\n      }\n    }\n  }\n  return resultat;\n};\n\n// Fonction pour parser une expression régulière en respectant les priorités et les parenthèses\nconst parseRegex = regex => {\n  // Ajouter les concaténations implicites avant de parser\n  regex = ajouterConcatImpl(regex);\n  const precedence = {\n    \"|\": 1,\n    \".\": 2,\n    \"*\": 3,\n    \"+\": 3\n  };\n  const operators = [];\n  const output = [];\n  const isOperator = char => [\"|\", \".\", \"*\", \"+\"].includes(char);\n  const applyOperator = () => {\n    const operator = operators.pop();\n    if (operator === \".\") {\n      const b = output.pop();\n      const a = output.pop();\n      output.push([\".\", a, b]);\n    } else if (operator === \"|\") {\n      const b = output.pop();\n      const a = output.pop();\n      output.push([\"|\", a, b]);\n    } else if (operator === \"*\") {\n      const a = output.pop();\n      output.push([\"*\", a]);\n    } else if (operator === \"+\") {\n      const a = output.pop();\n      output.push([\"+\", a]);\n    }\n  };\n  let i = 0;\n  while (i < regex.length) {\n    const char = regex[i];\n    if (char === \"(\") {\n      // Trouver la sous-expression entre parenthèses\n      let j = i;\n      let openParentheses = 1;\n      while (openParentheses > 0 && ++j < regex.length) {\n        if (regex[j] === \"(\") openParentheses++;\n        if (regex[j] === \")\") openParentheses--;\n      }\n\n      // Appeler récursivement `parseRegex` sur la sous-expression\n      const subexpression = regex.slice(i + 1, j);\n      output.push(parseRegex(subexpression));\n      i = j; // Avancer jusqu'à la parenthèse fermante\n    } else if (!isOperator(char)) {\n      output.push(char); // Ajouter les symboles au output\n    } else {\n      while (operators.length > 0 && operators[operators.length - 1] !== \"(\" && precedence[operators[operators.length - 1]] >= precedence[char]) {\n        applyOperator();\n      }\n      operators.push(char);\n    }\n    i++;\n  }\n\n  // Appliquer les opérateurs restants\n  while (operators.length > 0) {\n    applyOperator();\n  }\n  return output[0];\n};\n\n// Fonction pour parcourir l'arbre syntaxique et créer l'automate\nconst parseArbre = arbre => {\n  if (typeof arbre === \"string\") {\n    return createBaseAutomate(arbre); // Si c'est un symbole\n  }\n  const [op, ...args] = arbre;\n  switch (op) {\n    case \".\":\n      {\n        // Concaténation\n        let result = parseArbre(args[0]);\n        for (let i = 1; i < args.length; i++) {\n          result = concatenateAutomates(result, parseArbre(args[i]));\n        }\n        return result;\n      }\n    case \"|\":\n      {\n        // Union\n        let result = parseArbre(args[0]);\n        for (let i = 1; i < args.length; i++) {\n          result = unionAutomates(result, parseArbre(args[i]));\n        }\n        return result;\n      }\n    case \"*\":\n      {\n        // Fermeture de Kleene\n        return kleeneAutomate(parseArbre(args[0]));\n      }\n    case \"+\":\n      {\n        // L'opérateur +\n        return plusAutomate(parseArbre(args[0]));\n      }\n    default:\n      throw new Error(`Opérateur non supporté: ${op}`);\n  }\n};\n\n//\n\n//\n\n// Fonction pour calculer le tableau LPS (Longest Prefix Suffix)\nconst computeLPSArray = (pat, M, lps) => {\n  let len = 0;\n  let i = 1;\n  lps[0] = 0;\n  while (i < M) {\n    if (pat[i] === pat[len]) {\n      len++;\n      lps[i] = len;\n      i++;\n    } else {\n      if (len !== 0) {\n        len = lps[len - 1];\n      } else {\n        lps[i] = 0;\n        i++;\n      }\n    }\n  }\n};\n\n// Algorithme KMP\nconst KMPSearch = (txt, pat) => {\n  const M = pat.length;\n  const N = txt.length;\n  const lpsTable = new Array(M).fill(0);\n  computeLPSArray(pat, M, lpsTable);\n  let i = 0; // Index pour txt[]\n  let j = 0; // Index pour pat[]\n  const positions = [];\n  while (i < N) {\n    if (pat[j] === txt[i]) {\n      i++;\n      j++;\n    }\n    if (j === M) {\n      positions.push(i - j);\n      j = lpsTable[j - 1];\n    } else if (i < N && pat[j] !== txt[i]) {\n      if (j !== 0) {\n        j = lpsTable[j - 1];\n      } else {\n        i++;\n      }\n    }\n  }\n  return {\n    positions,\n    lpsTable\n  };\n};\n\n// Test de la fonction avec un texte contenant des espaces\n_c = KMPSearch;\nconst txt = \"state--Sargon and Merodach-baladan--Sennacherib's attempt\";\nconst pat = \"Sargon\";\nconst result = KMPSearch(txt, pat);\n\n// Affichage des résultats\nconsole.log(\"Positions trouvées :\", result.positions); // Affiche les positions où le motif a été trouvé\nconsole.log(\"Tableau LPS :\", result.lpsTable); // Affiche le tableau LPS\n\n//\n\n//\n\n//\n\n// Fonction pour générer l'automate à partir d'une expression régulière\nconst construireAutomate = regex => {\n  const arbre = parseRegex(regex); // Construire l'arbre syntaxique à partir du regex\n\n  return parseArbre(arbre); // Construire l'automate à partir de l'arbre syntaxique\n};\n\n// Fonction pour tester si une sous-chaîne est acceptée par l'automate\nconst estAccepte = (automate, chaine, index = 0, etatCourant = automate.startState) => {\n  if (index === chaine.length) {\n    return automate.endStates.has(etatCourant); // Vérifier si l'état courant est un état final\n  }\n  const symbol = chaine[index];\n  let transitions = automate.transitions.filter(t => t.from === etatCourant);\n\n  // Parcourir les transitions epsilon\n  for (let trans of transitions) {\n    if (trans.symbol === \"ε\") {\n      if (estAccepte(automate, chaine, index, trans.to)) {\n        return true;\n      }\n    }\n  }\n\n  // Parcourir les transitions pour le symbole courant\n  for (let trans of transitions) {\n    if (trans.symbol === symbol) {\n      if (estAccepte(automate, chaine, index + 1, trans.to)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// Fonction pour tester si une sous-chaîne (motif) est présente dans un mot\nconst testMotifDansMot = (automate, mot) => {\n  // Essayer toutes les sous-chaînes du mot pour trouver le motif\n  for (let i = 0; i < mot.length; i++) {\n    for (let j = i; j <= mot.length; j++) {\n      const sousChaine = mot.slice(i, j);\n      if (estAccepte(automate, sousChaine)) {\n        return true; // Si une sous-chaîne correspond au motif, retourner vrai\n      }\n    }\n  }\n  return false;\n};\n\n// Fonction pour tester toutes les sous-chaînes acceptées dans une ligne de texte\nconst TestTxt = (automate, line) => {\n  const mots = line.split(\" \"); // Diviser la ligne en mots\n  for (let mot of mots) {\n    if (testMotifDansMot(automate, mot)) {\n      return true; // Si un mot contient le motif, retourner vrai\n    }\n  }\n  return false; // Si aucun mot ne contient le motif, retourner faux\n};\n\n// Fonction pour calculer la fermeture epsilon d'un état donné\n_c2 = TestTxt;\nconst epsilonClosure = (automate, state) => {\n  const closure = new Set([state]);\n  const stack = [state];\n  while (stack.length > 0) {\n    const currentState = stack.pop();\n    const epsilonTransitions = automate.transitions.filter(t => t.from === currentState && t.symbol === \"ε\");\n    for (const transition of epsilonTransitions) {\n      if (!closure.has(transition.to)) {\n        closure.add(transition.to);\n        stack.push(transition.to);\n      }\n    }\n  }\n  return closure;\n};\n\n// Fonction pour calculer la fermeture epsilon d'un ensemble d'états\nconst epsilonClosureSet = (automate, states) => {\n  let closure = new Set();\n  for (const state of states) {\n    closure = new Set([...closure, ...epsilonClosure(automate, state)]);\n  }\n  return closure;\n};\n\n// Fonction pour calculer la transition d'un ensemble d'états sur un symbole donné\nconst move = (automate, states, symbol) => {\n  const nextStates = new Set();\n  for (const state of states) {\n    const transitions = automate.transitions.filter(t => t.from === state && t.symbol === symbol);\n    for (const transition of transitions) {\n      nextStates.add(transition.to);\n    }\n  }\n  return nextStates;\n};\n\n// Fonction pour déterminiser un automate non déterministe avec epsilon transitions\nconst determinizeAutomate = nfa => {\n  const dfa = new Automate();\n  const alphabet = Array.from(new Set(nfa.transitions.map(t => t.symbol).filter(s => s !== \"ε\")));\n  const initialClosure = epsilonClosure(nfa, nfa.startState);\n  const dfaStatesMap = new Map();\n  dfaStatesMap.set(JSON.stringify([...initialClosure]), dfa.addState());\n  dfa.setStartState(dfaStatesMap.get(JSON.stringify([...initialClosure])));\n  const unprocessedStates = [initialClosure];\n  while (unprocessedStates.length > 0) {\n    const currentSet = unprocessedStates.pop();\n    const currentStateId = dfaStatesMap.get(JSON.stringify([...currentSet]));\n\n    // Vérifier si l'un des états de l'ensemble est un état final du NFA\n    if ([...currentSet].some(state => nfa.endStates.has(state))) {\n      dfa.setEndState(currentStateId); // Marquer cet état comme final dans le DFA\n    }\n    for (const symbol of alphabet) {\n      const nextSet = epsilonClosureSet(nfa, move(nfa, currentSet, symbol));\n      if (nextSet.size === 0) continue; // Ignorer les ensembles vides\n\n      const nextSetKey = JSON.stringify([...nextSet]);\n      if (!dfaStatesMap.has(nextSetKey)) {\n        const newState = dfa.addState();\n        dfaStatesMap.set(nextSetKey, newState);\n        unprocessedStates.push(nextSet);\n      }\n      dfa.addTransition(currentStateId, dfaStatesMap.get(nextSetKey), symbol);\n    }\n  }\n  return dfa;\n};\nconst removeInaccessibleStates = automate => {\n  const reachableStates = new Set([automate.startState]);\n  const stack = [automate.startState];\n  while (stack.length > 0) {\n    const currentState = stack.pop();\n    const transitions = automate.transitions.filter(t => t.from === currentState);\n    for (const transition of transitions) {\n      if (!reachableStates.has(transition.to)) {\n        reachableStates.add(transition.to);\n        stack.push(transition.to);\n      }\n    }\n  }\n\n  // Filtrer les états et les transitions pour ne conserver que les états accessibles\n  automate.states = automate.states.filter(state => reachableStates.has(state));\n  automate.transitions = automate.transitions.filter(t => reachableStates.has(t.from) && reachableStates.has(t.to));\n  return automate;\n};\n\n// Fonction pour effectuer la minimisation avec l'algorithme de Moore\nconst minimizeAutomate = dfa => {\n  // Étape 1: Supprimer les états inaccessibles\n  removeInaccessibleStates(dfa);\n\n  // Étape 2: Partitionner les états en deux ensembles: états finaux et non finaux\n  let partitions = [new Set(), new Set()];\n  dfa.states.forEach(state => {\n    if (dfa.endStates.has(state)) {\n      partitions[0].add(state); // États finaux\n    } else {\n      partitions[1].add(state); // États non finaux\n    }\n  });\n  let stable = false;\n  const alphabet = Array.from(new Set(dfa.transitions.map(t => t.symbol)));\n\n  // Étape 3: Raffiner les partitions\n  while (!stable) {\n    stable = true;\n    const newPartitions = [];\n    const partitionsCopy = partitions.slice();\n    for (const partition of partitionsCopy) {\n      const partitionMap = new Map();\n      for (const state of partition) {\n        const signature = alphabet.map(symbol => {\n          const transition = dfa.transitions.find(t => t.from === state && t.symbol === symbol);\n          const targetState = transition ? transition.to : null;\n\n          // Trouver la partition contenant l'état cible\n          const partitionIndex = partitionsCopy.findIndex(p => p.has(targetState));\n          return partitionIndex;\n        }).join(\"-\");\n        if (!partitionMap.has(signature)) {\n          partitionMap.set(signature, new Set());\n        }\n        partitionMap.get(signature).add(state);\n      }\n\n      // Ajouter les nouvelles partitions\n      newPartitions.push(...partitionMap.values());\n    }\n\n    // Si les partitions ont changé, on continue la boucle\n    if (newPartitions.length !== partitions.length) {\n      stable = false;\n    }\n    partitions = newPartitions;\n  }\n\n  // Étape 4: Construire le nouvel automate minimisé\n  const minimizedAutomate = new Automate();\n  const stateMap = new Map(); // Map pour relier les anciens états aux nouveaux états\n\n  partitions.forEach((partition, index) => {\n    const newState = minimizedAutomate.addState();\n    partition.forEach(state => stateMap.set(state, newState));\n\n    // Marquer l'état comme final s'il contient un ancien état final\n    if ([...partition].some(state => dfa.endStates.has(state))) {\n      minimizedAutomate.setEndState(newState);\n    }\n  });\n\n  // Recréer les transitions dans l'automate minimisé sans duplicata\n  dfa.transitions.forEach(t => {\n    const fromState = stateMap.get(t.from);\n    const toState = stateMap.get(t.to);\n\n    // Vérifier si la transition existe déjà\n    if (!minimizedAutomate.transitions.some(trans => trans.from === fromState && trans.to === toState && trans.symbol === t.symbol)) {\n      minimizedAutomate.addTransition(fromState, toState, t.symbol);\n    }\n  });\n\n  // Définir l'état initial\n  minimizedAutomate.setStartState(stateMap.get(dfa.startState));\n  return minimizedAutomate;\n};\n\n//\n\n//\n\n// Fonction pour mesurer le temps moyen d'exécution sur plusieurs itérations KMP\nconst measureExecutionTime = (txt, pat, numIterations) => {\n  const res = [];\n  for (let i = 0; i < numIterations; i++) {\n    const startTime = performance.now();\n    KMPSearch(txt, pat);\n    const endTime = performance.now();\n    const iterationTime = parseFloat((endTime - startTime).toFixed(2)); // Arrondir à 2 décimales\n    if (iterationTime > 0.01) {\n      // Filtre les valeurs proches de 0\n      res.push({\n        iteration: i + 1,\n        time: iterationTime\n      });\n    }\n  }\n  return res;\n};\n\n// Fonction pour mesurer le temps moyen d'exécution sur plusieurs itérations AUTOMATE\nconst measureExecutionTimeAutomate = (txt, pat, numIterations) => {\n  const res = [];\n  for (let i = 0; i < numIterations; i++) {\n    const startTime = performance.now();\n    const automate = construireAutomate(pat); // Générer l'automate à partir du regex\n    const dfa = determinizeAutomate(automate); // Déterminiser l'automate\n    const minDfa = minimizeAutomate(dfa); // Minimiser l'automate déterminisé\n\n    TestTxt(minDfa, txt);\n    const endTime = performance.now();\n    const iterationTime = parseFloat((endTime - startTime).toFixed(2)); // Arrondir à 2 décimales\n    if (iterationTime > 0.01) {\n      // Filtre les valeurs proches de 0\n      res.push({\n        iteration: i + 1,\n        time: iterationTime\n      });\n    }\n  }\n  return res;\n};\n\n//\n\n//\n\n// Composant principal de l'application\nconst Automaton = () => {\n  _s();\n  var _timesearch$results, _timesearch$egrep, _timesearch$results2, _timesearch$egrep2, _timesearch$results3, _timesearch$egrep3, _timesearch$results4, _timesearch$egrep4;\n  const [arbre, setArbre] = useState(null); // Arbre syntaxique\n  const [automate, setAutomate] = useState(null); // Automate (NFA ou DFA)\n  const [detAutomate, setDetAutomate] = useState(null); // Automate déterminisé (DFA)\n  const [MinAutomate, setMinAutomate] = useState(null); // Automate Min (Min)\n  const [regex, setRegex] = useState(\"\");\n  const [fileContent, setFileContent] = useState(\"\");\n  const [fileTextContent, setFileTextContent] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [searchkmp, setSearchKmp] = useState(false);\n  const [searchAutomate, setSearchAutomate] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [iterations, setIterations] = useState(1);\n  const [executionTime, setExecutionTime] = useState(null); // Temps moyen d'exécution\n  const [medianTime, setMedianTime] = useState(null); // Temps d'exécution médian\n  const [executionTimeEgrep, setExecutionTimeEgrep] = useState(null); // Temps moyen d'exécution\n  const [medianTimeEgrep, setMedianTimeEgrep] = useState(null); // Temps d'exécution médian\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [showTime, setShowTime] = useState(false);\n  const [textTime, setTextTime] = useState(\"Test Performance\");\n  const [nbiteration, setNbiteration] = useState(1);\n  //\n  const [timesearch, setTimesearch] = useState(null);\n  const [resegrep, setResegrep] = useState(null);\n  const [fileInputKey, setFileInputKey] = useState(Date.now());\n  //\n\n  const isKmp = () => {\n    if (regex.length > 0) {\n      if (regex.includes(\"|\") || regex.includes(\"*\") || regex.includes(\"+\") || regex.includes(\".\") || regex.includes(\"(\") || regex.includes(\")\") || regex.includes(\"ε\")) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n  };\n  // Fonction pour générer l'arbre syntaxique à partir de l'expression régulière\n  const handleGenerateArbre = async () => {\n    return new Promise(resolve => {\n      stateCounter = 0; // Réinitialiser le compteur d'état\n      const arbre = parseRegex(regex); // Générer l'arbre à partir du regex\n      setArbre(arbre); // Stocker l'arbre\n      setAutomate(null); // Réinitialiser l'automate\n      setDetAutomate(null); // Réinitialiser l'automate déterminisé\n      setMinAutomate(null); // Réinitialiser l'automate minimisé\n      resolve(); // Marquer la fonction comme terminée\n    });\n  };\n\n  // Fonction pour générer l'automate (NFA)\n  const handleGenerateAutomate = async () => {\n    return new Promise(resolve => {\n      stateCounter = 0; // Réinitialiser le compteur d'état\n      const automate = construireAutomate(regex); // Générer l'automate à partir du regex\n      setAutomate(automate); // Stocker l'automate NFA\n\n      setDetAutomate(null); // Réinitialiser l'automate déterminisé\n      setMinAutomate(null); // Réinitialiser l'automate minimisé\n      resolve(); // Marquer la fonction comme terminée\n    });\n  };\n\n  // Fonction pour déterminiser l'automate (NFA -> DFA)\n  const handleDeterminizeAutomate = async () => {\n    return new Promise(resolve => {\n      if (automate) {\n        const dfa = determinizeAutomate(automate); // Déterminiser l'automate\n        setDetAutomate(dfa); // Stocker l'automate déterminisé\n        setMinAutomate(null); // Réinitialiser l'automate minimisé\n      }\n      resolve(); // Marquer la fonction comme terminée\n    });\n  };\n\n  // Fonction pour minimiser l'automate déterminisé (DFA)\n  const handleMinimizeAutomate = async () => {\n    return new Promise(resolve => {\n      if (detAutomate) {\n        const minDfa = minimizeAutomate(detAutomate); // Minimiser l'automate déterminisé\n        setMinAutomate(minDfa); // Stocker l'automate minimisé\n      }\n      resolve(); // Marquer la fonction comme terminée\n    });\n  };\n\n  // Fonction de recherche utilisant l'automate\n  const handleSearch = async () => {\n    if (!MinAutomate) return; // Si l'automate minimisé est null, arrêter\n\n    const lines = fileTextContent.split(\"\\n\"); // Diviser le contenu du fichier par ligne\n\n    const results = lines.map((line, index) => ({\n      lineNumber: index + 1,\n      // Numéro de la ligne (index commence à 0, donc +1)\n      lineText: line,\n      // Le texte de la ligne\n      matches: TestTxt(MinAutomate, line) // Tester la ligne avec l'automate\n    })).filter(result => result.matches);\n    setSearchResults(results); // Stocker les résultats\n  };\n\n  // Fonction pour charger le fichier\n\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    setSelectedFile(file);\n    if (file) {\n      setFileContent(file);\n      const reader = new FileReader();\n      reader.onload = () => {\n        setFileTextContent(reader.result);\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  //\n\n  // Fonction de recherche utilisant KMP\n  // Fonction pour tester chaque ligne du fichier avec le pattern\n  const handleSearchKMP = () => {\n    const lines = fileTextContent.split(\"\\n\");\n    const res = [];\n    lines.forEach((line, index) => {\n      const {\n        positions,\n        lpsTable\n      } = KMPSearch(line, regex);\n      if (positions.length > 0) {\n        res.push({\n          lineNumber: index + 1,\n          lineText: line,\n          positions,\n          lpsTable\n        });\n      }\n      console.log(lpsTable);\n    });\n    setSearchResults(res); // Stocker les résultats de la recherche\n  };\n  const handleAll = async () => {\n    if (!regex || !fileTextContent) return alert(\"Veuillez sélectionner un fichier et entrer un motif !\");\n    setSearchResults([]); // Réinitialiser les résultats de la recherche\n\n    // Vérifier si on utilise KMP ou l'automate\n    if (isKmp()) {\n      setSearchKmp(true);\n      setSearchAutomate(false);\n      handleSearchKMP(); // Exécuter la recherche avec KMP\n    } else {\n      setSearchKmp(false);\n      setSearchAutomate(true);\n      try {\n        // Générer l'arbre\n        await handleGenerateArbre();\n\n        // Générer l'automate\n        await handleGenerateAutomate();\n\n        // Déterminiser l'automate\n        await handleDeterminizeAutomate();\n\n        // Minimiser l'automate déterminisé\n        await handleMinimizeAutomate();\n      } catch (error) {\n        console.error(\"Erreur lors du traitement de l'automate :\", error);\n      }\n    }\n  };\n\n  //\n\n  //\n\n  const handleEgrep = async () => {\n    if (!fileContent || !regex) {\n      alert(\"Veuillez sélectionner un fichier et entrer un motif !\");\n      return null; // Retourner null si une erreur se produit\n    }\n    const formData = new FormData();\n    formData.append(\"file\", fileContent);\n    formData.append(\"pattern\", regex);\n    formData.append(\"iterations\", iterations);\n    try {\n      const response = await axios.post(\"http://localhost:3001/run-egrep\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      const results = response.data.details.results;\n      setResegrep(results); // Mettez à jour l'état avec les résultats\n      console.log(results);\n      return results; // Retourner les résultats pour les utiliser dans handleAllTime\n    } catch (error) {\n      console.error(\"Erreur lors de l'exécution egrep:\", error);\n      alert(\"Une erreur est survenue lors de l'exécution egrep\");\n      return null; // Retourner null en cas d'erreur\n    }\n  };\n  const handleAllTime = async () => {\n    // Ajouter async ici\n    if (!regex || !fileTextContent) {\n      return alert(\"Veuillez sélectionner un fichier et entrer un motif !\");\n    }\n    setSearchResults([]); // Réinitialiser les résultats de la recherche\n\n    // Attendre les résultats de handleEgrep\n    const egrepResults = await handleEgrep();\n    // if (!egrepResults) {\n    //   return; // Sortir si handleEgrep a échoué\n    // }\n\n    let res = [];\n    if (isKmp()) {\n      setSearchKmp(true);\n      setSearchAutomate(false);\n      res = measureExecutionTime(fileTextContent, regex, iterations); // Mesurer le temps\n\n      let averageTime = 0;\n      let medianTime = 0;\n      if (res && res.length > 0) {\n        averageTime = res.reduce((acc, curr) => acc + curr.time, 0) / res.length;\n        medianTime = res[Math.floor(res.length / 2)].time;\n      } else {\n        console.warn(\"Aucun résultat n'a été retourné par measureExecutionTime.\");\n      }\n      setExecutionTime(averageTime); // Stocker le temps d'exécution moyen\n      setMedianTime(medianTime); // Stocker le temps d'exécution médian\n      setNbiteration(iterations);\n    } else {\n      setSearchKmp(false);\n      setSearchAutomate(true);\n      res = measureExecutionTimeAutomate(fileTextContent, regex, iterations); // Mesurer le temps\n\n      let averageTime = 0;\n      let medianTime = 0;\n      if (res && res.length > 0) {\n        averageTime = res.reduce((acc, curr) => acc + curr.time, 0) / res.length;\n        medianTime = res[Math.floor(res.length / 2)].time;\n      } else {\n        console.warn(\"Aucun résultat n'a été retourné.\");\n      }\n      setExecutionTime(averageTime); // Stocker le temps d'exécution moyen\n      setMedianTime(medianTime); // Stocker le temps d'exécution médian\n      setNbiteration(iterations);\n    }\n\n    // Mettre à jour timesearch avec les résultats\n    setTimesearch({\n      results: res,\n      egrep: egrepResults\n    });\n    console.log(timesearch);\n  };\n\n  //\n\n  const handleReset = () => {\n    setRegex(\"\");\n    setFileContent(\"\");\n    setFileTextContent(\"\");\n    setArbre(null);\n    setAutomate(null);\n    setDetAutomate(null);\n    setMinAutomate(null);\n    setSearchResults([]);\n    setSearchKmp(false);\n    setSearchAutomate(false);\n    setShowModal(false);\n    setExecutionTime(null);\n    setMedianTime(null);\n    setExecutionTimeEgrep(null);\n    setMedianTimeEgrep(null);\n    setResegrep([]);\n    setNbiteration(1);\n    setIterations(1);\n    setSelectedFile(null);\n    setFileInputKey(Date.now()); // Générer une nouvelle clé\n  };\n\n  //\n\n  // Utiliser useEffect pour déclencher les étapes successives\n  useEffect(() => {\n    if (automate) {\n      handleDeterminizeAutomate(); // Déclencher la déterminisation après la génération de l'automate\n    }\n  }, [automate]);\n  useEffect(() => {\n    if (detAutomate) {\n      handleMinimizeAutomate(); // Déclencher la minimisation après la déterminisation de l'automate\n    }\n  }, [detAutomate]);\n  useEffect(() => {\n    if (MinAutomate) {\n      handleSearch(); // Déclencher la recherche après la minimisation de l'automate\n    }\n  }, [MinAutomate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \" vh-100\",\n    style: {\n      backgroundImage: \"url('bibliotheque.jpg')\",\n      backgroundSize: \"cover\",\n      backgroundPosition: \"center\",\n      repeat: \"non-repeat\",\n      backgroundColor: \"#f8f8f8\" // Couleur de fallback\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \" vh-100 d-flex justify-content-center align-items-center\",\n      style: {\n        backdropFilter: \"blur(6px)\" // Flou appliqué sur l'arrière-plan\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card container py-3 w-auto shadow-lg rounded\",\n        style: {\n          minHeight: \"400px\",\n          maxHeight: \"700px\",\n          // Limite la taille maximale\n          overflowY: \"auto\",\n          // Ajoute une barre de défilement si le contenu est trop long\n          background: \"rgba(255, 255, 255, 0.9)\" // Semi-transparente\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3 d-flex justify-content-between \",\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            className: \"text-decoration-none text-dark\",\n            children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: faArrowLeft\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1080,\n              columnNumber: 15\n            }, this), \" Retour\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1079,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary\",\n            onClick: () => {\n              if (showTime) {\n                setTextTime(\"Test Performance\");\n              } else {\n                setTextTime(\"Clone egrep\");\n              }\n              setShowTime(!showTime);\n              handleReset();\n            },\n            children: textTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1082,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1078,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: showTime ? /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"display-3 font-weight-bold text-primary m-5\",\n            children: \"Test Performance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1100,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"display-3 font-weight-bold text-success m-5\",\n            children: \"Clone egrep\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1104,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1098,\n          columnNumber: 11\n        }, this), showTime ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-3 d-flex flex-column justify-content-end\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"\",\n                children: [\"Regex:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                  value: regex,\n                  onChange: e => setRegex(e.target.value),\n                  className: \"form-control shadow-sm\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1116,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1114,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1113,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-4 d-flex flex-column justify-content-end\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"\",\n                children: [\"Fichier (.txt):\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"file\",\n                  onChange: handleFileUpload,\n                  accept: \".txt\",\n                  className: \"form-control shadow-sm\"\n                }, fileInputKey, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1126,\n                  columnNumber: 21\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1124,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1123,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-2 d-flex flex-column justify-content-end \",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"\",\n                children: [\"Iteration:\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  className: \"form-control shadow-sm\",\n                  placeholder: \"Enter number of iterations\",\n                  value: iterations,\n                  onChange: e => setIterations(parseInt(e.target.value))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1139,\n                  columnNumber: 21\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1137,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1136,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-3 d-flex flex-column justify-content-end \",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleAllTime,\n                className: \"btn btn-primary shadow-sm\",\n                children: \"Rechercher\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1149,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1148,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1112,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1111,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-4 d-flex flex-column justify-content-end mb-3 mt-3\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"\",\n                children: [\"Regex:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                  value: regex,\n                  onChange: e => setRegex(e.target.value),\n                  className: \"form-control\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1164,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1162,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1161,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-4 d-flex flex-column justify-content-end mb-3 mt-3\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"\",\n                children: [\"Fichier (.txt):\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"file\",\n                  onChange: handleFileUpload,\n                  accept: \".txt\",\n                  className: \"form-control shadow-sm\"\n                }, fileInputKey, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1174,\n                  columnNumber: 21\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1172,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1171,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-4 d-flex flex-column justify-content-end mb-3 mt-3\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleAll,\n                className: \"btn btn-primary\",\n                children: \"Rechercher\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1184,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1183,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1160,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1159,\n          columnNumber: 13\n        }, this), searchkmp ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-3 d-flex justify-content-between\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-warning mb-4\",\n              onClick: handleReset,\n              children: \"Reinitialiser\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1201,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-secondary mb-4\",\n              onClick: () => setShowModal(true),\n              children: \"Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1204,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1200,\n            columnNumber: 15\n          }, this), !showTime ? /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"mb-3\",\n            children: \"R\\xE9sultats de la recherche : L'algorithme Knuth-Morris-Pratt (KMP)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1212,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"mb-3\",\n            children: \"R\\xE9sultats du test de performance : L'algorithme Knuth-Morris-Pratt (KMP)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1217,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [searchResults.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"table-responsive mb-4\",\n                children: (searchResults === null || searchResults === void 0 ? void 0 : searchResults.length) > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n                  className: \"table table-striped table-bordered\",\n                  children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                        scope: \"col\",\n                        children: \"Num\\xE9ro de Ligne\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1230,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        scope: \"col\",\n                        children: \"Texte de la Ligne\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1231,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        scope: \"col\",\n                        children: \"Position(s)\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1232,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1229,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1228,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                    children: searchResults.map((res, index) => {\n                      var _res$lineNumber, _res$lineText;\n                      return /*#__PURE__*/_jsxDEV(\"tr\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                          children: (_res$lineNumber = res === null || res === void 0 ? void 0 : res.lineNumber) !== null && _res$lineNumber !== void 0 ? _res$lineNumber : \"-\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1238,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                          children: (_res$lineText = res === null || res === void 0 ? void 0 : res.lineText) !== null && _res$lineText !== void 0 ? _res$lineText : \"Texte indisponible\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1239,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                          children: Array.isArray(res === null || res === void 0 ? void 0 : res.positions) && res.positions.length > 0 ? res.positions.join(\", \") : \"Aucune position\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1240,\n                          columnNumber: 33\n                        }, this)]\n                      }, index, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1237,\n                        columnNumber: 31\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1235,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1227,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"alert alert-warning text-center\",\n                  role: \"alert\",\n                  children: \"Aucun r\\xE9sultat trouv\\xE9\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1251,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1225,\n                columnNumber: 21\n              }, this)\n            }, void 0, false), showTime && executionTime !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card container-fluid\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: timesearch && ((timesearch === null || timesearch === void 0 ? void 0 : (_timesearch$results = timesearch.results) === null || _timesearch$results === void 0 ? void 0 : _timesearch$results.length) > 0 || (timesearch === null || timesearch === void 0 ? void 0 : (_timesearch$egrep = timesearch.egrep) === null || _timesearch$egrep === void 0 ? void 0 : _timesearch$egrep.length) > 0) ? /*#__PURE__*/_jsxDEV(ExecutionTimeChart, {\n                  isKMP: searchkmp,\n                  Times: timesearch !== null && timesearch !== void 0 && timesearch.results ? timesearch.results.map(r => {\n                    var _r$time;\n                    return (_r$time = r === null || r === void 0 ? void 0 : r.time) !== null && _r$time !== void 0 ? _r$time : 0;\n                  }) // Par défaut à 0 si `r.time` est nul\n                  : [],\n                  egrepTimes: timesearch !== null && timesearch !== void 0 && timesearch.egrep ? timesearch.egrep.map(r => {\n                    var _r$executionTimeMs;\n                    return (_r$executionTimeMs = r === null || r === void 0 ? void 0 : r.executionTimeMs) !== null && _r$executionTimeMs !== void 0 ? _r$executionTimeMs : 0;\n                  }) // Par défaut à 0 si `r.executionTimeMs` est nul\n                  : []\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1269,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-center\",\n                  children: \"Chargement des donn\\xE9es...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1285,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1265,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1264,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1222,\n            columnNumber: 15\n          }, this), !showTime ? /*#__PURE__*/_jsxDEV(Modal, {\n            show: showModal,\n            onHide: () => setShowModal(false),\n            size: \"lg\",\n            centered: true,\n            children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n              children: [/*#__PURE__*/_jsxDEV(Modal.Title, {\n                children: \"Details\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1303,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"btn-close\",\n                onClick: () => setShowModal(false)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1305,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1302,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"table-responsive mb-4\",\n                children: searchResults.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n                  className: \"table table-striped table-bordered\",\n                  children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                        scope: \"col\",\n                        children: \"Ligne\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1318,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        scope: \"col\",\n                        children: \"Texte de la ligne\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1319,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        scope: \"col\",\n                        children: \"Positions\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1320,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        scope: \"col\",\n                        children: \"Tableau LPS\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1321,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1317,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1316,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                    children: searchResults.map((result, index) => {\n                      var _result$lineNumber, _result$lineText;\n                      return /*#__PURE__*/_jsxDEV(\"tr\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                          children: (_result$lineNumber = result.lineNumber) !== null && _result$lineNumber !== void 0 ? _result$lineNumber : \"-\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1327,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                          children: (_result$lineText = result.lineText) !== null && _result$lineText !== void 0 ? _result$lineText : \"Texte indisponible\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1328,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                          children: Array.isArray(result.positions) && result.positions.length > 0 ? result.positions.join(\", \") : \"Aucune position\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1331,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                          children: Array.isArray(result.lpsTable) && result.lpsTable.length > 0 ? result.lpsTable.join(\", \") : \"Aucun LPS disponible\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1337,\n                          columnNumber: 33\n                        }, this)]\n                      }, index, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1326,\n                        columnNumber: 31\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1324,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1315,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Aucun r\\xE9sultat trouv\\xE9.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1348,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1312,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1311,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1296,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Modal, {\n            show: showModal,\n            onHide: () => setShowModal(false),\n            size: \"lg\",\n            centered: true,\n            children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n              children: [/*#__PURE__*/_jsxDEV(Modal.Title, {\n                children: \"Details\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1361,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"btn-close\",\n                onClick: () => setShowModal(false)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1363,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1360,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n              children: timesearch && (((_timesearch$results2 = timesearch.results) === null || _timesearch$results2 === void 0 ? void 0 : _timesearch$results2.length) > 0 || ((_timesearch$egrep2 = timesearch.egrep) === null || _timesearch$egrep2 === void 0 ? void 0 : _timesearch$egrep2.length) > 0) ? /*#__PURE__*/_jsxDEV(ResultsTable, {\n                timesearch: timesearch\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1374,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-center\",\n                children: \"Chargement des r\\xE9sultats ou aucune donn\\xE9e disponible\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1376,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1370,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1354,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1199,\n          columnNumber: 13\n        }, this) : null, searchAutomate ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-3 d-flex justify-content-between\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-warning mb-4\",\n              onClick: handleReset,\n              children: \"Reinitialiser\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1390,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-secondary mb-4\",\n              onClick: () => setShowModal(true) // Open modal\n              ,\n              children: \"Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1393,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1389,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [!showTime ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"mb-3\",\n                children: \"R\\xE9sultats de la recherche : Automate\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1403,\n                columnNumber: 21\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1406,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"mb-3\",\n                children: \"R\\xE9sultats du test de performance :Automate\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1410,\n                columnNumber: 21\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1413,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true), searchResults && searchResults.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"table-responsive mb-4\",\n                children: (searchResults === null || searchResults === void 0 ? void 0 : searchResults.length) > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n                  className: \"table table-striped table-bordered\",\n                  children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                        scope: \"col\",\n                        children: \"Num\\xE9ro de Ligne\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1424,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        scope: \"col\",\n                        children: \"Texte de la Ligne\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1425,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1423,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1422,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                    children: searchResults.map((res, index) => {\n                      var _res$lineNumber2, _res$lineText2;\n                      return /*#__PURE__*/_jsxDEV(\"tr\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                          children: (_res$lineNumber2 = res === null || res === void 0 ? void 0 : res.lineNumber) !== null && _res$lineNumber2 !== void 0 ? _res$lineNumber2 : \"-\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1431,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                          children: (_res$lineText2 = res === null || res === void 0 ? void 0 : res.lineText) !== null && _res$lineText2 !== void 0 ? _res$lineText2 : \"Texte indisponible\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1432,\n                          columnNumber: 33\n                        }, this)]\n                      }, index, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1430,\n                        columnNumber: 31\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1428,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1421,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"alert alert-warning text-center\",\n                  role: \"alert\",\n                  children: \"Aucun r\\xE9sultat trouv\\xE9\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1438,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1419,\n                columnNumber: 21\n              }, this)\n            }, void 0, false), showTime && executionTime !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card container-fluid\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: timesearch && ((timesearch === null || timesearch === void 0 ? void 0 : (_timesearch$results3 = timesearch.results) === null || _timesearch$results3 === void 0 ? void 0 : _timesearch$results3.length) > 0 || (timesearch === null || timesearch === void 0 ? void 0 : (_timesearch$egrep3 = timesearch.egrep) === null || _timesearch$egrep3 === void 0 ? void 0 : _timesearch$egrep3.length) > 0) ? /*#__PURE__*/_jsxDEV(ExecutionTimeChart, {\n                    isKMP: searchkmp,\n                    Times: timesearch !== null && timesearch !== void 0 && timesearch.results ? timesearch.results.map(r => {\n                      var _r$time2;\n                      return (_r$time2 = r === null || r === void 0 ? void 0 : r.time) !== null && _r$time2 !== void 0 ? _r$time2 : 0;\n                    }) // Par défaut à 0 si `r.time` est nul\n                    : [],\n                    egrepTimes: timesearch !== null && timesearch !== void 0 && timesearch.egrep ? timesearch.egrep.map(r => {\n                      var _r$executionTimeMs2;\n                      return (_r$executionTimeMs2 = r === null || r === void 0 ? void 0 : r.executionTimeMs) !== null && _r$executionTimeMs2 !== void 0 ? _r$executionTimeMs2 : 0;\n                    }) // Par défaut à 0 si `r.executionTimeMs` est nul\n                    : []\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1456,\n                    columnNumber: 27\n                  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-center\",\n                    children: \"Chargement des donn\\xE9es...\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1472,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1452,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1451,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Analyse des Temps d'Ex\\xE9cution\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1479,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n                  className: \"table table-bordered mt-4\",\n                  children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                        scope: \"col\",\n                        children: \"Crit\\xE8re\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1483,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        scope: \"col\",\n                        children: \"Automate\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1484,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        scope: \"col\",\n                        children: \"egrep\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1485,\n                        columnNumber: 29\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1482,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1481,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                        children: \"Moyenne temps ex\\xE9cution\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1490,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: executionTime\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1491,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: \"67\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1492,\n                        columnNumber: 29\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1489,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                        children: \"M\\xE9diane temps ex\\xE9cution\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1495,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: ex\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1496,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: \"32\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1497,\n                        columnNumber: 29\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1494,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1488,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1480,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1478,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1450,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1400,\n            columnNumber: 15\n          }, this), !showTime ? /*#__PURE__*/_jsxDEV(Modal, {\n            show: showModal,\n            onHide: () => setShowModal(false),\n            size: \"lg\",\n            centered: true,\n            children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n              children: [/*#__PURE__*/_jsxDEV(Modal.Title, {\n                children: \"Details\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1514,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"btn-close\",\n                onClick: () => setShowModal(false)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1516,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1513,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n              children: [arbre && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mb-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Arbre syntaxique\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1525,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(SyntaxTree, {\n                  node: arbre\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1526,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: JSON.stringify(arbre, null, 3)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1527,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1524,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1530,\n                columnNumber: 21\n              }, this), automate && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mb-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Automate (NFA)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1533,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(AutomateVisualizer, {\n                  automate: automate\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1534,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1532,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1537,\n                columnNumber: 21\n              }, this), detAutomate && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mb-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Automate D\\xE9terminis\\xE9 (DFA)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1540,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(AutomateVisualizer, {\n                  automate: detAutomate\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1541,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1539,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1544,\n                columnNumber: 21\n              }, this), MinAutomate && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mb-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Automate Minimis\\xE9 (Min)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1547,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(AutomateVisualizer, {\n                  automate: MinAutomate\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1548,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1546,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1522,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1507,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Modal, {\n            show: showModal,\n            onHide: () => setShowModal(false),\n            size: \"lg\",\n            centered: true,\n            children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n              children: [/*#__PURE__*/_jsxDEV(Modal.Title, {\n                children: \"Details\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1561,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"btn-close\",\n                onClick: () => setShowModal(false)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1563,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1560,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n              children: timesearch && (((_timesearch$results4 = timesearch.results) === null || _timesearch$results4 === void 0 ? void 0 : _timesearch$results4.length) > 0 || ((_timesearch$egrep4 = timesearch.egrep) === null || _timesearch$egrep4 === void 0 ? void 0 : _timesearch$egrep4.length) > 0) ? /*#__PURE__*/_jsxDEV(ResultsTable, {\n                timesearch: timesearch\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1574,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-center\",\n                children: \"Chargement des r\\xE9sultats ou aucune donn\\xE9e disponible\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1576,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1570,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1554,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1386,\n          columnNumber: 13\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1069,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1063,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1053,\n    columnNumber: 5\n  }, this);\n};\n_s(Automaton, \"CfgjM7Ca+uJfMtjr6yCG1lHwGnc=\");\n_c3 = Automaton;\nexport default Automaton;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"KMPSearch\");\n$RefreshReg$(_c2, \"TestTxt\");\n$RefreshReg$(_c3, \"Automaton\");","map":{"version":3,"names":["React","useState","useEffect","Link","Modal","FontAwesomeIcon","faArrowLeft","axios","ResultsTable","SyntaxTree","AutomateVisualizer","ExecutionTimeChart","jsxDEV","_jsxDEV","Fragment","_Fragment","stateCounter","Automate","constructor","states","transitions","startState","endStates","Set","addState","newState","push","addTransition","from","to","symbol","setStartState","state","setEndState","add","getAutomate","createBaseAutomate","automate","start","end","concatenateAutomates","automate1","automate2","values","next","value","unionAutomates","forEach","kleeneAutomate","plusAutomate","ajouterConcatImpl","regex","resultat","i","length","char","nextChar","parseRegex","precedence","operators","output","isOperator","includes","applyOperator","operator","pop","b","a","j","openParentheses","subexpression","slice","parseArbre","arbre","op","args","result","Error","computeLPSArray","pat","M","lps","len","KMPSearch","txt","N","lpsTable","Array","fill","positions","_c","console","log","construireAutomate","estAccepte","chaine","index","etatCourant","has","filter","t","trans","testMotifDansMot","mot","sousChaine","TestTxt","line","mots","split","_c2","epsilonClosure","closure","stack","currentState","epsilonTransitions","transition","epsilonClosureSet","move","nextStates","determinizeAutomate","nfa","dfa","alphabet","map","s","initialClosure","dfaStatesMap","Map","set","JSON","stringify","get","unprocessedStates","currentSet","currentStateId","some","nextSet","size","nextSetKey","removeInaccessibleStates","reachableStates","minimizeAutomate","partitions","stable","newPartitions","partitionsCopy","partition","partitionMap","signature","find","targetState","partitionIndex","findIndex","p","join","minimizedAutomate","stateMap","fromState","toState","measureExecutionTime","numIterations","res","startTime","performance","now","endTime","iterationTime","parseFloat","toFixed","iteration","time","measureExecutionTimeAutomate","minDfa","Automaton","_s","_timesearch$results","_timesearch$egrep","_timesearch$results2","_timesearch$egrep2","_timesearch$results3","_timesearch$egrep3","_timesearch$results4","_timesearch$egrep4","setArbre","setAutomate","detAutomate","setDetAutomate","MinAutomate","setMinAutomate","setRegex","fileContent","setFileContent","fileTextContent","setFileTextContent","searchResults","setSearchResults","searchkmp","setSearchKmp","searchAutomate","setSearchAutomate","showModal","setShowModal","iterations","setIterations","executionTime","setExecutionTime","medianTime","setMedianTime","executionTimeEgrep","setExecutionTimeEgrep","medianTimeEgrep","setMedianTimeEgrep","selectedFile","setSelectedFile","showTime","setShowTime","textTime","setTextTime","nbiteration","setNbiteration","timesearch","setTimesearch","resegrep","setResegrep","fileInputKey","setFileInputKey","Date","isKmp","handleGenerateArbre","Promise","resolve","handleGenerateAutomate","handleDeterminizeAutomate","handleMinimizeAutomate","handleSearch","lines","results","lineNumber","lineText","matches","handleFileUpload","event","file","target","files","reader","FileReader","onload","readAsText","handleSearchKMP","handleAll","alert","error","handleEgrep","formData","FormData","append","response","post","headers","data","details","handleAllTime","egrepResults","averageTime","reduce","acc","curr","Math","floor","warn","egrep","handleReset","className","style","backgroundImage","backgroundSize","backgroundPosition","repeat","backgroundColor","children","backdropFilter","minHeight","maxHeight","overflowY","background","icon","fileName","_jsxFileName","columnNumber","onClick","onChange","e","type","accept","placeholder","parseInt","scope","_res$lineNumber","_res$lineText","isArray","role","isKMP","Times","r","_r$time","egrepTimes","_r$executionTimeMs","executionTimeMs","show","onHide","centered","Header","Title","Body","_result$lineNumber","_result$lineText","_res$lineNumber2","_res$lineText2","_r$time2","_r$executionTimeMs2","ex","node","_c3","$RefreshReg$"],"sources":["C:/Users/Musha/Desktop/DAAR/projet/Projet 1/Automaton-/Client/src/app/automate.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport axios from \"axios\";\r\nimport ResultsTable from \"./tableau\";\r\nimport SyntaxTree from \"./arbre\";\r\nimport AutomateVisualizer from \"./visualiser\";\r\nimport ExecutionTimeChart from \"./chart\";\r\n\r\n// Compteur d'état global pour assurer des identifiants uniques\r\nlet stateCounter = 0;\r\n\r\n// Classe Automate pour stocker les états et transitions\r\nclass Automate {\r\n  constructor() {\r\n    this.states = [];\r\n    this.transitions = [];\r\n    this.startState = null;\r\n    this.endStates = new Set(); // Utilisation d'un ensemble pour gérer plusieurs états finaux\r\n  }\r\n\r\n  // Fonction pour ajouter un état avec un identifiant unique\r\n  addState() {\r\n    const newState = stateCounter++;\r\n    this.states.push(newState);\r\n    return newState;\r\n  }\r\n\r\n  addTransition(from, to, symbol) {\r\n    this.transitions.push({ from, to, symbol });\r\n  }\r\n\r\n  setStartState(state) {\r\n    this.startState = state;\r\n  }\r\n\r\n  setEndState(state) {\r\n    this.endStates.add(state); // Ajouter à l'ensemble des états finaux\r\n  }\r\n\r\n  getAutomate() {\r\n    return {\r\n      states: this.states,\r\n      transitions: this.transitions,\r\n      startState: this.startState,\r\n      endStates: this.endStates, // Retourner les états finaux sous forme d'ensemble\r\n    };\r\n  }\r\n}\r\n\r\n// Fonction pour créer un automate pour un symbole\r\nconst createBaseAutomate = (symbol) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState();\r\n  const end = automate.addState();\r\n  automate.addTransition(start, end, symbol);\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n  return automate;\r\n};\r\n\r\n// Fonction pour concaténer deux automates\r\nconst concatenateAutomates = (automate1, automate2) => {\r\n  const automate = new Automate();\r\n\r\n  // Copier les états et transitions des deux automates\r\n  automate.states = [...automate1.states, ...automate2.states];\r\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\r\n\r\n  // Ajouter une transition epsilon entre la fin du premier automate et le début du second\r\n  automate.addTransition(\r\n    automate1.endStates.values().next().value,\r\n    automate2.startState,\r\n    \"ε\"\r\n  );\r\n\r\n  // Définir les nouveaux états de départ et de fin\r\n  automate.setStartState(automate1.startState);\r\n  automate.setEndState(automate2.endStates.values().next().value);\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour gérer l'union de deux automates (opérateur |)\r\nconst unionAutomates = (automate1, automate2) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState(); // Nouvel état de départ\r\n  const end = automate.addState(); // Nouvel état de fin\r\n\r\n  // Copier les états et transitions des deux automates\r\n  automate.states = [...automate1.states, ...automate2.states, start, end];\r\n  automate.transitions = [...automate1.transitions, ...automate2.transitions];\r\n\r\n  // Ajouter des transitions epsilon du nouvel état initial vers les deux sous-automates\r\n  automate.addTransition(start, automate1.startState, \"ε\");\r\n  automate.addTransition(start, automate2.startState, \"ε\");\r\n\r\n  // Ajouter des transitions epsilon des états finaux des sous-automates vers le nouvel état final\r\n  automate1.endStates.forEach((state) => {\r\n    automate.addTransition(state, end, \"ε\");\r\n  });\r\n  automate2.endStates.forEach((state) => {\r\n    automate.addTransition(state, end, \"ε\");\r\n  });\r\n\r\n  // Définir les nouveaux états de départ et de fin\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour gérer la fermeture de Kleene (opérateur *)\r\nconst kleeneAutomate = (automate1) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState(); // Nouvel état de départ\r\n  const end = automate.addState(); // Nouvel état de fin\r\n\r\n  // Copier les états et transitions du premier automate\r\n  automate.states = [...automate1.states, start, end];\r\n  automate.transitions = [...automate1.transitions];\r\n\r\n  // Ajouter des transitions epsilon pour la fermeture de Kleene\r\n  automate.addTransition(start, automate1.startState, \"ε\");\r\n  automate.addTransition(automate1.endStates.values().next().value, end, \"ε\");\r\n  automate.addTransition(\r\n    automate1.endStates.values().next().value,\r\n    automate1.startState,\r\n    \"ε\"\r\n  ); // Boucle\r\n  automate.addTransition(start, end, \"ε\"); // Transition directe\r\n\r\n  // Définir les nouveaux états de départ et de fin\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour gérer l'opérateur +\r\nconst plusAutomate = (automate1) => {\r\n  const automate = new Automate();\r\n  const start = automate.addState(); // Nouvel état de départ\r\n  const end = automate.addState(); // Nouvel état de fin\r\n\r\n  // Copier les états et transitions du premier automate\r\n  automate.states = [...automate1.states, start, end];\r\n  automate.transitions = [...automate1.transitions];\r\n\r\n  // Ajouter des transitions epsilon pour l'opérateur +\r\n  automate.addTransition(start, automate1.startState, \"ε\");\r\n  automate.addTransition(automate1.endStates.values().next().value, end, \"ε\");\r\n  automate.addTransition(\r\n    automate1.endStates.values().next().value,\r\n    automate1.startState,\r\n    \"ε\"\r\n  ); // Boucle\r\n\r\n  // Définir les nouveaux états de départ et de fin\r\n  automate.setStartState(start);\r\n  automate.setEndState(end);\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour insérer les concaténations implicites dans une regex\r\nconst ajouterConcatImpl = (regex) => {\r\n  let resultat = \"\";\r\n\r\n  for (let i = 0; i < regex.length; i++) {\r\n    const char = regex[i];\r\n    resultat += char;\r\n\r\n    // Ajouter une concaténation implicite si nécessaire\r\n    if (i + 1 < regex.length) {\r\n      const nextChar = regex[i + 1];\r\n\r\n      // Condition pour ajouter une concaténation implicite\r\n      if (\r\n        char !== \"(\" &&\r\n        char !== \"|\" &&\r\n        char !== \".\" && // Si le caractère actuel n'est pas un opérateur\r\n        nextChar !== \")\" &&\r\n        nextChar !== \"|\" &&\r\n        nextChar !== \"*\" &&\r\n        nextChar !== \"+\" &&\r\n        nextChar !== \".\" // Si le prochain caractère n'est pas un opérateur\r\n      ) {\r\n        resultat += \".\"; // Ajouter une concaténation explicite\r\n      }\r\n    }\r\n  }\r\n\r\n  return resultat;\r\n};\r\n\r\n// Fonction pour parser une expression régulière en respectant les priorités et les parenthèses\r\nconst parseRegex = (regex) => {\r\n  // Ajouter les concaténations implicites avant de parser\r\n  regex = ajouterConcatImpl(regex);\r\n\r\n  const precedence = { \"|\": 1, \".\": 2, \"*\": 3, \"+\": 3 };\r\n  const operators = [];\r\n  const output = [];\r\n\r\n  const isOperator = (char) => [\"|\", \".\", \"*\", \"+\"].includes(char);\r\n\r\n  const applyOperator = () => {\r\n    const operator = operators.pop();\r\n    if (operator === \".\") {\r\n      const b = output.pop();\r\n      const a = output.pop();\r\n      output.push([\".\", a, b]);\r\n    } else if (operator === \"|\") {\r\n      const b = output.pop();\r\n      const a = output.pop();\r\n      output.push([\"|\", a, b]);\r\n    } else if (operator === \"*\") {\r\n      const a = output.pop();\r\n      output.push([\"*\", a]);\r\n    } else if (operator === \"+\") {\r\n      const a = output.pop();\r\n      output.push([\"+\", a]);\r\n    }\r\n  };\r\n\r\n  let i = 0;\r\n  while (i < regex.length) {\r\n    const char = regex[i];\r\n\r\n    if (char === \"(\") {\r\n      // Trouver la sous-expression entre parenthèses\r\n      let j = i;\r\n      let openParentheses = 1;\r\n      while (openParentheses > 0 && ++j < regex.length) {\r\n        if (regex[j] === \"(\") openParentheses++;\r\n        if (regex[j] === \")\") openParentheses--;\r\n      }\r\n\r\n      // Appeler récursivement `parseRegex` sur la sous-expression\r\n      const subexpression = regex.slice(i + 1, j);\r\n      output.push(parseRegex(subexpression));\r\n      i = j; // Avancer jusqu'à la parenthèse fermante\r\n    } else if (!isOperator(char)) {\r\n      output.push(char); // Ajouter les symboles au output\r\n    } else {\r\n      while (\r\n        operators.length > 0 &&\r\n        operators[operators.length - 1] !== \"(\" &&\r\n        precedence[operators[operators.length - 1]] >= precedence[char]\r\n      ) {\r\n        applyOperator();\r\n      }\r\n      operators.push(char);\r\n    }\r\n    i++;\r\n  }\r\n\r\n  // Appliquer les opérateurs restants\r\n  while (operators.length > 0) {\r\n    applyOperator();\r\n  }\r\n\r\n  return output[0];\r\n};\r\n\r\n// Fonction pour parcourir l'arbre syntaxique et créer l'automate\r\nconst parseArbre = (arbre) => {\r\n  if (typeof arbre === \"string\") {\r\n    return createBaseAutomate(arbre); // Si c'est un symbole\r\n  }\r\n\r\n  const [op, ...args] = arbre;\r\n\r\n  switch (op) {\r\n    case \".\": {\r\n      // Concaténation\r\n      let result = parseArbre(args[0]);\r\n      for (let i = 1; i < args.length; i++) {\r\n        result = concatenateAutomates(result, parseArbre(args[i]));\r\n      }\r\n      return result;\r\n    }\r\n\r\n    case \"|\": {\r\n      // Union\r\n      let result = parseArbre(args[0]);\r\n      for (let i = 1; i < args.length; i++) {\r\n        result = unionAutomates(result, parseArbre(args[i]));\r\n      }\r\n      return result;\r\n    }\r\n\r\n    case \"*\": {\r\n      // Fermeture de Kleene\r\n      return kleeneAutomate(parseArbre(args[0]));\r\n    }\r\n\r\n    case \"+\": {\r\n      // L'opérateur +\r\n      return plusAutomate(parseArbre(args[0]));\r\n    }\r\n\r\n    default:\r\n      throw new Error(`Opérateur non supporté: ${op}`);\r\n  }\r\n};\r\n\r\n//\r\n\r\n//\r\n\r\n// Fonction pour calculer le tableau LPS (Longest Prefix Suffix)\r\nconst computeLPSArray = (pat, M, lps) => {\r\n  let len = 0;\r\n  let i = 1;\r\n  lps[0] = 0;\r\n\r\n  while (i < M) {\r\n    if (pat[i] === pat[len]) {\r\n      len++;\r\n      lps[i] = len;\r\n      i++;\r\n    } else {\r\n      if (len !== 0) {\r\n        len = lps[len - 1];\r\n      } else {\r\n        lps[i] = 0;\r\n        i++;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// Algorithme KMP\r\nconst KMPSearch = (txt, pat) => {\r\n  const M = pat.length;\r\n  const N = txt.length;\r\n\r\n  const lpsTable = new Array(M).fill(0);\r\n  computeLPSArray(pat, M, lpsTable);\r\n\r\n  let i = 0; // Index pour txt[]\r\n  let j = 0; // Index pour pat[]\r\n  const positions = [];\r\n\r\n  while (i < N) {\r\n    if (pat[j] === txt[i]) {\r\n      i++;\r\n      j++;\r\n    }\r\n\r\n    if (j === M) {\r\n      positions.push(i - j);\r\n      j = lpsTable[j - 1];\r\n    } else if (i < N && pat[j] !== txt[i]) {\r\n      if (j !== 0) {\r\n        j = lpsTable[j - 1];\r\n      } else {\r\n        i++;\r\n      }\r\n    }\r\n  }\r\n\r\n  return { positions, lpsTable };\r\n};\r\n\r\n// Test de la fonction avec un texte contenant des espaces\r\nconst txt = \"state--Sargon and Merodach-baladan--Sennacherib's attempt\";\r\nconst pat = \"Sargon\";\r\nconst result = KMPSearch(txt, pat);\r\n\r\n// Affichage des résultats\r\nconsole.log(\"Positions trouvées :\", result.positions); // Affiche les positions où le motif a été trouvé\r\nconsole.log(\"Tableau LPS :\", result.lpsTable); // Affiche le tableau LPS\r\n\r\n//\r\n\r\n//\r\n\r\n//\r\n\r\n// Fonction pour générer l'automate à partir d'une expression régulière\r\nconst construireAutomate = (regex) => {\r\n  const arbre = parseRegex(regex); // Construire l'arbre syntaxique à partir du regex\r\n\r\n  return parseArbre(arbre); // Construire l'automate à partir de l'arbre syntaxique\r\n};\r\n\r\n// Fonction pour tester si une sous-chaîne est acceptée par l'automate\r\nconst estAccepte = (\r\n  automate,\r\n  chaine,\r\n  index = 0,\r\n  etatCourant = automate.startState\r\n) => {\r\n  if (index === chaine.length) {\r\n    return automate.endStates.has(etatCourant); // Vérifier si l'état courant est un état final\r\n  }\r\n\r\n  const symbol = chaine[index];\r\n  let transitions = automate.transitions.filter((t) => t.from === etatCourant);\r\n\r\n  // Parcourir les transitions epsilon\r\n  for (let trans of transitions) {\r\n    if (trans.symbol === \"ε\") {\r\n      if (estAccepte(automate, chaine, index, trans.to)) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Parcourir les transitions pour le symbole courant\r\n  for (let trans of transitions) {\r\n    if (trans.symbol === symbol) {\r\n      if (estAccepte(automate, chaine, index + 1, trans.to)) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n// Fonction pour tester si une sous-chaîne (motif) est présente dans un mot\r\nconst testMotifDansMot = (automate, mot) => {\r\n  // Essayer toutes les sous-chaînes du mot pour trouver le motif\r\n  for (let i = 0; i < mot.length; i++) {\r\n    for (let j = i; j <= mot.length; j++) {\r\n      const sousChaine = mot.slice(i, j);\r\n      if (estAccepte(automate, sousChaine)) {\r\n        return true; // Si une sous-chaîne correspond au motif, retourner vrai\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n// Fonction pour tester toutes les sous-chaînes acceptées dans une ligne de texte\r\nconst TestTxt = (automate, line) => {\r\n  const mots = line.split(\" \"); // Diviser la ligne en mots\r\n  for (let mot of mots) {\r\n    if (testMotifDansMot(automate, mot)) {\r\n      return true; // Si un mot contient le motif, retourner vrai\r\n    }\r\n  }\r\n  return false; // Si aucun mot ne contient le motif, retourner faux\r\n};\r\n\r\n// Fonction pour calculer la fermeture epsilon d'un état donné\r\nconst epsilonClosure = (automate, state) => {\r\n  const closure = new Set([state]);\r\n  const stack = [state];\r\n\r\n  while (stack.length > 0) {\r\n    const currentState = stack.pop();\r\n    const epsilonTransitions = automate.transitions.filter(\r\n      (t) => t.from === currentState && t.symbol === \"ε\"\r\n    );\r\n\r\n    for (const transition of epsilonTransitions) {\r\n      if (!closure.has(transition.to)) {\r\n        closure.add(transition.to);\r\n        stack.push(transition.to);\r\n      }\r\n    }\r\n  }\r\n\r\n  return closure;\r\n};\r\n\r\n// Fonction pour calculer la fermeture epsilon d'un ensemble d'états\r\nconst epsilonClosureSet = (automate, states) => {\r\n  let closure = new Set();\r\n  for (const state of states) {\r\n    closure = new Set([...closure, ...epsilonClosure(automate, state)]);\r\n  }\r\n  return closure;\r\n};\r\n\r\n// Fonction pour calculer la transition d'un ensemble d'états sur un symbole donné\r\nconst move = (automate, states, symbol) => {\r\n  const nextStates = new Set();\r\n  for (const state of states) {\r\n    const transitions = automate.transitions.filter(\r\n      (t) => t.from === state && t.symbol === symbol\r\n    );\r\n    for (const transition of transitions) {\r\n      nextStates.add(transition.to);\r\n    }\r\n  }\r\n  return nextStates;\r\n};\r\n\r\n// Fonction pour déterminiser un automate non déterministe avec epsilon transitions\r\nconst determinizeAutomate = (nfa) => {\r\n  const dfa = new Automate();\r\n  const alphabet = Array.from(\r\n    new Set(nfa.transitions.map((t) => t.symbol).filter((s) => s !== \"ε\"))\r\n  );\r\n\r\n  const initialClosure = epsilonClosure(nfa, nfa.startState);\r\n  const dfaStatesMap = new Map();\r\n  dfaStatesMap.set(JSON.stringify([...initialClosure]), dfa.addState());\r\n  dfa.setStartState(dfaStatesMap.get(JSON.stringify([...initialClosure])));\r\n\r\n  const unprocessedStates = [initialClosure];\r\n\r\n  while (unprocessedStates.length > 0) {\r\n    const currentSet = unprocessedStates.pop();\r\n    const currentStateId = dfaStatesMap.get(JSON.stringify([...currentSet]));\r\n\r\n    // Vérifier si l'un des états de l'ensemble est un état final du NFA\r\n    if ([...currentSet].some((state) => nfa.endStates.has(state))) {\r\n      dfa.setEndState(currentStateId); // Marquer cet état comme final dans le DFA\r\n    }\r\n\r\n    for (const symbol of alphabet) {\r\n      const nextSet = epsilonClosureSet(nfa, move(nfa, currentSet, symbol));\r\n\r\n      if (nextSet.size === 0) continue; // Ignorer les ensembles vides\r\n\r\n      const nextSetKey = JSON.stringify([...nextSet]);\r\n\r\n      if (!dfaStatesMap.has(nextSetKey)) {\r\n        const newState = dfa.addState();\r\n        dfaStatesMap.set(nextSetKey, newState);\r\n        unprocessedStates.push(nextSet);\r\n      }\r\n\r\n      dfa.addTransition(currentStateId, dfaStatesMap.get(nextSetKey), symbol);\r\n    }\r\n  }\r\n\r\n  return dfa;\r\n};\r\n\r\nconst removeInaccessibleStates = (automate) => {\r\n  const reachableStates = new Set([automate.startState]);\r\n  const stack = [automate.startState];\r\n\r\n  while (stack.length > 0) {\r\n    const currentState = stack.pop();\r\n    const transitions = automate.transitions.filter(\r\n      (t) => t.from === currentState\r\n    );\r\n\r\n    for (const transition of transitions) {\r\n      if (!reachableStates.has(transition.to)) {\r\n        reachableStates.add(transition.to);\r\n        stack.push(transition.to);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Filtrer les états et les transitions pour ne conserver que les états accessibles\r\n  automate.states = automate.states.filter((state) =>\r\n    reachableStates.has(state)\r\n  );\r\n  automate.transitions = automate.transitions.filter(\r\n    (t) => reachableStates.has(t.from) && reachableStates.has(t.to)\r\n  );\r\n\r\n  return automate;\r\n};\r\n\r\n// Fonction pour effectuer la minimisation avec l'algorithme de Moore\r\nconst minimizeAutomate = (dfa) => {\r\n  // Étape 1: Supprimer les états inaccessibles\r\n  removeInaccessibleStates(dfa);\r\n\r\n  // Étape 2: Partitionner les états en deux ensembles: états finaux et non finaux\r\n  let partitions = [new Set(), new Set()];\r\n  dfa.states.forEach((state) => {\r\n    if (dfa.endStates.has(state)) {\r\n      partitions[0].add(state); // États finaux\r\n    } else {\r\n      partitions[1].add(state); // États non finaux\r\n    }\r\n  });\r\n\r\n  let stable = false;\r\n  const alphabet = Array.from(new Set(dfa.transitions.map((t) => t.symbol)));\r\n\r\n  // Étape 3: Raffiner les partitions\r\n  while (!stable) {\r\n    stable = true;\r\n    const newPartitions = [];\r\n\r\n    const partitionsCopy = partitions.slice();\r\n\r\n    for (const partition of partitionsCopy) {\r\n      const partitionMap = new Map();\r\n\r\n      for (const state of partition) {\r\n        const signature = alphabet\r\n          .map((symbol) => {\r\n            const transition = dfa.transitions.find(\r\n              (t) => t.from === state && t.symbol === symbol\r\n            );\r\n            const targetState = transition ? transition.to : null;\r\n\r\n            // Trouver la partition contenant l'état cible\r\n            const partitionIndex = partitionsCopy.findIndex((p) =>\r\n              p.has(targetState)\r\n            );\r\n            return partitionIndex;\r\n          })\r\n          .join(\"-\");\r\n\r\n        if (!partitionMap.has(signature)) {\r\n          partitionMap.set(signature, new Set());\r\n        }\r\n        partitionMap.get(signature).add(state);\r\n      }\r\n\r\n      // Ajouter les nouvelles partitions\r\n      newPartitions.push(...partitionMap.values());\r\n    }\r\n\r\n    // Si les partitions ont changé, on continue la boucle\r\n    if (newPartitions.length !== partitions.length) {\r\n      stable = false;\r\n    }\r\n\r\n    partitions = newPartitions;\r\n  }\r\n\r\n  // Étape 4: Construire le nouvel automate minimisé\r\n  const minimizedAutomate = new Automate();\r\n  const stateMap = new Map(); // Map pour relier les anciens états aux nouveaux états\r\n\r\n  partitions.forEach((partition, index) => {\r\n    const newState = minimizedAutomate.addState();\r\n    partition.forEach((state) => stateMap.set(state, newState));\r\n\r\n    // Marquer l'état comme final s'il contient un ancien état final\r\n    if ([...partition].some((state) => dfa.endStates.has(state))) {\r\n      minimizedAutomate.setEndState(newState);\r\n    }\r\n  });\r\n\r\n  // Recréer les transitions dans l'automate minimisé sans duplicata\r\n  dfa.transitions.forEach((t) => {\r\n    const fromState = stateMap.get(t.from);\r\n    const toState = stateMap.get(t.to);\r\n\r\n    // Vérifier si la transition existe déjà\r\n    if (\r\n      !minimizedAutomate.transitions.some(\r\n        (trans) =>\r\n          trans.from === fromState &&\r\n          trans.to === toState &&\r\n          trans.symbol === t.symbol\r\n      )\r\n    ) {\r\n      minimizedAutomate.addTransition(fromState, toState, t.symbol);\r\n    }\r\n  });\r\n\r\n  // Définir l'état initial\r\n  minimizedAutomate.setStartState(stateMap.get(dfa.startState));\r\n\r\n  return minimizedAutomate;\r\n};\r\n\r\n//\r\n\r\n//\r\n\r\n// Fonction pour mesurer le temps moyen d'exécution sur plusieurs itérations KMP\r\nconst measureExecutionTime = (txt, pat, numIterations) => {\r\n  const res = [];\r\n  for (let i = 0; i < numIterations; i++) {\r\n    const startTime = performance.now();\r\n    KMPSearch(txt, pat);\r\n    const endTime = performance.now();\r\n\r\n    const iterationTime = parseFloat((endTime - startTime).toFixed(2)); // Arrondir à 2 décimales\r\n    if (iterationTime > 0.01) {\r\n      // Filtre les valeurs proches de 0\r\n      res.push({\r\n        iteration: i + 1,\r\n        time: iterationTime,\r\n      });\r\n    }\r\n  }\r\n  return res;\r\n};\r\n\r\n// Fonction pour mesurer le temps moyen d'exécution sur plusieurs itérations AUTOMATE\r\nconst measureExecutionTimeAutomate = (txt, pat, numIterations) => {\r\n  const res = [];\r\n\r\n  for (let i = 0; i < numIterations; i++) {\r\n    const startTime = performance.now();\r\n\r\n    const automate = construireAutomate(pat); // Générer l'automate à partir du regex\r\n    const dfa = determinizeAutomate(automate); // Déterminiser l'automate\r\n    const minDfa = minimizeAutomate(dfa); // Minimiser l'automate déterminisé\r\n\r\n    TestTxt(minDfa, txt);\r\n\r\n    const endTime = performance.now();\r\n\r\n    const iterationTime = parseFloat((endTime - startTime).toFixed(2)); // Arrondir à 2 décimales\r\n    if (iterationTime > 0.01) {\r\n      // Filtre les valeurs proches de 0\r\n      res.push({\r\n        iteration: i + 1,\r\n        time: iterationTime,\r\n      });\r\n    }\r\n  }\r\n\r\n  return res;\r\n};\r\n\r\n//\r\n\r\n//\r\n\r\n// Composant principal de l'application\r\nconst Automaton = () => {\r\n  const [arbre, setArbre] = useState(null); // Arbre syntaxique\r\n  const [automate, setAutomate] = useState(null); // Automate (NFA ou DFA)\r\n  const [detAutomate, setDetAutomate] = useState(null); // Automate déterminisé (DFA)\r\n  const [MinAutomate, setMinAutomate] = useState(null); // Automate Min (Min)\r\n  const [regex, setRegex] = useState(\"\");\r\n  const [fileContent, setFileContent] = useState(\"\");\r\n  const [fileTextContent, setFileTextContent] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [searchkmp, setSearchKmp] = useState(false);\r\n  const [searchAutomate, setSearchAutomate] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [iterations, setIterations] = useState(1);\r\n  const [executionTime, setExecutionTime] = useState(null); // Temps moyen d'exécution\r\n  const [medianTime, setMedianTime] = useState(null); // Temps d'exécution médian\r\n  const [executionTimeEgrep, setExecutionTimeEgrep] = useState(null); // Temps moyen d'exécution\r\n  const [medianTimeEgrep, setMedianTimeEgrep] = useState(null); // Temps d'exécution médian\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [showTime, setShowTime] = useState(false);\r\n  const [textTime, setTextTime] = useState(\"Test Performance\");\r\n  const [nbiteration, setNbiteration] = useState(1);\r\n  //\r\n  const [timesearch, setTimesearch] = useState(null);\r\n  const [resegrep, setResegrep] = useState(null);\r\n  const [fileInputKey, setFileInputKey] = useState(Date.now());\r\n  //\r\n\r\n  const isKmp = () => {\r\n    if (regex.length > 0) {\r\n      if (\r\n        regex.includes(\"|\") ||\r\n        regex.includes(\"*\") ||\r\n        regex.includes(\"+\") ||\r\n        regex.includes(\".\") ||\r\n        regex.includes(\"(\") ||\r\n        regex.includes(\")\") ||\r\n        regex.includes(\"ε\")\r\n      ) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    }\r\n  };\r\n  // Fonction pour générer l'arbre syntaxique à partir de l'expression régulière\r\n  const handleGenerateArbre = async () => {\r\n    return new Promise((resolve) => {\r\n      stateCounter = 0; // Réinitialiser le compteur d'état\r\n      const arbre = parseRegex(regex); // Générer l'arbre à partir du regex\r\n      setArbre(arbre); // Stocker l'arbre\r\n      setAutomate(null); // Réinitialiser l'automate\r\n      setDetAutomate(null); // Réinitialiser l'automate déterminisé\r\n      setMinAutomate(null); // Réinitialiser l'automate minimisé\r\n      resolve(); // Marquer la fonction comme terminée\r\n    });\r\n  };\r\n\r\n  // Fonction pour générer l'automate (NFA)\r\n  const handleGenerateAutomate = async () => {\r\n    return new Promise((resolve) => {\r\n      stateCounter = 0; // Réinitialiser le compteur d'état\r\n      const automate = construireAutomate(regex); // Générer l'automate à partir du regex\r\n      setAutomate(automate); // Stocker l'automate NFA\r\n\r\n      setDetAutomate(null); // Réinitialiser l'automate déterminisé\r\n      setMinAutomate(null); // Réinitialiser l'automate minimisé\r\n      resolve(); // Marquer la fonction comme terminée\r\n    });\r\n  };\r\n\r\n  // Fonction pour déterminiser l'automate (NFA -> DFA)\r\n  const handleDeterminizeAutomate = async () => {\r\n    return new Promise((resolve) => {\r\n      if (automate) {\r\n        const dfa = determinizeAutomate(automate); // Déterminiser l'automate\r\n        setDetAutomate(dfa); // Stocker l'automate déterminisé\r\n        setMinAutomate(null); // Réinitialiser l'automate minimisé\r\n      }\r\n      resolve(); // Marquer la fonction comme terminée\r\n    });\r\n  };\r\n\r\n  // Fonction pour minimiser l'automate déterminisé (DFA)\r\n  const handleMinimizeAutomate = async () => {\r\n    return new Promise((resolve) => {\r\n      if (detAutomate) {\r\n        const minDfa = minimizeAutomate(detAutomate); // Minimiser l'automate déterminisé\r\n        setMinAutomate(minDfa); // Stocker l'automate minimisé\r\n      }\r\n      resolve(); // Marquer la fonction comme terminée\r\n    });\r\n  };\r\n\r\n  // Fonction de recherche utilisant l'automate\r\n  const handleSearch = async () => {\r\n    if (!MinAutomate) return; // Si l'automate minimisé est null, arrêter\r\n\r\n    const lines = fileTextContent.split(\"\\n\"); // Diviser le contenu du fichier par ligne\r\n\r\n    const results = lines\r\n      .map((line, index) => ({\r\n        lineNumber: index + 1, // Numéro de la ligne (index commence à 0, donc +1)\r\n        lineText: line, // Le texte de la ligne\r\n        matches: TestTxt(MinAutomate, line), // Tester la ligne avec l'automate\r\n      }))\r\n      .filter((result) => result.matches);\r\n\r\n    setSearchResults(results); // Stocker les résultats\r\n  };\r\n\r\n  // Fonction pour charger le fichier\r\n\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    setSelectedFile(file);\r\n    if (file) {\r\n      setFileContent(file);\r\n\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        setFileTextContent(reader.result);\r\n      };\r\n      reader.readAsText(file);\r\n    }\r\n  };\r\n\r\n  //\r\n\r\n  // Fonction de recherche utilisant KMP\r\n  // Fonction pour tester chaque ligne du fichier avec le pattern\r\n  const handleSearchKMP = () => {\r\n    const lines = fileTextContent.split(\"\\n\");\r\n    const res = [];\r\n    lines.forEach((line, index) => {\r\n      const { positions, lpsTable } = KMPSearch(line, regex);\r\n      if (positions.length > 0) {\r\n        res.push({\r\n          lineNumber: index + 1,\r\n          lineText: line,\r\n          positions,\r\n          lpsTable,\r\n        });\r\n      }\r\n      console.log(lpsTable);\r\n    });\r\n    setSearchResults(res); // Stocker les résultats de la recherche\r\n  };\r\n\r\n  const handleAll = async () => {\r\n    if (!regex || !fileTextContent)\r\n      return alert(\"Veuillez sélectionner un fichier et entrer un motif !\");\r\n    setSearchResults([]); // Réinitialiser les résultats de la recherche\r\n\r\n    // Vérifier si on utilise KMP ou l'automate\r\n    if (isKmp()) {\r\n      setSearchKmp(true);\r\n      setSearchAutomate(false);\r\n      handleSearchKMP(); // Exécuter la recherche avec KMP\r\n    } else {\r\n      setSearchKmp(false);\r\n      setSearchAutomate(true);\r\n\r\n      try {\r\n        // Générer l'arbre\r\n        await handleGenerateArbre();\r\n\r\n        // Générer l'automate\r\n        await handleGenerateAutomate();\r\n\r\n        // Déterminiser l'automate\r\n        await handleDeterminizeAutomate();\r\n\r\n        // Minimiser l'automate déterminisé\r\n        await handleMinimizeAutomate();\r\n      } catch (error) {\r\n        console.error(\"Erreur lors du traitement de l'automate :\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  //\r\n\r\n  //\r\n\r\n  const handleEgrep = async () => {\r\n    if (!fileContent || !regex) {\r\n      alert(\"Veuillez sélectionner un fichier et entrer un motif !\");\r\n      return null; // Retourner null si une erreur se produit\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"file\", fileContent);\r\n    formData.append(\"pattern\", regex);\r\n    formData.append(\"iterations\", iterations);\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://localhost:3001/run-egrep\",\r\n        formData,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n          },\r\n        }\r\n      );\r\n\r\n      const results = response.data.details.results;\r\n      setResegrep(results); // Mettez à jour l'état avec les résultats\r\n      console.log(results);\r\n      return results; // Retourner les résultats pour les utiliser dans handleAllTime\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de l'exécution egrep:\", error);\r\n      alert(\"Une erreur est survenue lors de l'exécution egrep\");\r\n      return null; // Retourner null en cas d'erreur\r\n    }\r\n  };\r\n\r\n  const handleAllTime = async () => {\r\n    // Ajouter async ici\r\n    if (!regex || !fileTextContent) {\r\n      return alert(\"Veuillez sélectionner un fichier et entrer un motif !\");\r\n    }\r\n\r\n    setSearchResults([]); // Réinitialiser les résultats de la recherche\r\n\r\n    // Attendre les résultats de handleEgrep\r\n    const egrepResults = await handleEgrep();\r\n    // if (!egrepResults) {\r\n    //   return; // Sortir si handleEgrep a échoué\r\n    // }\r\n\r\n    let res = [];\r\n    if (isKmp()) {\r\n      setSearchKmp(true);\r\n      setSearchAutomate(false);\r\n      res = measureExecutionTime(fileTextContent, regex, iterations); // Mesurer le temps\r\n\r\n      let averageTime = 0;\r\n      let medianTime = 0;\r\n\r\n      if (res && res.length > 0) {\r\n        averageTime =\r\n          res.reduce((acc, curr) => acc + curr.time, 0) / res.length;\r\n        medianTime = res[Math.floor(res.length / 2)].time;\r\n      } else {\r\n        console.warn(\r\n          \"Aucun résultat n'a été retourné par measureExecutionTime.\"\r\n        );\r\n      }\r\n\r\n      setExecutionTime(averageTime); // Stocker le temps d'exécution moyen\r\n      setMedianTime(medianTime); // Stocker le temps d'exécution médian\r\n      setNbiteration(iterations);\r\n    } else {\r\n      setSearchKmp(false);\r\n      setSearchAutomate(true);\r\n\r\n      res = measureExecutionTimeAutomate(fileTextContent, regex, iterations); // Mesurer le temps\r\n\r\n      let averageTime = 0;\r\n      let medianTime = 0;\r\n\r\n      if (res && res.length > 0) {\r\n        averageTime =\r\n          res.reduce((acc, curr) => acc + curr.time, 0) / res.length;\r\n        medianTime = res[Math.floor(res.length / 2)].time;\r\n      } else {\r\n        console.warn(\"Aucun résultat n'a été retourné.\");\r\n      }\r\n\r\n      setExecutionTime(averageTime); // Stocker le temps d'exécution moyen\r\n      setMedianTime(medianTime); // Stocker le temps d'exécution médian\r\n      setNbiteration(iterations);\r\n    }\r\n\r\n    // Mettre à jour timesearch avec les résultats\r\n    setTimesearch({ results: res, egrep: egrepResults });\r\n    console.log(timesearch);\r\n  };\r\n\r\n  //\r\n\r\n  const handleReset = () => {\r\n    setRegex(\"\");\r\n    setFileContent(\"\");\r\n    setFileTextContent(\"\");\r\n    setArbre(null);\r\n    setAutomate(null);\r\n    setDetAutomate(null);\r\n    setMinAutomate(null);\r\n    setSearchResults([]);\r\n    setSearchKmp(false);\r\n    setSearchAutomate(false);\r\n    setShowModal(false);\r\n    setExecutionTime(null);\r\n    setMedianTime(null);\r\n    setExecutionTimeEgrep(null);\r\n    setMedianTimeEgrep(null);\r\n    setResegrep([]);\r\n    setNbiteration(1);\r\n    setIterations(1);\r\n    setSelectedFile(null);\r\n    setFileInputKey(Date.now()); // Générer une nouvelle clé\r\n  };\r\n\r\n  //\r\n\r\n  // Utiliser useEffect pour déclencher les étapes successives\r\n  useEffect(() => {\r\n    if (automate) {\r\n      handleDeterminizeAutomate(); // Déclencher la déterminisation après la génération de l'automate\r\n    }\r\n  }, [automate]);\r\n\r\n  useEffect(() => {\r\n    if (detAutomate) {\r\n      handleMinimizeAutomate(); // Déclencher la minimisation après la déterminisation de l'automate\r\n    }\r\n  }, [detAutomate]);\r\n\r\n  useEffect(() => {\r\n    if (MinAutomate) {\r\n      handleSearch(); // Déclencher la recherche après la minimisation de l'automate\r\n    }\r\n  }, [MinAutomate]);\r\n\r\n  return (\r\n    <div\r\n      className=\" vh-100\"\r\n      style={{\r\n        backgroundImage: \"url('bibliotheque.jpg')\",\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center\",\r\n        repeat: \"non-repeat\",\r\n        backgroundColor: \"#f8f8f8\", // Couleur de fallback\r\n      }}\r\n    >\r\n      <div\r\n        className=\" vh-100 d-flex justify-content-center align-items-center\"\r\n        style={{\r\n          backdropFilter: \"blur(6px)\", // Flou appliqué sur l'arrière-plan\r\n        }}\r\n      >\r\n        <div\r\n          className=\"card container py-3 w-auto shadow-lg rounded\"\r\n          style={{\r\n            minHeight: \"400px\",\r\n            maxHeight: \"700px\", // Limite la taille maximale\r\n            overflowY: \"auto\", // Ajoute une barre de défilement si le contenu est trop long\r\n            background: \"rgba(255, 255, 255, 0.9)\", // Semi-transparente\r\n          }}\r\n        >\r\n          <div className=\"mb-3 d-flex justify-content-between \">\r\n            <Link to=\"/\" className=\"text-decoration-none text-dark\">\r\n              <FontAwesomeIcon icon={faArrowLeft} /> Retour\r\n            </Link>\r\n            <button\r\n              className=\"btn btn-secondary\"\r\n              onClick={() => {\r\n                if (showTime) {\r\n                  setTextTime(\"Test Performance\");\r\n                } else {\r\n                  setTextTime(\"Clone egrep\");\r\n                }\r\n                setShowTime(!showTime);\r\n                handleReset();\r\n              }}\r\n            >\r\n              {textTime}\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"text-center\">\r\n            {showTime ? (\r\n              <h2 className=\"display-3 font-weight-bold text-primary m-5\">\r\n                Test Performance\r\n              </h2>\r\n            ) : (\r\n              <h2 className=\"display-3 font-weight-bold text-success m-5\">\r\n                Clone egrep\r\n              </h2>\r\n            )}\r\n          </div>\r\n\r\n          {showTime ? (\r\n            <div>\r\n              <div className=\"row mb-4\">\r\n                <div className=\"col-md-3 d-flex flex-column justify-content-end\">\r\n                  <label className=\"\">\r\n                    Regex:\r\n                    <input\r\n                      value={regex}\r\n                      onChange={(e) => setRegex(e.target.value)}\r\n                      className=\"form-control shadow-sm\"\r\n                    />\r\n                  </label>\r\n                </div>\r\n                <div className=\"col-md-4 d-flex flex-column justify-content-end\">\r\n                  <label className=\"\">\r\n                    Fichier (.txt):{\" \"}\r\n                    <input\r\n                      key={fileInputKey}\r\n                      type=\"file\"\r\n                      onChange={handleFileUpload}\r\n                      accept=\".txt\"\r\n                      className=\"form-control shadow-sm\"\r\n                    />{\" \"}\r\n                  </label>\r\n                </div>\r\n                {/* Input pour le nombre d'itérations */}\r\n                <div className=\"col-md-2 d-flex flex-column justify-content-end \">\r\n                  <label className=\"\">\r\n                    Iteration:{\" \"}\r\n                    <input\r\n                      type=\"number\"\r\n                      className=\"form-control shadow-sm\"\r\n                      placeholder=\"Enter number of iterations\"\r\n                      value={iterations}\r\n                      onChange={(e) => setIterations(parseInt(e.target.value))}\r\n                    />{\" \"}\r\n                  </label>\r\n                </div>\r\n                <div className=\"col-md-3 d-flex flex-column justify-content-end \">\r\n                  <button\r\n                    onClick={handleAllTime}\r\n                    className=\"btn btn-primary shadow-sm\"\r\n                  >\r\n                    Rechercher\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <div className=\"row mb-4\">\r\n                <div className=\"col-md-4 d-flex flex-column justify-content-end mb-3 mt-3\">\r\n                  <label className=\"\">\r\n                    Regex:\r\n                    <input\r\n                      value={regex}\r\n                      onChange={(e) => setRegex(e.target.value)}\r\n                      className=\"form-control\"\r\n                    />\r\n                  </label>\r\n                </div>\r\n                <div className=\"col-md-4 d-flex flex-column justify-content-end mb-3 mt-3\">\r\n                  <label className=\"\">\r\n                    Fichier (.txt):{\" \"}\r\n                    <input\r\n                      key={fileInputKey}\r\n                      type=\"file\"\r\n                      onChange={handleFileUpload}\r\n                      accept=\".txt\"\r\n                      className=\"form-control shadow-sm\"\r\n                    />{\" \"}\r\n                  </label>\r\n                </div>\r\n                <div className=\"col-md-4 d-flex flex-column justify-content-end mb-3 mt-3\">\r\n                  <button onClick={handleAll} className=\"btn btn-primary\">\r\n                    Rechercher\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/*  */}\r\n\r\n          {/* Search results */}\r\n\r\n          {/*  */}\r\n\r\n          {searchkmp ? (\r\n            <div>\r\n              <div className=\"mt-3 d-flex justify-content-between\">\r\n                <button className=\"btn btn-warning mb-4\" onClick={handleReset}>\r\n                  Reinitialiser\r\n                </button>{\" \"}\r\n                <button\r\n                  className=\"btn btn-secondary mb-4\"\r\n                  onClick={() => setShowModal(true)}\r\n                >\r\n                  Details\r\n                </button>\r\n              </div>\r\n              {!showTime ? (\r\n                <h3 className=\"mb-3\">\r\n                  Résultats de la recherche : L'algorithme Knuth-Morris-Pratt\r\n                  (KMP)\r\n                </h3>\r\n              ) : (\r\n                <h3 className=\"mb-3\">\r\n                  Résultats du test de performance : L'algorithme\r\n                  Knuth-Morris-Pratt (KMP)\r\n                </h3>\r\n              )}\r\n              <div>\r\n                {searchResults.length > 0 && (\r\n                  <>\r\n                    <div className=\"table-responsive mb-4\">\r\n                      {searchResults?.length > 0 ? (\r\n                        <table className=\"table table-striped table-bordered\">\r\n                          <thead>\r\n                            <tr>\r\n                              <th scope=\"col\">Numéro de Ligne</th>\r\n                              <th scope=\"col\">Texte de la Ligne</th>\r\n                              <th scope=\"col\">Position(s)</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {searchResults.map((res, index) => (\r\n                              <tr key={index}>\r\n                                <td>{res?.lineNumber ?? \"-\"}</td>\r\n                                <td>{res?.lineText ?? \"Texte indisponible\"}</td>\r\n                                <td>\r\n                                  {Array.isArray(res?.positions) &&\r\n                                  res.positions.length > 0\r\n                                    ? res.positions.join(\", \")\r\n                                    : \"Aucune position\"}\r\n                                </td>\r\n                              </tr>\r\n                            ))}\r\n                          </tbody>\r\n                        </table>\r\n                      ) : (\r\n                        <div\r\n                          className=\"alert alert-warning text-center\"\r\n                          role=\"alert\"\r\n                        >\r\n                          Aucun résultat trouvé\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </>\r\n                )}\r\n\r\n                {/* Affichage du temps d'exécution moyen */}\r\n                {showTime && executionTime !== null && (\r\n                  <div className=\"card container-fluid\">\r\n                    <div>\r\n                      {timesearch &&\r\n                      (timesearch?.results?.length > 0 ||\r\n                        timesearch?.egrep?.length > 0) ? (\r\n                        <ExecutionTimeChart\r\n                          isKMP={searchkmp}\r\n                          Times={\r\n                            timesearch?.results\r\n                              ? timesearch.results.map((r) => r?.time ?? 0) // Par défaut à 0 si `r.time` est nul\r\n                              : []\r\n                          }\r\n                          egrepTimes={\r\n                            timesearch?.egrep\r\n                              ? timesearch.egrep.map(\r\n                                  (r) => r?.executionTimeMs ?? 0\r\n                                ) // Par défaut à 0 si `r.executionTimeMs` est nul\r\n                              : []\r\n                          }\r\n                        />\r\n                      ) : (\r\n                        <div className=\"text-center\">\r\n                          Chargement des données...\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              {/* Modal for showing details */}\r\n\r\n              {!showTime ? (\r\n                <Modal\r\n                  show={showModal}\r\n                  onHide={() => setShowModal(false)}\r\n                  size=\"lg\"\r\n                  centered\r\n                >\r\n                  <Modal.Header>\r\n                    <Modal.Title>Details</Modal.Title>\r\n                    {/* Close button in the top right */}\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn-close\"\r\n                      onClick={() => setShowModal(false)}\r\n                    ></button>\r\n                  </Modal.Header>\r\n                  <Modal.Body>\r\n                    <div className=\"table-responsive mb-4\">\r\n                      {/* Vérification pour s'assurer qu'il y a des résultats à afficher */}\r\n                      {searchResults.length > 0 ? (\r\n                        <table className=\"table table-striped table-bordered\">\r\n                          <thead>\r\n                            <tr>\r\n                              <th scope=\"col\">Ligne</th>\r\n                              <th scope=\"col\">Texte de la ligne</th>\r\n                              <th scope=\"col\">Positions</th>\r\n                              <th scope=\"col\">Tableau LPS</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {searchResults.map((result, index) => (\r\n                              <tr key={index}>\r\n                                <td>{result.lineNumber ?? \"-\"}</td>\r\n                                <td>\r\n                                  {result.lineText ?? \"Texte indisponible\"}\r\n                                </td>\r\n                                <td>\r\n                                  {Array.isArray(result.positions) &&\r\n                                  result.positions.length > 0\r\n                                    ? result.positions.join(\", \")\r\n                                    : \"Aucune position\"}\r\n                                </td>\r\n                                <td>\r\n                                  {Array.isArray(result.lpsTable) &&\r\n                                  result.lpsTable.length > 0\r\n                                    ? result.lpsTable.join(\", \")\r\n                                    : \"Aucun LPS disponible\"}\r\n                                </td>\r\n                              </tr>\r\n                            ))}\r\n                          </tbody>\r\n                        </table>\r\n                      ) : (\r\n                        <p>Aucun résultat trouvé.</p>\r\n                      )}\r\n                    </div>\r\n                  </Modal.Body>\r\n                </Modal>\r\n              ) : (\r\n                <Modal\r\n                  show={showModal}\r\n                  onHide={() => setShowModal(false)}\r\n                  size=\"lg\"\r\n                  centered\r\n                >\r\n                  <Modal.Header>\r\n                    <Modal.Title>Details</Modal.Title>\r\n                    {/* Close button in the top right */}\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn-close\"\r\n                      onClick={() => setShowModal(false)}\r\n                    ></button>\r\n                  </Modal.Header>\r\n\r\n                  <Modal.Body>\r\n                    {timesearch &&\r\n                    (timesearch.results?.length > 0 ||\r\n                      timesearch.egrep?.length > 0) ? (\r\n                      <ResultsTable timesearch={timesearch} />\r\n                    ) : (\r\n                      <div className=\"text-center\">\r\n                        Chargement des résultats ou aucune donnée disponible\r\n                      </div>\r\n                    )}\r\n                  </Modal.Body>\r\n                </Modal>\r\n              )}\r\n            </div>\r\n          ) : null}\r\n          {searchAutomate ? (\r\n            <div>\r\n              {\" \"}\r\n              {/* Button to trigger modal */}\r\n              <div className=\"mt-3 d-flex justify-content-between\">\r\n                <button className=\"btn btn-warning mb-4\" onClick={handleReset}>\r\n                  Reinitialiser\r\n                </button>{\" \"}\r\n                <button\r\n                  className=\"btn btn-secondary mb-4\"\r\n                  onClick={() => setShowModal(true)} // Open modal\r\n                >\r\n                  Details\r\n                </button>\r\n              </div>\r\n              <div>\r\n                {!showTime ? (\r\n                  <>\r\n                    <h3 className=\"mb-3\">\r\n                      Résultats de la recherche : Automate\r\n                    </h3>{\" \"}\r\n                    <hr />\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <h3 className=\"mb-3\">\r\n                      Résultats du test de performance :Automate\r\n                    </h3>{\" \"}\r\n                    <hr />\r\n                  </>\r\n                )}\r\n\r\n                {searchResults && searchResults.length > 0 && (\r\n                  <>\r\n                    <div className=\"table-responsive mb-4\">\r\n                      {searchResults?.length > 0 ? (\r\n                        <table className=\"table table-striped table-bordered\">\r\n                          <thead>\r\n                            <tr>\r\n                              <th scope=\"col\">Numéro de Ligne</th>\r\n                              <th scope=\"col\">Texte de la Ligne</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {searchResults.map((res, index) => (\r\n                              <tr key={index}>\r\n                                <td>{res?.lineNumber ?? \"-\"}</td>\r\n                                <td>{res?.lineText ?? \"Texte indisponible\"}</td>\r\n                              </tr>\r\n                            ))}\r\n                          </tbody>\r\n                        </table>\r\n                      ) : (\r\n                        <div\r\n                          className=\"alert alert-warning text-center\"\r\n                          role=\"alert\"\r\n                        >\r\n                          Aucun résultat trouvé\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </>\r\n                )}\r\n                {/* Affichage du temps d'exécution moyen */}\r\n                {showTime && executionTime !== null && (\r\n                  <div>\r\n                    <div className=\"card container-fluid\">\r\n                      <div>\r\n                        {timesearch &&\r\n                        (timesearch?.results?.length > 0 ||\r\n                          timesearch?.egrep?.length > 0) ? (\r\n                          <ExecutionTimeChart\r\n                            isKMP={searchkmp}\r\n                            Times={\r\n                              timesearch?.results\r\n                                ? timesearch.results.map((r) => r?.time ?? 0) // Par défaut à 0 si `r.time` est nul\r\n                                : []\r\n                            }\r\n                            egrepTimes={\r\n                              timesearch?.egrep\r\n                                ? timesearch.egrep.map(\r\n                                    (r) => r?.executionTimeMs ?? 0\r\n                                  ) // Par défaut à 0 si `r.executionTimeMs` est nul\r\n                                : []\r\n                            }\r\n                          />\r\n                        ) : (\r\n                          <div className=\"text-center\">\r\n                            Chargement des données...\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      <h2>Analyse des Temps d'Exécution</h2>\r\n                      <table className=\"table table-bordered mt-4\">\r\n                        <thead>\r\n                          <tr>\r\n                            <th scope=\"col\">Critère</th>\r\n                            <th scope=\"col\">Automate</th>\r\n                            <th scope=\"col\">egrep</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          <tr>\r\n                            <td>Moyenne temps exécution</td>\r\n                            <td>{executionTime}</td>\r\n                            <td>67</td>\r\n                          </tr>\r\n                          <tr>\r\n                            <td>Médiane temps exécution</td>\r\n                            <td>{ex}</td>\r\n                            <td>32</td>\r\n                          </tr>\r\n                        </tbody>\r\n                      </table>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              {/* Modal for showing details */}\r\n              {!showTime ? (\r\n                <Modal\r\n                  show={showModal}\r\n                  onHide={() => setShowModal(false)}\r\n                  size=\"lg\"\r\n                  centered\r\n                >\r\n                  <Modal.Header>\r\n                    <Modal.Title>Details</Modal.Title>\r\n                    {/* Close button in the top right */}\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn-close\"\r\n                      onClick={() => setShowModal(false)}\r\n                    ></button>\r\n                  </Modal.Header>\r\n                  <Modal.Body>\r\n                    {arbre && (\r\n                      <div className=\"mb-4\">\r\n                        <h2>Arbre syntaxique</h2>\r\n                        <SyntaxTree node={arbre} />\r\n                        <div>{JSON.stringify(arbre, null, 3)}</div>\r\n                      </div>\r\n                    )}\r\n                    <hr />\r\n                    {automate && (\r\n                      <div className=\"mb-4\">\r\n                        <h2>Automate (NFA)</h2>\r\n                        <AutomateVisualizer automate={automate} />\r\n                      </div>\r\n                    )}\r\n                    <hr />\r\n                    {detAutomate && (\r\n                      <div className=\"mb-4\">\r\n                        <h2>Automate Déterminisé (DFA)</h2>\r\n                        <AutomateVisualizer automate={detAutomate} />\r\n                      </div>\r\n                    )}\r\n                    <hr />\r\n                    {MinAutomate && (\r\n                      <div className=\"mb-4\">\r\n                        <h2>Automate Minimisé (Min)</h2>\r\n                        <AutomateVisualizer automate={MinAutomate} />\r\n                      </div>\r\n                    )}\r\n                  </Modal.Body>\r\n                </Modal>\r\n              ) : (\r\n                <Modal\r\n                  show={showModal}\r\n                  onHide={() => setShowModal(false)}\r\n                  size=\"lg\"\r\n                  centered\r\n                >\r\n                  <Modal.Header>\r\n                    <Modal.Title>Details</Modal.Title>\r\n                    {/* Close button in the top right */}\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn-close\"\r\n                      onClick={() => setShowModal(false)}\r\n                    ></button>\r\n                  </Modal.Header>\r\n\r\n                  <Modal.Body>\r\n                    {timesearch &&\r\n                    (timesearch.results?.length > 0 ||\r\n                      timesearch.egrep?.length > 0) ? (\r\n                      <ResultsTable timesearch={timesearch} />\r\n                    ) : (\r\n                      <div className=\"text-center\">\r\n                        Chargement des résultats ou aucune donnée disponible\r\n                      </div>\r\n                    )}\r\n                  </Modal.Body>\r\n                </Modal>\r\n              )}\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Automaton;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}